listing:mini_ct.lst, Tue Apr 14 11:54:45 2015
objectfile:mini_ct.obj:
                        : ; *** 'C:\uC51\bin\uc51.exe': uC/51 - ANSI C compiler
                        : ; *** Standard 'i8051', V1.26, Nov 29 2004 (C) WWW.WICKENHAEUSER.COM
                        : ; sourcefile: 'mini_ct.c', time: Tue Apr 14 11:54:44 2015
                        : 
                        :  .hide
                        :  .show
                        : XDS=0
                        : COS=1
                        : NES=2
                        : INS=2
                        : .macro __line
                        : lcall $0006 ; uC/51 debugger
                        : .endmacro
                        :         .include <c8051f120.def>
                        :         .hide
                        :         .show
                        : .macro _irq_vector
                        :         .show
                        :         .segment @1, org @2
                        :         ljmp @3
                        :         .hide
                        : .endmacro
                        :  .export _main ; void main(void)
                        : 
                        : ; *** RESET POINT ***
                        :  .export __reset
                        :  .segment ___reset, org $0
co:0000: 02 01 1b       :  __reset: ljmp __startup
                        : 
                        :  .hide
                        :  .show
                        : 
                        :  .segment __main
                        : _main: ; void main(void)
                        :  ; variable 'scmd' allocated as 'auto'
                        :>//-----------------------------------------------------------------------------
                        :>// mini_ct.c
                        :>//-----------------------------------------------------------------------------
                        :>//Copyright 2012 Veikko Kanto 
                        :>
                        :>//   Licensed under the Apache License, Version 2.0 (the "License");
                        :>//   you may not use this file except in compliance with the License.
                        :>//   You may obtain a copy of the License at
                        :>//
                        :>//     http://www.apache.org/licenses/LICENSE-2.0
                        :>//
                        :>//   Unless required by applicable law or agreed to in writing, software
                        :>//   distributed under the License is distributed on an "AS IS" BASIS,
                        :>//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                        :>//   See the License for the specific language governing permissions and
                        :>//   limitations under the License.
                        :>//
                        :>// DATE: 1-7-12
                        :>//
                        :>// C8051F120 Prototype board Curve Tracer Program 
                        :>// Project Name mini_ct
                        :>// UART 460800bps board has 22.1184MHz crystal
                        :>// Compiled with uC/51 WWW.WICKENHAEUSER.COM
                        :>//
                        :>// Port0.0 UART Out
                        :>// Port0.1 UART In
                        :>// Port0.2 Foot Switch In
                        :>// Port1.0-7 GP Output
                        :>// PORT2.0-5 Rotary and Toggle Switch Indicator Inputs
                        :>// Port3.0-7 GP Output
                        :>// DAC0 CT Collector Sweep Voltage
                        :>// DAC1 CT Base Step Voltage/Current
                        :>// ADC-12Bit Channels 0-1 Voltage and Current PV PI
                        :>//
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// Includes
                        :>//-----------------------------------------------------------------------------
                        :>//#pragma CODE 
                        :>
                        :>#include <c8051f120.h>                 // SFR declarations
                        :>#include <stdio.h>
                        :>#include <string.h>
                        :>#include <irq52.h>
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// Global CONSTANTS
                        :>//-----------------------------------------------------------------------------
                        :>
                        :>//#define SYSCLK       22118400          // SYSCLK frequency in Hz
                        :>#define BDSN 1 //device serial number
                        :>//-----------------------------------------------------------------------------
                        :>// Function PROTOTYPES
                        :>//-----------------------------------------------------------------------------
                        :>
                        :>void SYSCLK_Init (void);
                        :>void PORT_Init (void);
                        :>void UART0_Init (void);
                        :>void ADC0_Init (void);
                        :>void Timer0_Init (void);
                        :>void inttostr(int iv);
                        :>void print2(int ir);
                        :>void inttobytes(int iv);
                        :>void Sine_256 (void);
                        :>void Triag_256 (void);
                        :>void PSine_256 (void);
                        :>void PTriag_256 (void);
                        :>void NSine_256 (void);
                        :>void NTriag_256 (void);
                        :>void Square_256 (void);
                        :>void PSquare_256 (void);
                        :>void NSquare_256 (void);
                        :>void TIMER0_ISR (void) interrupt;
                        :>void vkputc(char cb1);
                        :>char vkgetc(void);
                        :>//-----------------------------------------------------------------------------
                        :>// Global VARIABLES
                        :>//-----------------------------------------------------------------------------
                        :>
                        :>int volatile updwn;                   //Waveform generator current DAC value                
                        :>int volatile ramp;                    //Waveform generator lookup table current pointer value 
                        :>int volatile stpsav;                 //Flag to stop [512] continuous waveform data acqusition and save
                        :>int volatile dacset;                 //Last DAC0 value for manual DA0 command
                        :>int volatile swpstart;               //Starting value for DAC0 used in MEA sweep command 
                        :>int volatile swpstep;                //Step value for DAC0 used in MEA sweep command
                        :>unsigned int volatile data0, data1;   //Temporary data storage
                        :>int volatile icnt, jcnt, kcnt, wcnt;  //General Purpose Loop variables 
                        :>unsigned char volatile gain0, gain1;  //ADC gain constants
                        :>unsigned char volatile running;       //Flag to freeze running waveform
                        :>int volatile xdata pv[512];     //ADC0 voltage storage array for up to two cycles of waveform
                        :>int volatile xdata pi[512];     //ADC1 current storage array for up to two cycles of waveform
                        :>int volatile xdata wav[256];    //Waveform Look Up Table
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// MAIN Routine
                        :>//-----------------------------------------------------------------------------
                        :>
                        :>void main (void) {
co:03c2: 75 ff de       :  mov 255,#222
                        :>   char c;                            //Serial Port character storage     
                        :>   int ival;                          //Command Integer Value 
                        :>   char scmd[5];                      //Command String Value
                        :>   int i, j;                          //General Purpose loop variables
                        :>
                        :>   WDTCN = 0xde;                       // disable watchdog timer
                        :>   WDTCN = 0xad;
co:03c5: 75 ff ad       :  mov 255,#173
                        :>
                        :>   SYSCLK_Init ();                     // initialize oscillator
co:03c8: 12 10 c1       :  lcall _SYSCLK_Init
                        :>   PORT_Init ();                       // initialize crossbar and GPIO
co:03cb: 12 10 a5       :  lcall _PORT_Init
                        :>   UART0_Init ();                      // initialize UART0
co:03ce: 12 0d 9a       :  lcall _UART0_Init
                        :>   Timer0_Init ();                     // timer0 initialize
co:03d1: 12 0d 56       :  lcall _Timer0_Init
                        :>   ADC0_Init ();                       // initialize ADC
co:03d4: 12 0d 7e       :  lcall _ADC0_Init
                        :>   AD0EN = 1;                          // enable ADC
co:03d7: d2 ef          :  setb 239
                        :>   SFRPAGE   = DAC0_PAGE;              // enable both DACs
co:03d9: e4             :  clr A
co:03da: f5 84          :  mov 132,A
                        :>   DAC0CN    = 0x80;
co:03dc: 75 d4 80       :  mov 212,#128
                        :>   SFRPAGE   = DAC1_PAGE;
co:03df: 75 84 01       :  mov 132,#1
                        :>   DAC1CN    = 0x80;
co:03e2: 75 d4 80       :  mov 212,#128
                        :>   SFRPAGE   = LEGACY_PAGE;
co:03e5: e4             :  clr A
co:03e6: f5 84          :  mov 132,A
                        :>   P2 = 0xFF;         //set open drain P2 to high state for input of switch states
co:03e8: 75 a0 ff       :  mov 160,#255
                        :>   P1 = 0;                        //set output ports P1 and P3 to low                                 
co:03eb: e4             :  clr A
co:03ec: f5 90          :  mov 144,A
                        :>   P3 = 0;
co:03ee: e4             :  clr A
co:03ef: f5 b0          :  mov 176,A
                        :>   P0 = P0 & 0xF7;   //P0.3 was ground reference for foot switch used on prototype board, not needed o
co:03f1: 53 80 f7       :  anl 128,#247
                        :>   updwn = 32;       //Set to any number, updwn is the current value of the waveform generator 
co:03f4: 90 0a 19       :  mov DPTR,#_updwn
co:03f7: e4             :  clr A
co:03f8: f0             :  movx @DPTR,A
co:03f9: a3             :  inc DPTR
co:03fa: 74 20          :  mov A,#32
co:03fc: f0             :  movx @DPTR,A
                        :>   ramp = 0;         //Set the waveform lookup table pointer to zero      
co:03fd: 90 0a 17       :  mov DPTR,#_ramp
co:0400: e4             :  clr A
co:0401: f0             :  movx @DPTR,A
co:0402: a3             :  inc DPTR
co:0403: f0             :  movx @DPTR,A
                        :>   running = 0;      //When running = 0, waveform data is from the lookup table, else it is the static
co:0404: 90 0a 00       :  mov DPTR,#_running
co:0407: e4             :  clr A
co:0408: f0             :  movx @DPTR,A
                        :>   stpsav = 0;      //ADC data is saved at each waveform step with this flag set to zero
co:0409: 90 0a 15       :  mov DPTR,#_stpsav
co:040c: e4             :  clr A
co:040d: f0             :  movx @DPTR,A
co:040e: a3             :  inc DPTR
co:040f: f0             :  movx @DPTR,A
                        :>                     //Setting to 512 stops ADC aquisition but not waveform generation. Stop when send
                        :>   Sine_256 ();      //Create a sine wave table
co:0410: 12 0d a1       :  lcall _Sine_256
                        :>    
                        :>
                        :>   IE = 0x82;        // Enable global interrupts and timer0
co:0413: 75 a8 82       :  mov 168,#130
                        :>   TF0 = 0;
co:0416: c2 8d          :  clr 141
                        :>   
                        :>   vkputc(P2 & 0x3F);  //send swtich positions
co:0418: af a0          :  mov R7,160
co:041a: 53 07 3f       :  anl AR7,#63
co:041d: 12 0f 1c       :  lcall _vkputc
                        :>   vkputc(BDSN);       //send unit serial number
co:0420: 7f 01          :  mov R7,#1
co:0422: 12 0f 1c       :  lcall _vkputc
                        :>   vkputc(131);        //send character 131 to signal processor was reset or woken from power down
co:0425: 7f 83          :  mov R7,#131
co:0427: 12 0f 1c       :  lcall _vkputc
co:042a: 02 0b 3a       :  ljmp ?3
                        : ?2:
                        :  ; variable 'i' allocated as 'auto'
                        :>
                        :>//Main command interpreter loop that looks for three character ASCII command followed by 4 digit integ
                        :>        while (1) {
co:042d: e4             :  clr A
co:042e: f5 25          :  mov ?main_i,A
co:0430: f5 26          :  mov ?main_i+1,A
co:0432: 80 37          :  sjmp ?6
                        : ?5:
                        :>          i = 0;
                        :>      while (i<3) {             //Get three command characters
co:0434: 12 0f 5e       :  lcall _vkgetc
                        :  ; variable 'c' allocated as 'auto'
co:0437: 8f 27          :  mov ?main_c,R7
                        :>       c = vkgetc();
                        :>           putchar(c);             //echo character 
co:0439: af 27          :  mov R7,?main_c
co:043b: 12 02 4f       :  lcall __putc
                        :>           scmd[i] = c;
co:043e: ae 25          :  mov R6,?main_i
co:0440: af 26          :  mov R7,?main_i+1
co:0442: ad 07          :  mov R5,AR7
co:0444: 7f 20          :  mov R7,#?main_scmd
co:0446: ef             :  mov A,R7
co:0447: 2d             :  add A,R5
co:0448: f8             :  mov R0,A
co:0449: af 27          :  mov R7,?main_c
co:044b: a6 07          :  mov @R0,AR7
                        :>           i++;
co:044d: 05 26          :  inc ?main_i+1
co:044f: e5 26          :  mov A,?main_i+1
co:0451: 70 02          :  jnz ?_1
co:0453: 05 25          :  inc ?main_i
                        : ?_1:
                        :>       if (c == 10) i = 0;     //Reset if <CR> or <LF>
co:0455: 74 0a          :  mov A,#10
co:0457: 65 27          :  xrl A,?main_c
co:0459: 70 05          :  jnz ?8
                        : 
co:045b: e4             :  clr A
co:045c: f5 25          :  mov ?main_i,A
co:045e: f5 26          :  mov ?main_i+1,A
                        : ?8:
                        :>           if ( c == 13) i = 0;
co:0460: 74 0d          :  mov A,#13
co:0462: 65 27          :  xrl A,?main_c
co:0464: 70 05          :  jnz ?10
                        : 
co:0466: e4             :  clr A
co:0467: f5 25          :  mov ?main_i,A
co:0469: f5 26          :  mov ?main_i+1,A
                        : ?10:
                        :>      }
                        : ?6:
                        : 
co:046b: 7c 00          :  mov R4,#0
co:046d: 7d 03          :  mov R5,#3
co:046f: ae 25          :  mov R6,?main_i
co:0471: af 26          :  mov R7,?main_i+1
co:0473: c3             :  clr C
co:0474: ef             :  mov A,R7
co:0475: 9d             :  subb A,R5
co:0476: ee             :  mov A,R6
co:0477: 64 80          :  xrl A,#128
co:0479: 63 04 80       :  xrl AR4,#128
co:047c: 9c             :  subb A,R4
co:047d: 50 03          :  jnc ?_4
co:047f: 02 04 34       :  ljmp ?5
                        : ?_4:
                        :>          scmd[3] = 0;             //Get up to four decimal characters and convert to integer
co:0482: e4             :  clr A
co:0483: f5 23          :  mov ?main_scmd+3,A
                        :  ; variable 'ival' allocated as 'auto'
                        :>          ival = 0;
co:0485: e4             :  clr A
co:0486: f5 25          :  mov ?main_ival,A
co:0488: f5 26          :  mov ?main_ival+1,A
                        :  ; variable 'i' allocated as 'auto'
                        :>          i = 0;
co:048a: e4             :  clr A
co:048b: f5 27          :  mov ?i141,A
co:048d: f5 28          :  mov ?i141+1,A
co:048f: 02 04 df       :  ljmp ?13
                        : ?12:
                        :>      while (i<4) {
co:0492: 12 0f 5e       :  lcall _vkgetc
                        :  ; variable 'c' allocated as 'auto'
co:0495: 8f 29          :  mov ?i142,R7
                        :>       c = vkgetc();
                        :>           putchar(c);
co:0497: af 29          :  mov R7,?i142
co:0499: 12 02 4f       :  lcall __putc
                        :>           putchar('.');          //echo character plus dot
co:049c: 7f 2e          :  mov R7,#46
co:049e: 12 02 4f       :  lcall __putc
                        :>       if (c == 10) break;    //End integer input if <CR> or <LF>
co:04a1: 74 0a          :  mov A,#10
co:04a3: 65 29          :  xrl A,?i142
co:04a5: 70 03          :  jnz ?15
                        : 
co:04a7: 02 04 f6       :  ljmp ?14
                        : ?15:
                        :>           if (c == 13) break;
co:04aa: 74 0d          :  mov A,#13
co:04ac: 65 29          :  xrl A,?i142
                        : 
co:04ae: 60 46          :  jz ?14
                        :>           if (c <= '9')  ival = (ival*10) + (c & 15); //muliply by 10 to convert to binary
co:04b0: 7d 39          :  mov R5,#57
co:04b2: af 29          :  mov R7,?i142
co:04b4: d3             :  setb C
co:04b5: ef             :  mov A,R7
co:04b6: 9d             :  subb A,R5
co:04b7: 50 1e          :  jnc ?19
                        : 
co:04b9: af 29          :  mov R7,?i142
co:04bb: 7e 00          :  mov R6,#0
co:04bd: ef             :  mov A,R7
co:04be: 54 0f          :  anl A,#15
co:04c0: fb             :  mov R3,A
co:04c1: e4             :  clr A
co:04c2: fa             :  mov R2,A
co:04c3: fe             :  mov R6,A
co:04c4: 7f 0a          :  mov R7,#10
co:04c6: ac 25          :  mov R4,?main_ival
co:04c8: ad 26          :  mov R5,?main_ival+1
co:04ca: 12 02 8e       :  lcall __mul_i2
co:04cd: eb             :  mov A,R3
co:04ce: 2f             :  add A,R7
co:04cf: ff             :  mov R7,A
co:04d0: ea             :  mov A,R2
co:04d1: 3e             :  addc A,R6
co:04d2: fe             :  mov R6,A
co:04d3: 8e 25          :  mov ?main_ival,R6
co:04d5: 8f 26          :  mov ?main_ival+1,R7
                        : ?19:
                        :>           i++;                                        //sloppy routine only checks for '9' or less
co:04d7: 05 28          :  inc ?i141+1
co:04d9: e5 28          :  mov A,?i141+1
co:04db: 70 02          :  jnz ?_8
co:04dd: 05 27          :  inc ?i141
                        : ?_8:
                        :>      }
                        : ?13:
                        : 
co:04df: 7c 00          :  mov R4,#0
co:04e1: 7d 04          :  mov R5,#4
co:04e3: ae 27          :  mov R6,?i141
co:04e5: af 28          :  mov R7,?i141+1
co:04e7: c3             :  clr C
co:04e8: ef             :  mov A,R7
co:04e9: 9d             :  subb A,R5
co:04ea: ee             :  mov A,R6
co:04eb: 64 80          :  xrl A,#128
co:04ed: 63 04 80       :  xrl AR4,#128
co:04f0: 9c             :  subb A,R4
co:04f1: 50 03          :  jnc ?_9
co:04f3: 02 04 92       :  ljmp ?12
                        : ?_9:
                        : ?14:
                        :>           
                        :>//Set Wave Type by generating a DAC function table
                        :>      if (strcmp(scmd,"WAV") == 0 ) {
co:04f6: 7e 00          :  mov R6,#((?i23)>>8)&255
co:04f8: 7f 5a          :  mov R7,#(?i23)&255
co:04fa: ab 07          :  mov R3,AR7
co:04fc: aa 06          :  mov R2,AR6
co:04fe: 78 01          :  mov R0,#COS
co:0500: 7f 20          :  mov R7,#?main_scmd
co:0502: 7c 02          :  mov R4,#NES
co:0504: 12 01 f4       :  lcall _strcmp
co:0507: ee             :  mov A,R6
co:0508: 4f             :  orl A,R7
co:0509: 60 03          :  jz ?_10
co:050b: 02 05 7f       :  ljmp ?21
                        : ?_10:
                        : 
co:050e: e5 25          :  mov A,?main_ival
co:0510: 45 26          :  orl A,?main_ival+1
co:0512: 70 03          :  jnz ?24
                        :>      if (ival == 0) Sine_256 ();
co:0514: 12 0d a1       :  lcall _Sine_256
                        : ?24:
                        :>      if (ival == 1) Triag_256();
co:0517: ae 25          :  mov R6,?main_ival
co:0519: af 26          :  mov R7,?main_ival+1
co:051b: ef             :  mov A,R7
co:051c: 64 01          :  xrl A,#1
co:051e: 4e             :  orl A,R6
co:051f: 70 03          :  jnz ?26
                        : 
co:0521: 12 0e 5b       :  lcall _Triag_256
                        : ?26:
                        :>      if (ival == 2) Square_256();
co:0524: ae 25          :  mov R6,?main_ival
co:0526: af 26          :  mov R7,?main_ival+1
co:0528: ef             :  mov A,R7
co:0529: 64 02          :  xrl A,#2
co:052b: 4e             :  orl A,R6
co:052c: 70 03          :  jnz ?28
                        : 
co:052e: 12 10 05       :  lcall _Square_256
                        : ?28:
                        :>      if (ival == 3) PSine_256 ();
co:0531: ae 25          :  mov R6,?main_ival
co:0533: af 26          :  mov R7,?main_ival+1
co:0535: ef             :  mov A,R7
co:0536: 64 03          :  xrl A,#3
co:0538: 4e             :  orl A,R6
co:0539: 70 03          :  jnz ?30
                        : 
co:053b: 12 11 f1       :  lcall _PSine_256
                        : ?30:
                        :>      if (ival == 4) PTriag_256();
co:053e: ae 25          :  mov R6,?main_ival
co:0540: af 26          :  mov R7,?main_ival+1
co:0542: ef             :  mov A,R7
co:0543: 64 04          :  xrl A,#4
co:0545: 4e             :  orl A,R6
co:0546: 70 03          :  jnz ?32
                        : 
co:0548: 12 11 13       :  lcall _PTriag_256
                        : ?32:
                        :>      if (ival == 5) PSquare_256();
co:054b: ae 25          :  mov R6,?main_ival
co:054d: af 26          :  mov R7,?main_ival+1
co:054f: ef             :  mov A,R7
co:0550: 64 05          :  xrl A,#5
co:0552: 4e             :  orl A,R6
co:0553: 70 03          :  jnz ?34
                        : 
co:0555: 12 01 36       :  lcall _PSquare_256
                        : ?34:
                        :>      if (ival == 6) NSine_256 ();
co:0558: ae 25          :  mov R6,?main_ival
co:055a: af 26          :  mov R7,?main_ival+1
co:055c: ef             :  mov A,R7
co:055d: 64 06          :  xrl A,#6
co:055f: 4e             :  orl A,R6
co:0560: 70 03          :  jnz ?36
                        : 
co:0562: 12 11 82       :  lcall _NSine_256
                        : ?36:
                        :>      if (ival == 7) NTriag_256();
co:0565: ae 25          :  mov R6,?main_ival
co:0567: af 26          :  mov R7,?main_ival+1
co:0569: ef             :  mov A,R7
co:056a: 64 07          :  xrl A,#7
co:056c: 4e             :  orl A,R6
co:056d: 70 03          :  jnz ?38
                        : 
co:056f: 12 03 4a       :  lcall _NTriag_256
                        : ?38:
                        :>      if (ival == 8) NSquare_256();
co:0572: ae 25          :  mov R6,?main_ival
co:0574: af 26          :  mov R7,?main_ival+1
co:0576: ef             :  mov A,R7
co:0577: 64 08          :  xrl A,#8
co:0579: 4e             :  orl A,R6
co:057a: 70 03          :  jnz ?40
                        : 
co:057c: 12 00 74       :  lcall _NSquare_256
                        : ?40:
                        :>      };
                        : ?21:
                        : 
co:057f: 7e 00          :  mov R6,#((?i44)>>8)&255
co:0581: 7f 56          :  mov R7,#(?i44)&255
co:0583: ab 07          :  mov R3,AR7
co:0585: aa 06          :  mov R2,AR6
co:0587: 78 01          :  mov R0,#COS
co:0589: 7f 20          :  mov R7,#?main_scmd
co:058b: 7c 02          :  mov R4,#NES
co:058d: 12 01 f4       :  lcall _strcmp
co:0590: ee             :  mov A,R6
co:0591: 4f             :  orl A,R7
co:0592: 70 08          :  jnz ?42
                        :>
                        :>//Set Extra Ports P1 or P3 to Data Value, can be used for control of relays etc.
                        :>      if (strcmp(scmd,"SP1") == 0 ) {
co:0594: ae 25          :  mov R6,?main_ival
co:0596: af 26          :  mov R7,?main_ival+1
co:0598: 7e 00          :  mov R6,#0
co:059a: 8f 90          :  mov 144,R7
                        :>      P1 = ival & 0xFF;
                        :>      };
                        : ?42:
                        : 
co:059c: 7e 00          :  mov R6,#((?i47)>>8)&255
co:059e: 7f 52          :  mov R7,#(?i47)&255
co:05a0: ab 07          :  mov R3,AR7
co:05a2: aa 06          :  mov R2,AR6
co:05a4: 78 01          :  mov R0,#COS
co:05a6: 7f 20          :  mov R7,#?main_scmd
co:05a8: 7c 02          :  mov R4,#NES
co:05aa: 12 01 f4       :  lcall _strcmp
co:05ad: ee             :  mov A,R6
co:05ae: 4f             :  orl A,R7
co:05af: 70 08          :  jnz ?45
                        :>      if (strcmp(scmd,"SP3") == 0 ) {
co:05b1: ae 25          :  mov R6,?main_ival
co:05b3: af 26          :  mov R7,?main_ival+1
co:05b5: 7e 00          :  mov R6,#0
co:05b7: 8f b0          :  mov 176,R7
                        :>      P3 = ival & 0xFF;
                        :>      };
                        : ?45:
                        : 
co:05b9: 7e 00          :  mov R6,#((?i50)>>8)&255
co:05bb: 7f 4e          :  mov R7,#(?i50)&255
co:05bd: ab 07          :  mov R3,AR7
co:05bf: aa 06          :  mov R2,AR6
co:05c1: 78 01          :  mov R0,#COS
co:05c3: 7f 20          :  mov R7,#?main_scmd
co:05c5: 7c 02          :  mov R4,#NES
co:05c7: 12 01 f4       :  lcall _strcmp
co:05ca: ee             :  mov A,R6
co:05cb: 4f             :  orl A,R7
co:05cc: 70 31          :  jnz ?48
                        :>
                        :>
                        :>//Set DAC voltage to static Value 0 to 4095
                        :>          if (strcmp(scmd,"DA0") == 0 ) {
co:05ce: 75 a8 80       :  mov 168,#128
                        :>       IE = 0x80; //turn off timer0 interupts
                        :>       SFRPAGE   = DAC0_PAGE;
co:05d1: e4             :  clr A
co:05d2: f5 84          :  mov 132,A
                        :>       dacset = ival;
co:05d4: ae 25          :  mov R6,?main_ival
co:05d6: af 26          :  mov R7,?main_ival+1
co:05d8: 90 0a 13       :  mov DPTR,#_dacset
co:05db: 12 03 3b       :  lcall __st_dptr_r67
                        :>           DAC0L = ival & 0xFF;
co:05de: ae 25          :  mov R6,?main_ival
co:05e0: af 26          :  mov R7,?main_ival+1
co:05e2: 7e 00          :  mov R6,#0
co:05e4: 8f d2          :  mov 210,R7
                        :>           DAC0H = ival >> 8;
co:05e6: 7d 08          :  mov R5,#8
co:05e8: ae 25          :  mov R6,?main_ival
co:05ea: af 26          :  mov R7,?main_ival+1
co:05ec: ef             :  mov A,R7
co:05ed: 8d f0          :  mov B,R5
co:05ef: 05 f0          :  inc B
co:05f1: 80 06          :  sjmp ?_23
                        : ?_24:
co:05f3: ce             :  xch A,R6
co:05f4: a2 e7          :  mov C,ACC.7
co:05f6: 13             :  rrc A
co:05f7: ce             :  xch A,R6
co:05f8: 13             :  rrc A
                        : ?_23:
co:05f9: d5 f0 f7       :  djnz B,?_24
co:05fc: ff             :  mov R7,A
co:05fd: 8f d3          :  mov 211,R7
                        :>      };
                        : ?48:
                        : 
co:05ff: 7e 00          :  mov R6,#((?i53)>>8)&255
co:0601: 7f 4a          :  mov R7,#(?i53)&255
co:0603: ab 07          :  mov R3,AR7
co:0605: aa 06          :  mov R2,AR6
co:0607: 78 01          :  mov R0,#COS
co:0609: 7f 20          :  mov R7,#?main_scmd
co:060b: 7c 02          :  mov R4,#NES
co:060d: 12 01 f4       :  lcall _strcmp
co:0610: ee             :  mov A,R6
co:0611: 4f             :  orl A,R7
co:0612: 70 27          :  jnz ?51
                        :>          if (strcmp(scmd,"DA1") == 0 ) {
co:0614: 75 84 01       :  mov 132,#1
                        :>           SFRPAGE   = DAC1_PAGE;
                        :>       DAC1L = ival & 0xFF;
co:0617: ae 25          :  mov R6,?main_ival
co:0619: af 26          :  mov R7,?main_ival+1
co:061b: 7e 00          :  mov R6,#0
co:061d: 8f d2          :  mov 210,R7
                        :>           DAC1H = ival >> 8;
co:061f: 7d 08          :  mov R5,#8
co:0621: ae 25          :  mov R6,?main_ival
co:0623: af 26          :  mov R7,?main_ival+1
co:0625: ef             :  mov A,R7
co:0626: 8d f0          :  mov B,R5
co:0628: 05 f0          :  inc B
co:062a: 80 06          :  sjmp ?_26
                        : ?_27:
co:062c: ce             :  xch A,R6
co:062d: a2 e7          :  mov C,ACC.7
co:062f: 13             :  rrc A
co:0630: ce             :  xch A,R6
co:0631: 13             :  rrc A
                        : ?_26:
co:0632: d5 f0 f7       :  djnz B,?_27
co:0635: ff             :  mov R7,A
co:0636: 8f d3          :  mov 211,R7
                        :>       SFRPAGE   = DAC0_PAGE;
co:0638: e4             :  clr A
co:0639: f5 84          :  mov 132,A
                        :>          };
                        : ?51:
                        : 
co:063b: 7e 00          :  mov R6,#((?i56)>>8)&255
co:063d: 7f 46          :  mov R7,#(?i56)&255
co:063f: ab 07          :  mov R3,AR7
co:0641: aa 06          :  mov R2,AR6
co:0643: 78 01          :  mov R0,#COS
co:0645: 7f 20          :  mov R7,#?main_scmd
co:0647: 7c 02          :  mov R4,#NES
co:0649: 12 01 f4       :  lcall _strcmp
co:064c: ee             :  mov A,R6
co:064d: 4f             :  orl A,R7
co:064e: 70 0a          :  jnz ?54
                        :>
                        :>//Set Step DAC Start Value 0 to 4095, zero point is 2048
                        :>      if (strcmp(scmd,"STA") == 0 ) {
co:0650: ae 25          :  mov R6,?main_ival
co:0652: af 26          :  mov R7,?main_ival+1
co:0654: 90 0a 11       :  mov DPTR,#_swpstart
co:0657: 12 03 3b       :  lcall __st_dptr_r67
                        :>       swpstart = ival;
                        :>      };
                        : ?54:
                        : 
co:065a: 7e 00          :  mov R6,#((?i59)>>8)&255
co:065c: 7f 42          :  mov R7,#(?i59)&255
co:065e: ab 07          :  mov R3,AR7
co:0660: aa 06          :  mov R2,AR6
co:0662: 78 01          :  mov R0,#COS
co:0664: 7f 20          :  mov R7,#?main_scmd
co:0666: 7c 02          :  mov R4,#NES
co:0668: 12 01 f4       :  lcall _strcmp
co:066b: ee             :  mov A,R6
co:066c: 4f             :  orl A,R7
co:066d: 70 11          :  jnz ?57
                        :>//Set Step DAC step size 0 to 4095, sero point is 2048
                        :>      if (strcmp(scmd,"STP") == 0 ) {
co:066f: ae 25          :  mov R6,?main_ival
co:0671: af 26          :  mov R7,?main_ival+1
co:0673: e4             :  clr A
co:0674: 2f             :  add A,R7
co:0675: ff             :  mov R7,A
co:0676: 74 f8          :  mov A,#248
co:0678: 3e             :  addc A,R6
co:0679: fe             :  mov R6,A
co:067a: 90 0a 0f       :  mov DPTR,#_swpstep
co:067d: 12 03 3b       :  lcall __st_dptr_r67
                        :>       swpstep = ival-2048;
                        :>      };
                        : ?57:
                        : 
co:0680: 7e 00          :  mov R6,#((?i62)>>8)&255
co:0682: 7f 3e          :  mov R7,#(?i62)&255
co:0684: ab 07          :  mov R3,AR7
co:0686: aa 06          :  mov R2,AR6
co:0688: 78 01          :  mov R0,#COS
co:068a: 7f 20          :  mov R7,#?main_scmd
co:068c: 7c 02          :  mov R4,#NES
co:068e: 12 01 f4       :  lcall _strcmp
co:0691: ee             :  mov A,R6
co:0692: 4f             :  orl A,R7
co:0693: 60 03          :  jz ?_30
co:0695: 02 08 3f       :  ljmp ?60
                        : ?_30:
                        :>
                        :>//Measure while Stepping DAC, Average 16 measurements per point and return values for up to 9999 V-I d
                        :>          if (strcmp(scmd,"MEA") == 0 ) {
co:0698: 75 a8 80       :  mov 168,#128
                        :>       IE = 0x80;                    //turn off timer0 interupts to stop continuouse sweep
                        :>       dacset = swpstart;            //starting sweep value
co:069b: 90 0a 11       :  mov DPTR,#_swpstart
co:069e: 12 00 03       :  lcall __ld_dptr_r67
co:06a1: 90 0a 13       :  mov DPTR,#_dacset
co:06a4: 12 03 3b       :  lcall __st_dptr_r67
                        :>       SFRPAGE   = DAC0_PAGE;
co:06a7: e4             :  clr A
co:06a8: f5 84          :  mov 132,A
                        :  ; variable 'j' allocated as 'auto'
                        :>       for (j = 0; j < ival; j++){   //return up to 9999 data points
co:06aa: e4             :  clr A
co:06ab: f5 27          :  mov ?main_j,A
co:06ad: f5 28          :  mov ?main_j+1,A
co:06af: 02 08 00       :  ljmp ?66
                        : ?63:
                        : 
co:06b2: 90 0a 13       :  mov DPTR,#_dacset
co:06b5: 12 00 03       :  lcall __ld_dptr_r67
co:06b8: 7e 00          :  mov R6,#0
co:06ba: 8f d2          :  mov 210,R7
                        :>        DAC0L = dacset & 0xFF;       //update DAC
                        :>        DAC0H = dacset >> 8;
co:06bc: 7d 08          :  mov R5,#8
co:06be: 90 0a 13       :  mov DPTR,#_dacset
co:06c1: 12 00 03       :  lcall __ld_dptr_r67
co:06c4: ef             :  mov A,R7
co:06c5: 8d f0          :  mov B,R5
co:06c7: 05 f0          :  inc B
co:06c9: 80 06          :  sjmp ?_31
                        : ?_32:
co:06cb: ce             :  xch A,R6
co:06cc: a2 e7          :  mov C,ACC.7
co:06ce: 13             :  rrc A
co:06cf: ce             :  xch A,R6
co:06d0: 13             :  rrc A
                        : ?_31:
co:06d1: d5 f0 f7       :  djnz B,?_32
co:06d4: ff             :  mov R7,A
co:06d5: 8f d3          :  mov 211,R7
                        :>        dacset = dacset + swpstep;         //increment DAC and limit to 0-4095
co:06d7: 90 0a 0f       :  mov DPTR,#_swpstep
co:06da: 12 00 12       :  lcall __ld_dptr_r45
co:06dd: 90 0a 13       :  mov DPTR,#_dacset
co:06e0: 12 00 03       :  lcall __ld_dptr_r67
co:06e3: ed             :  mov A,R5
co:06e4: 2f             :  add A,R7
co:06e5: ff             :  mov R7,A
co:06e6: ec             :  mov A,R4
co:06e7: 3e             :  addc A,R6
co:06e8: fe             :  mov R6,A
co:06e9: 90 0a 13       :  mov DPTR,#_dacset
co:06ec: 12 03 3b       :  lcall __st_dptr_r67
                        :>        if (dacset < 0) dacset = 0;    
co:06ef: 90 0a 13       :  mov DPTR,#_dacset
co:06f2: 12 00 03       :  lcall __ld_dptr_r67
co:06f5: ee             :  mov A,R6
co:06f6: 30 e7 07       :  jnb ACC.7,?67
                        : 
co:06f9: 90 0a 13       :  mov DPTR,#_dacset
co:06fc: e4             :  clr A
co:06fd: f0             :  movx @DPTR,A
co:06fe: a3             :  inc DPTR
co:06ff: f0             :  movx @DPTR,A
                        : ?67:
                        :>        if (dacset > 4095) dacset = 4095;
co:0700: 90 0a 13       :  mov DPTR,#_dacset
co:0703: 12 00 03       :  lcall __ld_dptr_r67
co:0706: d3             :  setb C
co:0707: ef             :  mov A,R7
co:0708: 94 ff          :  subb A,#255
co:070a: ee             :  mov A,R6
co:070b: 64 80          :  xrl A,#128
co:070d: 94 8f          :  subb A,#15 ^ 128
co:070f: 40 0a          :  jc ?69
                        : 
co:0711: 90 0a 13       :  mov DPTR,#_dacset
co:0714: 74 0f          :  mov A,#15
co:0716: f0             :  movx @DPTR,A
co:0717: a3             :  inc DPTR
co:0718: 74 ff          :  mov A,#255
co:071a: f0             :  movx @DPTR,A
                        : ?69:
                        :>        for (i = 0; i <3000; i ++);       // delay 100 us for setting
co:071b: 7e 0c          :  mov R6,#(255+3000)>>8
co:071d: 7f b8          :  mov R7,#184
                        : ?71:
                        : 
co:071f: df fe          :  djnz R7,?71
co:0721: de fc          :  djnz R6,?71
                        :>        data0 = 0;                      //initiallize avage value holders
co:0723: 90 0a 0d       :  mov DPTR,#_data0
co:0726: e4             :  clr A
co:0727: f0             :  movx @DPTR,A
co:0728: a3             :  inc DPTR
co:0729: f0             :  movx @DPTR,A
                        :>        data1 = 0;
co:072a: 90 0a 0b       :  mov DPTR,#_data1
co:072d: e4             :  clr A
co:072e: f0             :  movx @DPTR,A
co:072f: a3             :  inc DPTR
co:0730: f0             :  movx @DPTR,A
                        :>        for (i = 0; i < 16; i++) {
co:0731: 7b 10          :  mov R3,#16
                        : ?76:
                        : 
co:0733: 90 0a 02       :  mov DPTR,#_gain0
co:0736: e0             :  movx A,@DPTR
co:0737: f5 bc          :  mov 188,A
                        :>        //Voltage 0 read       
                        :>         ADC0CF = gain0;               //Select gain
                        :>         AMX0SL = 0x00;                // Select AIN.0 as ADC mux output
co:0739: e4             :  clr A
co:073a: f5 bb          :  mov 187,A
                        :>         AD0INT = 0;                   // ADC0 write - b5 clear interupt
co:073c: c2 ed          :  clr 237
                        :>         AD0BUSY = 1;                  // ADC0 write - b4 to 1 starts convert
co:073e: d2 ec          :  setb 236
                        : ?80:
                        :>         while (AD0INT == 0);          // ADC0 read - b5 to 1 end of convert
co:0740: 30 ed fd       :  jnb 237,?80
                        :>         data0 = data0 + (ADC0H << 8) + ADC0L; //Accumulate data
co:0743: af bf          :  mov R7,191
co:0745: ad 07          :  mov R5,AR7
co:0747: 7c 00          :  mov R4,#0
co:0749: 7f 08          :  mov R7,#8
co:074b: ed             :  mov A,R5
co:074c: 8f f0          :  mov B,R7
co:074e: 05 f0          :  inc B
co:0750: 80 05          :  sjmp ?_38
                        : ?_39:
co:0752: c3             :  clr C
co:0753: 33             :  rlc A
co:0754: cc             :  xch A,R4
co:0755: 33             :  rlc A
co:0756: cc             :  xch A,R4
                        : ?_38:
co:0757: d5 f0 f8       :  djnz B,?_39
co:075a: fd             :  mov R5,A
co:075b: 90 0a 0d       :  mov DPTR,#_data0
co:075e: 12 00 03       :  lcall __ld_dptr_r67
co:0761: ed             :  mov A,R5
co:0762: 2f             :  add A,R7
co:0763: fd             :  mov R5,A
co:0764: ec             :  mov A,R4
co:0765: 3e             :  addc A,R6
co:0766: fc             :  mov R4,A
co:0767: af be          :  mov R7,190
co:0769: 7e 00          :  mov R6,#0
co:076b: ef             :  mov A,R7
co:076c: 2d             :  add A,R5
co:076d: ff             :  mov R7,A
co:076e: ee             :  mov A,R6
co:076f: 3c             :  addc A,R4
co:0770: fe             :  mov R6,A
co:0771: 90 0a 0d       :  mov DPTR,#_data0
co:0774: 12 03 3b       :  lcall __st_dptr_r67
                        :>        //Voltage 1 read 
                        :>         ADC0CF = gain1;               //Select gain
co:0777: 90 0a 01       :  mov DPTR,#_gain1
co:077a: e0             :  movx A,@DPTR
co:077b: f5 bc          :  mov 188,A
                        :>         AMX0SL = 0x01;                // Select AIN.1 as ADC mux output
co:077d: 75 bb 01       :  mov 187,#1
                        :>         AD0INT = 0;                   // ADC0 write - b5 clear interupt
co:0780: c2 ed          :  clr 237
                        :>         AD0BUSY = 1;                  // ADC0 write - b4 to 1 starts convert
co:0782: d2 ec          :  setb 236
                        : ?83:
                        :>         while (AD0INT == 0);          // ADC0 read - b5 to 1 end of convert
co:0784: 30 ed fd       :  jnb 237,?83
                        :>         data1 = data1 + (ADC0H << 8) + ADC0L; //Accumulate data
co:0787: af bf          :  mov R7,191
co:0789: ad 07          :  mov R5,AR7
co:078b: 7c 00          :  mov R4,#0
co:078d: 7f 08          :  mov R7,#8
co:078f: ed             :  mov A,R5
co:0790: 8f f0          :  mov B,R7
co:0792: 05 f0          :  inc B
co:0794: 80 05          :  sjmp ?_41
                        : ?_42:
co:0796: c3             :  clr C
co:0797: 33             :  rlc A
co:0798: cc             :  xch A,R4
co:0799: 33             :  rlc A
co:079a: cc             :  xch A,R4
                        : ?_41:
co:079b: d5 f0 f8       :  djnz B,?_42
co:079e: fd             :  mov R5,A
co:079f: 90 0a 0b       :  mov DPTR,#_data1
co:07a2: 12 00 03       :  lcall __ld_dptr_r67
co:07a5: ed             :  mov A,R5
co:07a6: 2f             :  add A,R7
co:07a7: fd             :  mov R5,A
co:07a8: ec             :  mov A,R4
co:07a9: 3e             :  addc A,R6
co:07aa: fc             :  mov R4,A
co:07ab: af be          :  mov R7,190
co:07ad: 7e 00          :  mov R6,#0
co:07af: ef             :  mov A,R7
co:07b0: 2d             :  add A,R5
co:07b1: ff             :  mov R7,A
co:07b2: ee             :  mov A,R6
co:07b3: 3c             :  addc A,R4
co:07b4: fe             :  mov R6,A
co:07b5: 90 0a 0b       :  mov DPTR,#_data1
co:07b8: 12 03 3b       :  lcall __st_dptr_r67
                        :>        }
co:07bb: db 02          :  djnz R3,?_43
co:07bd: 80 03          :  sjmp ?_44
                        : ?_43:
co:07bf: 02 07 33       :  ljmp ?76
                        : ?_44:
                        :>         inttobytes(data0 >> 2);       //Reduce summed data to 14bits and send to serial port
co:07c2: 7d 02          :  mov R5,#2
co:07c4: 90 0a 0d       :  mov DPTR,#_data0
co:07c7: 12 00 03       :  lcall __ld_dptr_r67
co:07ca: ef             :  mov A,R7
co:07cb: 8d f0          :  mov B,R5
co:07cd: 05 f0          :  inc B
co:07cf: 80 05          :  sjmp ?_45
                        : ?_46:
co:07d1: ce             :  xch A,R6
co:07d2: c3             :  clr C
co:07d3: 13             :  rrc A
co:07d4: ce             :  xch A,R6
co:07d5: 13             :  rrc A
                        : ?_45:
co:07d6: d5 f0 f8       :  djnz B,?_46
co:07d9: ff             :  mov R7,A
co:07da: 12 0f 2c       :  lcall _inttobytes
                        :>         inttobytes(data1 >> 2); 
co:07dd: 7d 02          :  mov R5,#2
co:07df: 90 0a 0b       :  mov DPTR,#_data1
co:07e2: 12 00 03       :  lcall __ld_dptr_r67
co:07e5: ef             :  mov A,R7
co:07e6: 8d f0          :  mov B,R5
co:07e8: 05 f0          :  inc B
co:07ea: 80 05          :  sjmp ?_47
                        : ?_48:
co:07ec: ce             :  xch A,R6
co:07ed: c3             :  clr C
co:07ee: 13             :  rrc A
co:07ef: ce             :  xch A,R6
co:07f0: 13             :  rrc A
                        : ?_47:
co:07f1: d5 f0 f8       :  djnz B,?_48
co:07f4: ff             :  mov R7,A
co:07f5: 12 0f 2c       :  lcall _inttobytes
                        :>       }
co:07f8: 05 28          :  inc ?main_j+1
co:07fa: e5 28          :  mov A,?main_j+1
co:07fc: 70 02          :  jnz ?_49
co:07fe: 05 27          :  inc ?main_j
                        : ?_49:
                        : ?66:
                        : 
co:0800: ac 25          :  mov R4,?main_ival
co:0802: ad 26          :  mov R5,?main_ival+1
co:0804: ae 27          :  mov R6,?main_j
co:0806: af 28          :  mov R7,?main_j+1
co:0808: c3             :  clr C
co:0809: ef             :  mov A,R7
co:080a: 9d             :  subb A,R5
co:080b: ee             :  mov A,R6
co:080c: 64 80          :  xrl A,#128
co:080e: 63 04 80       :  xrl AR4,#128
co:0811: 9c             :  subb A,R4
co:0812: 50 03          :  jnc ?_50
co:0814: 02 06 b2       :  ljmp ?63
                        : ?_50:
                        :>        inttobytes(P2 & 0x3F);         //Send switch position update twice
co:0817: af a0          :  mov R7,160
co:0819: 7e 00          :  mov R6,#0
co:081b: 53 07 3f       :  anl AR7,#63
co:081e: 7e 00          :  mov R6,#0
co:0820: 12 0f 2c       :  lcall _inttobytes
                        :>        inttobytes(P2 & 0x3F); 
co:0823: af a0          :  mov R7,160
co:0825: 7e 00          :  mov R6,#0
co:0827: 53 07 3f       :  anl AR7,#63
co:082a: 7e 00          :  mov R6,#0
co:082c: 12 0f 2c       :  lcall _inttobytes
                        :>        putchar(129);                 //Terminate with char(129) and <CR><LF> 
co:082f: 7f 81          :  mov R7,#129
co:0831: 12 02 4f       :  lcall __putc
                        :>        putchar('\n');
co:0834: 7f 0a          :  mov R7,#10
co:0836: 12 02 4f       :  lcall __putc
                        :>        DAC0L = 0; 
co:0839: e4             :  clr A
co:083a: f5 d2          :  mov 210,A
                        :>        DAC0H = 0x08;                //zero dac voltage
co:083c: 75 d3 08       :  mov 211,#8
                        :>          };
                        : ?60:
                        : 
co:083f: 7e 00          :  mov R6,#((?i89)>>8)&255
co:0841: 7f 3a          :  mov R7,#(?i89)&255
co:0843: ab 07          :  mov R3,AR7
co:0845: aa 06          :  mov R2,AR6
co:0847: 78 01          :  mov R0,#COS
co:0849: 7f 20          :  mov R7,#?main_scmd
co:084b: 7c 02          :  mov R4,#NES
co:084d: 12 01 f4       :  lcall _strcmp
co:0850: ee             :  mov A,R6
co:0851: 4f             :  orl A,R7
co:0852: 60 03          :  jz ?_51
co:0854: 02 09 55       :  ljmp ?87
                        : ?_51:
                        :>
                        :>//DCM Measure Static Voltage, Measure up to 512 points and return V-I values
                        :>      if (strcmp(scmd,"DCM") == 0 ) {
co:0857: 75 a8 80       :  mov 168,#128
                        :>        IE = 0x80;                     //turn off timer0 interupts to stop continuous wave generator
                        :>        SFRPAGE   = DAC0_PAGE;         
co:085a: e4             :  clr A
co:085b: f5 84          :  mov 132,A
                        :>        if (ival > 512) ival = 512;    //Limit to 512 points to protect memory over run
co:085d: ae 25          :  mov R6,?main_ival
co:085f: af 26          :  mov R7,?main_ival+1
co:0861: d3             :  setb C
co:0862: ef             :  mov A,R7
co:0863: 94 00          :  subb A,#0
co:0865: ee             :  mov A,R6
co:0866: 64 80          :  xrl A,#128
co:0868: 94 82          :  subb A,#2 ^ 128
co:086a: 40 06          :  jc ?90
                        : 
co:086c: 75 25 02       :  mov ?main_ival,#2
co:086f: 75 26 00       :  mov ?main_ival+1,#0
                        : ?90:
                        :  ; variable 'i' allocated as 'auto'
                        :>        for (i = 0; i < ival; i++) {   
co:0872: e4             :  clr A
co:0873: f5 27          :  mov ?i143,A
co:0875: f5 28          :  mov ?i143+1,A
co:0877: 02 09 1c       :  ljmp ?95
                        : ?92:
                        : 
co:087a: 90 0a 02       :  mov DPTR,#_gain0
co:087d: e0             :  movx A,@DPTR
co:087e: f5 bc          :  mov 188,A
                        :>        //Voltage 0 read       
                        :>         ADC0CF = gain0;               //Select gain
                        :>         AMX0SL = 0x00;                // Select AIN.0 as ADC mux output
co:0880: e4             :  clr A
co:0881: f5 bb          :  mov 187,A
                        :>         AD0INT = 0;                   // ADC0 write - b5 clear interupt
co:0883: c2 ed          :  clr 237
                        :>         AD0BUSY = 1;                  // ADC0 write - b4 to 1 starts convert
co:0885: d2 ec          :  setb 236
                        : ?96:
                        :>         while (AD0INT == 0);          // ADC0 read - b5 to 1 end of convert
co:0887: 30 ed fd       :  jnb 237,?96
                        :>         data0 = (ADC0H << 8) + ADC0L; // Convert to word
co:088a: af bf          :  mov R7,191
co:088c: ad 07          :  mov R5,AR7
co:088e: 7c 00          :  mov R4,#0
co:0890: 7f 08          :  mov R7,#8
co:0892: ed             :  mov A,R5
co:0893: 8f f0          :  mov B,R7
co:0895: 05 f0          :  inc B
co:0897: 80 05          :  sjmp ?_54
                        : ?_55:
co:0899: c3             :  clr C
co:089a: 33             :  rlc A
co:089b: cc             :  xch A,R4
co:089c: 33             :  rlc A
co:089d: cc             :  xch A,R4
                        : ?_54:
co:089e: d5 f0 f8       :  djnz B,?_55
co:08a1: fd             :  mov R5,A
co:08a2: af be          :  mov R7,190
co:08a4: 7e 00          :  mov R6,#0
co:08a6: ef             :  mov A,R7
co:08a7: 2d             :  add A,R5
co:08a8: ff             :  mov R7,A
co:08a9: ee             :  mov A,R6
co:08aa: 3c             :  addc A,R4
co:08ab: fe             :  mov R6,A
co:08ac: 90 0a 0d       :  mov DPTR,#_data0
co:08af: 12 03 3b       :  lcall __st_dptr_r67
                        :>        //Voltage 1 read 
                        :>         ADC0CF = gain1;               //Select gain
co:08b2: 90 0a 01       :  mov DPTR,#_gain1
co:08b5: e0             :  movx A,@DPTR
co:08b6: f5 bc          :  mov 188,A
                        :>         AMX0SL = 0x01;                // Select AIN.1 as ADC mux output
co:08b8: 75 bb 01       :  mov 187,#1
                        :>         AD0INT = 0;                   // ADC0 write - b5 clear interupt
co:08bb: c2 ed          :  clr 237
                        :>         AD0BUSY = 1;                  // ADC0 write - b4 to 1 starts convert
co:08bd: d2 ec          :  setb 236
                        : ?99:
                        :>         while (AD0INT == 0);          // ADC0 read - b5 to 1 end of convert
co:08bf: 30 ed fd       :  jnb 237,?99
                        :>         data1 = (ADC0H << 8) + ADC0L; //Convert to word
co:08c2: af bf          :  mov R7,191
co:08c4: ad 07          :  mov R5,AR7
co:08c6: 7c 00          :  mov R4,#0
co:08c8: 7f 08          :  mov R7,#8
co:08ca: ed             :  mov A,R5
co:08cb: 8f f0          :  mov B,R7
co:08cd: 05 f0          :  inc B
co:08cf: 80 05          :  sjmp ?_57
                        : ?_58:
co:08d1: c3             :  clr C
co:08d2: 33             :  rlc A
co:08d3: cc             :  xch A,R4
co:08d4: 33             :  rlc A
co:08d5: cc             :  xch A,R4
                        : ?_57:
co:08d6: d5 f0 f8       :  djnz B,?_58
co:08d9: fd             :  mov R5,A
co:08da: af be          :  mov R7,190
co:08dc: 7e 00          :  mov R6,#0
co:08de: ef             :  mov A,R7
co:08df: 2d             :  add A,R5
co:08e0: ff             :  mov R7,A
co:08e1: ee             :  mov A,R6
co:08e2: 3c             :  addc A,R4
co:08e3: fe             :  mov R6,A
co:08e4: 90 0a 0b       :  mov DPTR,#_data1
co:08e7: 12 03 3b       :  lcall __st_dptr_r67
                        :>         inttobytes(data0 << 2);       //Save 12 bit data as 14-bit
co:08ea: 90 0a 0d       :  mov DPTR,#_data0
co:08ed: 12 00 03       :  lcall __ld_dptr_r67
co:08f0: ef             :  mov A,R7
co:08f1: 2f             :  add A,R7
co:08f2: ff             :  mov R7,A
co:08f3: ee             :  mov A,R6
co:08f4: 33             :  rlc A
co:08f5: fe             :  mov R6,A
co:08f6: ef             :  mov A,R7
co:08f7: 2f             :  add A,R7
co:08f8: ff             :  mov R7,A
co:08f9: ee             :  mov A,R6
co:08fa: 33             :  rlc A
co:08fb: fe             :  mov R6,A
co:08fc: 12 0f 2c       :  lcall _inttobytes
                        :>         inttobytes(data1 << 2); 
co:08ff: 90 0a 0b       :  mov DPTR,#_data1
co:0902: 12 00 03       :  lcall __ld_dptr_r67
co:0905: ef             :  mov A,R7
co:0906: 2f             :  add A,R7
co:0907: ff             :  mov R7,A
co:0908: ee             :  mov A,R6
co:0909: 33             :  rlc A
co:090a: fe             :  mov R6,A
co:090b: ef             :  mov A,R7
co:090c: 2f             :  add A,R7
co:090d: ff             :  mov R7,A
co:090e: ee             :  mov A,R6
co:090f: 33             :  rlc A
co:0910: fe             :  mov R6,A
co:0911: 12 0f 2c       :  lcall _inttobytes
                        :>        }
co:0914: 05 28          :  inc ?i143+1
co:0916: e5 28          :  mov A,?i143+1
co:0918: 70 02          :  jnz ?_59
co:091a: 05 27          :  inc ?i143
                        : ?_59:
                        : ?95:
                        : 
co:091c: ac 25          :  mov R4,?main_ival
co:091e: ad 26          :  mov R5,?main_ival+1
co:0920: ae 27          :  mov R6,?i143
co:0922: af 28          :  mov R7,?i143+1
co:0924: c3             :  clr C
co:0925: ef             :  mov A,R7
co:0926: 9d             :  subb A,R5
co:0927: ee             :  mov A,R6
co:0928: 64 80          :  xrl A,#128
co:092a: 63 04 80       :  xrl AR4,#128
co:092d: 9c             :  subb A,R4
co:092e: 50 03          :  jnc ?_60
co:0930: 02 08 7a       :  ljmp ?92
                        : ?_60:
                        :>        inttobytes(P2 & 0x3F);         //Send switch position twice
co:0933: af a0          :  mov R7,160
co:0935: 7e 00          :  mov R6,#0
co:0937: 53 07 3f       :  anl AR7,#63
co:093a: 7e 00          :  mov R6,#0
co:093c: 12 0f 2c       :  lcall _inttobytes
                        :>        inttobytes(P2 & 0x3F);    
co:093f: af a0          :  mov R7,160
co:0941: 7e 00          :  mov R6,#0
co:0943: 53 07 3f       :  anl AR7,#63
co:0946: 7e 00          :  mov R6,#0
co:0948: 12 0f 2c       :  lcall _inttobytes
                        :>        putchar(129);                  //Terminate with char(129) <CR><LF>
co:094b: 7f 81          :  mov R7,#129
co:094d: 12 02 4f       :  lcall __putc
                        :>        putchar('\n');
co:0950: 7f 0a          :  mov R7,#10
co:0952: 12 02 4f       :  lcall __putc
                        :>      };
                        : ?87:
                        : 
co:0955: 7e 00          :  mov R6,#((?i104)>>8)&255
co:0957: 7f 36          :  mov R7,#(?i104)&255
co:0959: ab 07          :  mov R3,AR7
co:095b: aa 06          :  mov R2,AR6
co:095d: 78 01          :  mov R0,#COS
co:095f: 7f 20          :  mov R7,#?main_scmd
co:0961: 7c 02          :  mov R4,#NES
co:0963: 12 01 f4       :  lcall _strcmp
co:0966: ee             :  mov A,R6
co:0967: 4f             :  orl A,R7
co:0968: 60 03          :  jz ?_61
co:096a: 02 09 c7       :  ljmp ?102
                        : ?_61:
                        :>
                        :>//Scan N-data points (up to 256) of sine or triangle sweeps, return values V-I data points
                        :>      if (strcmp(scmd,"SWP") == 0 ) {
co:096d: 75 a8 82       :  mov 168,#130
                        :>      IE = 0x82;                       //turn on timer0 interupts to enable continuous wave generation
                        :>      stpsav = 0;                     //turn on ADC read and saving data
co:0970: 90 0a 15       :  mov DPTR,#_stpsav
co:0973: e4             :  clr A
co:0974: f0             :  movx @DPTR,A
co:0975: a3             :  inc DPTR
co:0976: f0             :  movx @DPTR,A
                        :>      j = ramp;                        //find current waveform generator pointer position
co:0977: 90 0a 17       :  mov DPTR,#_ramp
co:097a: 12 00 12       :  lcall __ld_dptr_r45
                        :  ; variable 'j' assigned to register 'RW45'
                        : ?105:
                        :>      while (j == ramp);               //wait for next waveform step 
co:097d: 90 0a 17       :  mov DPTR,#_ramp
co:0980: 12 00 03       :  lcall __ld_dptr_r67
co:0983: ed             :  mov A,R5
co:0984: 6f             :  xrl A,R7
co:0985: 70 04          :  jnz ?_62
co:0987: ec             :  mov A,R4
co:0988: 6e             :  xrl A,R6
co:0989: 60 f2          :  jz ?105
                        : ?_62:
                        : ?108:
                        :>      while (j != ramp);               //wait until waveform loops back to same step
co:098b: 90 0a 17       :  mov DPTR,#_ramp
co:098e: 12 00 03       :  lcall __ld_dptr_r67
co:0991: ed             :  mov A,R5
co:0992: 6f             :  xrl A,R7
co:0993: 70 04          :  jnz ?_63
co:0995: ec             :  mov A,R4
co:0996: 6e             :  xrl A,R6
co:0997: 60 02          :  jz ?_64
                        : ?_63:
co:0999: 80 f0          :  sjmp ?108
                        : ?_64:
                        :>      if (ival > 256) ival = 256;      //limit data points to 256
co:099b: ae 25          :  mov R6,?main_ival
co:099d: af 26          :  mov R7,?main_ival+1
co:099f: d3             :  setb C
co:09a0: ef             :  mov A,R7
co:09a1: 94 00          :  subb A,#0
co:09a3: ee             :  mov A,R6
co:09a4: 64 80          :  xrl A,#128
co:09a6: 94 81          :  subb A,#1 ^ 128
co:09a8: 40 06          :  jc ?111
                        : 
co:09aa: 75 25 01       :  mov ?main_ival,#1
co:09ad: 75 26 00       :  mov ?main_ival+1,#0
                        : ?111:
                        :>      stpsav = 512;                   //turn off adc read and save for print out
co:09b0: 90 0a 15       :  mov DPTR,#_stpsav
co:09b3: 74 02          :  mov A,#2
co:09b5: f0             :  movx @DPTR,A
co:09b6: a3             :  inc DPTR
co:09b7: e4             :  clr A
co:09b8: f0             :  movx @DPTR,A
                        :>      print2(ival);                    //send binary record of voltage and current data 
co:09b9: ae 25          :  mov R6,?main_ival
co:09bb: af 26          :  mov R7,?main_ival+1
co:09bd: 12 0f 7c       :  lcall _print2
                        :>      stpsav = 0;                     //turn on adc read and save
co:09c0: 90 0a 15       :  mov DPTR,#_stpsav
co:09c3: e4             :  clr A
co:09c4: f0             :  movx @DPTR,A
co:09c5: a3             :  inc DPTR
co:09c6: f0             :  movx @DPTR,A
                        :>     };
                        : ?102:
                        : 
co:09c7: 7e 00          :  mov R6,#((?i115)>>8)&255
co:09c9: 7f 32          :  mov R7,#(?i115)&255
co:09cb: ab 07          :  mov R3,AR7
co:09cd: aa 06          :  mov R2,AR6
co:09cf: 78 01          :  mov R0,#COS
co:09d1: 7f 20          :  mov R7,#?main_scmd
co:09d3: 7c 02          :  mov R4,#NES
co:09d5: 12 01 f4       :  lcall _strcmp
co:09d8: ee             :  mov A,R6
co:09d9: 4f             :  orl A,R7
co:09da: 70 0e          :  jnz ?113
                        :>
                        :>//Disable the Continuous Generator but keep aquiring data in continuous loop
                        :>//1 = disable and set DAC to static dacval, 0 = enable and use waveform table
                        :>      if (strcmp(scmd,"DIS") == 0 ) {
co:09dc: ae 25          :  mov R6,?main_ival
co:09de: af 26          :  mov R7,?main_ival+1
co:09e0: 53 07 01       :  anl AR7,#1
co:09e3: 7e 00          :  mov R6,#0
co:09e5: 90 0a 00       :  mov DPTR,#_running
co:09e8: ef             :  mov A,R7
co:09e9: f0             :  movx @DPTR,A
                        :>      running = ival & 0x01;
                        :>      };
                        : ?113:
                        : 
co:09ea: 7e 00          :  mov R6,#((?i118)>>8)&255
co:09ec: 7f 2e          :  mov R7,#(?i118)&255
co:09ee: ab 07          :  mov R3,AR7
co:09f0: aa 06          :  mov R2,AR6
co:09f2: 78 01          :  mov R0,#COS
co:09f4: 7f 20          :  mov R7,#?main_scmd
co:09f6: 7c 02          :  mov R4,#NES
co:09f8: 12 01 f4       :  lcall _strcmp
co:09fb: ee             :  mov A,R6
co:09fc: 4f             :  orl A,R7
co:09fd: 70 15          :  jnz ?116
                        :>
                        :>
                        :>//Enable or Disable timer interupt  0 = off   1 = on
                        :>//With interupts disabled, the waveform generator is stopped and so is ADC data acquisition
                        :>//Turn off interupts to use the ADC in a non synchronous acqusition
                        :>//Commands DA0, MEA and DCM shut down interupts
                        :>//Command SWP turns on interupts
                        :>      if (strcmp(scmd,"INT") == 0 ) {
co:09ff: e5 25          :  mov A,?main_ival
co:0a01: 45 26          :  orl A,?main_ival+1
co:0a03: 70 05          :  jnz ?119
                        :>      if (ival == 0)IE = 0x80; else { IE = 0x82; stpsav = 0;}
co:0a05: 75 a8 80       :  mov 168,#128
co:0a08: 80 0a          :  sjmp ?120
                        : ?119:
                        : 
co:0a0a: 75 a8 82       :  mov 168,#130
                        : 
co:0a0d: 90 0a 15       :  mov DPTR,#_stpsav
co:0a10: e4             :  clr A
co:0a11: f0             :  movx @DPTR,A
co:0a12: a3             :  inc DPTR
co:0a13: f0             :  movx @DPTR,A
                        : 
                        : ?120:
                        :>      };
                        : ?116:
                        : 
co:0a14: 7e 00          :  mov R6,#((?i123)>>8)&255
co:0a16: 7f 2a          :  mov R7,#(?i123)&255
co:0a18: ab 07          :  mov R3,AR7
co:0a1a: aa 06          :  mov R2,AR6
co:0a1c: 78 01          :  mov R0,#COS
co:0a1e: 7f 20          :  mov R7,#?main_scmd
co:0a20: 7c 02          :  mov R4,#NES
co:0a22: 12 01 f4       :  lcall _strcmp
co:0a25: ee             :  mov A,R6
co:0a26: 4f             :  orl A,R7
co:0a27: 70 2a          :  jnz ?121
                        :>
                        :>
                        :>//Reset values to initial conditions
                        :>          if (strcmp(scmd,"RST") == 0 ) {
co:0a29: e4             :  clr A
co:0a2a: f5 84          :  mov 132,A
                        :>                  SFRPAGE   = DAC0_PAGE;
                        :>          DAC0L = 0;               //zero output on both DACs
co:0a2c: e4             :  clr A
co:0a2d: f5 d2          :  mov 210,A
                        :>              DAC0H = 0x08;
co:0a2f: 75 d3 08       :  mov 211,#8
                        :>          SFRPAGE   = DAC1_PAGE;
co:0a32: 75 84 01       :  mov 132,#1
                        :>          DAC1L = 0;
co:0a35: e4             :  clr A
co:0a36: f5 d2          :  mov 210,A
                        :>              DAC1H = 0x08;
co:0a38: 75 d3 08       :  mov 211,#8
                        :>          SFRPAGE   = DAC0_PAGE;
co:0a3b: e4             :  clr A
co:0a3c: f5 84          :  mov 132,A
                        :>          P1 = 0;                  //port-1 outputs to zero
co:0a3e: e4             :  clr A
co:0a3f: f5 90          :  mov 144,A
                        :>                  P2 = 0xFF;               //port-2 set high for input state
co:0a41: 75 a0 ff       :  mov 160,#255
                        :>                  P3 = 0;                  //port-3 outputs to zero
co:0a44: e4             :  clr A
co:0a45: f5 b0          :  mov 176,A
                        :>              gain0 =  0x88;           //ADC gains to unity
co:0a47: 90 0a 02       :  mov DPTR,#_gain0
co:0a4a: 74 88          :  mov A,#136
co:0a4c: f0             :  movx @DPTR,A
                        :>          gain1 =  0x88;
co:0a4d: 90 0a 01       :  mov DPTR,#_gain1
co:0a50: 74 88          :  mov A,#136
co:0a52: f0             :  movx @DPTR,A
                        :>      }  
                        : ?121:
                        :>
                        :>//Set ADC gains for Voltage Measurements function not use and gain is fixed for this application
                        :>//        if (strcmp(scmd,"GN0") == 0 ) gain0 = 0x88 + (7 & ival);
                        :>//        if (strcmp(scmd,"GN1") == 0 ) gain1 = 0x88 + (7 & ival);
                        :>
                        :>//Identify Curve Tracer S/N and Switch Settings and trigger refresh
                        :>      if (strcmp(scmd,"SER") == 0 ){
co:0a53: 7e 00          :  mov R6,#((?i126)>>8)&255
co:0a55: 7f 26          :  mov R7,#(?i126)&255
co:0a57: ab 07          :  mov R3,AR7
co:0a59: aa 06          :  mov R2,AR6
co:0a5b: 78 01          :  mov R0,#COS
co:0a5d: 7f 20          :  mov R7,#?main_scmd
co:0a5f: 7c 02          :  mov R4,#NES
co:0a61: 12 01 f4       :  lcall _strcmp
co:0a64: ee             :  mov A,R6
co:0a65: 4f             :  orl A,R7
co:0a66: 70 12          :  jnz ?124
                        : 
co:0a68: af a0          :  mov R7,160
co:0a6a: 53 07 3f       :  anl AR7,#63
co:0a6d: 12 0f 1c       :  lcall _vkputc
                        :>       vkputc(P2 & 0x3F);  //send switch settings
                        :>       vkputc(BDSN);       //send unit serial number
co:0a70: 7f 01          :  mov R7,#1
co:0a72: 12 0f 1c       :  lcall _vkputc
                        :>       vkputc(131);       //send char(131) to signal end of serial number data
co:0a75: 7f 83          :  mov R7,#131
co:0a77: 12 0f 1c       :  lcall _vkputc
                        :>      }                   //131 will trigger user app to update state of curve tracer, use for testing
                        : ?124:
                        :>
                        :>//Identify Curve Tracer S/N Switch Settings
                        :>      if (strcmp(scmd,"SWS") == 0 ){
co:0a7a: 7e 00          :  mov R6,#((?i129)>>8)&255
co:0a7c: 7f 22          :  mov R7,#(?i129)&255
co:0a7e: ab 07          :  mov R3,AR7
co:0a80: aa 06          :  mov R2,AR6
co:0a82: 78 01          :  mov R0,#COS
co:0a84: 7f 20          :  mov R7,#?main_scmd
co:0a86: 7c 02          :  mov R4,#NES
co:0a88: 12 01 f4       :  lcall _strcmp
co:0a8b: ee             :  mov A,R6
co:0a8c: 4f             :  orl A,R7
co:0a8d: 70 12          :  jnz ?127
                        : 
co:0a8f: af a0          :  mov R7,160
co:0a91: 53 07 3f       :  anl AR7,#63
co:0a94: 12 0f 1c       :  lcall _vkputc
                        :>       vkputc(P2 & 0x3F);  //send switch settings
                        :>       vkputc(BDSN);       //send unit serial number
co:0a97: 7f 01          :  mov R7,#1
co:0a99: 12 0f 1c       :  lcall _vkputc
                        :>       vkputc(132);       //send char(132) to signal end of switch data
co:0a9c: 7f 84          :  mov R7,#132
co:0a9e: 12 0f 1c       :  lcall _vkputc
                        :>      }
                        : ?127:
                        :>
                        :>//Set Custom Wave File
                        :>      if (strcmp(scmd,"SCW") == 0 ){
co:0aa1: 7e 00          :  mov R6,#((?i132)>>8)&255
co:0aa3: 7f 1e          :  mov R7,#(?i132)&255
co:0aa5: ab 07          :  mov R3,AR7
co:0aa7: aa 06          :  mov R2,AR6
co:0aa9: 78 01          :  mov R0,#COS
co:0aab: 7f 20          :  mov R7,#?main_scmd
co:0aad: 7c 02          :  mov R4,#NES
co:0aaf: 12 01 f4       :  lcall _strcmp
co:0ab2: ee             :  mov A,R6
co:0ab3: 4f             :  orl A,R7
co:0ab4: 60 03          :  jz ?_72
co:0ab6: 02 0b 3a       :  ljmp ?130
                        : ?_72:
                        : 
co:0ab9: ae 25          :  mov R6,?main_ival
co:0abb: af 26          :  mov R7,?main_ival+1
co:0abd: bf 00 0a       :  cjne R7,#0,?133
co:0ac0: be 20 07       :  cjne R6,#32,?133
                        :>       if (ival == 8192) wcnt = 0;     //if 8192, then set waveform pointer to start
co:0ac3: 90 0a 03       :  mov DPTR,#_wcnt
co:0ac6: e4             :  clr A
co:0ac7: f0             :  movx @DPTR,A
co:0ac8: a3             :  inc DPTR
co:0ac9: f0             :  movx @DPTR,A
                        : ?133:
                        :>       if (ival < 4096) {              //0 to 4095 is valid data point (zero is at 2048)
co:0aca: 7c 10          :  mov R4,#16
co:0acc: 7d 00          :  mov R5,#0
co:0ace: ae 25          :  mov R6,?main_ival
co:0ad0: af 26          :  mov R7,?main_ival+1
co:0ad2: c3             :  clr C
co:0ad3: ef             :  mov A,R7
co:0ad4: 9d             :  subb A,R5
co:0ad5: ee             :  mov A,R6
co:0ad6: 64 80          :  xrl A,#128
co:0ad8: 63 04 80       :  xrl AR4,#128
co:0adb: 9c             :  subb A,R4
co:0adc: 40 03          :  jc ?_75
co:0ade: 02 0b 3a       :  ljmp ?135
                        : ?_75:
                        : 
co:0ae1: 90 0a 03       :  mov DPTR,#_wcnt
co:0ae4: 12 00 03       :  lcall __ld_dptr_r67
co:0ae7: ee             :  mov A,R6
co:0ae8: 30 e7 07       :  jnb ACC.7,?137
                        :>        if (wcnt < 0) wcnt = 0;        //limit pointer to 256 values
co:0aeb: 90 0a 03       :  mov DPTR,#_wcnt
co:0aee: e4             :  clr A
co:0aef: f0             :  movx @DPTR,A
co:0af0: a3             :  inc DPTR
co:0af1: f0             :  movx @DPTR,A
                        : ?137:
                        :>        if (wcnt > 255) wcnt = 255; 
co:0af2: 90 0a 03       :  mov DPTR,#_wcnt
co:0af5: 12 00 03       :  lcall __ld_dptr_r67
co:0af8: d3             :  setb C
co:0af9: ef             :  mov A,R7
co:0afa: 94 ff          :  subb A,#255
co:0afc: ee             :  mov A,R6
co:0afd: 64 80          :  xrl A,#128
co:0aff: 94 80          :  subb A,#0 ^ 128
co:0b01: 40 09          :  jc ?139
                        : 
co:0b03: 90 0a 03       :  mov DPTR,#_wcnt
co:0b06: e4             :  clr A
co:0b07: f0             :  movx @DPTR,A
co:0b08: a3             :  inc DPTR
co:0b09: 74 ff          :  mov A,#255
co:0b0b: f0             :  movx @DPTR,A
                        : ?139:
                        :>        wav[wcnt++] = ival;            //save data point to waveform array and increment
co:0b0c: 90 0a 03       :  mov DPTR,#_wcnt
co:0b0f: 12 00 12       :  lcall __ld_dptr_r45
co:0b12: 74 01          :  mov A,#1
co:0b14: 2d             :  add A,R5
co:0b15: ff             :  mov R7,A
co:0b16: e4             :  clr A
co:0b17: 3c             :  addc A,R4
co:0b18: fe             :  mov R6,A
co:0b19: 90 0a 03       :  mov DPTR,#_wcnt
co:0b1c: 12 03 3b       :  lcall __st_dptr_r67
co:0b1f: ed             :  mov A,R5
co:0b20: 2d             :  add A,R5
co:0b21: fd             :  mov R5,A
co:0b22: ec             :  mov A,R4
co:0b23: 33             :  rlc A
co:0b24: fc             :  mov R4,A
co:0b25: 7e 00          :  mov R6,#((_wav)>>8)&255
co:0b27: 7f 00          :  mov R7,#(_wav)&255
co:0b29: ef             :  mov A,R7
co:0b2a: 2d             :  add A,R5
co:0b2b: fd             :  mov R5,A
co:0b2c: ee             :  mov A,R6
co:0b2d: 3c             :  addc A,R4
co:0b2e: fc             :  mov R4,A
co:0b2f: ae 25          :  mov R6,?main_ival
co:0b31: af 26          :  mov R7,?main_ival+1
co:0b33: 8c 83          :  mov DPH,R4
co:0b35: 8d 82          :  mov DPL,R5
co:0b37: 12 03 3b       :  lcall __st_dptr_r67
                        :>       }
                        : ?135:
                        :>      }
                        : ?130:
                        :>
                        :>
                        :>   }
                        : ?3:
                        : 
co:0b3a: 02 04 2d       :  ljmp ?2
                        : ; end of function main
                        : ; used: R01234567 BR01234567 DPTR ACC PSW B locals:10 bytes
                        : 
                        :  .export _inttostr ; void inttostr(int)
                        :  .hide
                        :  .show
                        : 
                        :  .segment __inttostr
                        : _inttostr: ; void inttostr(int)
                        :  ; parameter 'iv' in 'RW67' assigned to 'RW23'
                        :  mov R2,AR6
                        :  mov R3,AR7
                        :  ; variable 'c' allocated as 'auto'
                        :>}
                        :>
                        :>//Convert integer to 4-digit string and print it
                        :>void inttostr(int iv) {
                        :  mov R4,#0
                        :  mov R5,#10
                        :  mov R6,AR2
                        :  mov R7,AR3
                        :  lcall __mod_u2
                        :  mov A,#48
                        :  add A,R7
                        :  mov R7,A
                        :  clr A
                        :  addc A,R6
                        :  mov R6,A
                        :  mov ?inttostr_c+3,R7
                        :>   char c[4];
                        :>     c[3] = (iv % 10) + '0';
                        :>         iv = iv / 10;
                        :  mov R4,#0
                        :  mov R5,#10
                        :  mov R6,AR2
                        :  mov R7,AR3
                        :  lcall __div_i2
                        :  ; variable 'iv' assigned to register 'RW23'
                        :  mov R2,AR6
                        :  mov R3,AR7
                        :>         c[2] = (iv % 10) + '0';
                        :  mov R4,#0
                        :  mov R5,#10
                        :  mov R6,AR2
                        :  mov R7,AR3
                        :  lcall __mod_u2
                        :  mov A,#48
                        :  add A,R7
                        :  mov R7,A
                        :  clr A
                        :  addc A,R6
                        :  mov R6,A
                        :  mov ?inttostr_c+2,R7
                        :>         iv = iv / 10;
                        :  mov R4,#0
                        :  mov R5,#10
                        :  mov R6,AR2
                        :  mov R7,AR3
                        :  lcall __div_i2
                        :  ; variable 'iv' assigned to register 'RW23'
                        :  mov R2,AR6
                        :  mov R3,AR7
                        :>         c[1] = (iv % 10) + '0';
                        :  mov R4,#0
                        :  mov R5,#10
                        :  mov R6,AR2
                        :  mov R7,AR3
                        :  lcall __mod_u2
                        :  mov A,#48
                        :  add A,R7
                        :  mov R7,A
                        :  clr A
                        :  addc A,R6
                        :  mov R6,A
                        :  mov ?inttostr_c+1,R7
                        :>         iv = iv / 10;
                        :  mov R4,#0
                        :  mov R5,#10
                        :  mov R6,AR2
                        :  mov R7,AR3
                        :  lcall __div_i2
                        :  ; variable 'iv' assigned to register 'RW67'
                        :>         c[0] = (iv % 10) + '0';
                        :  mov R4,#0
                        :  mov R5,#10
                        :  lcall __mod_u2
                        :  mov A,#48
                        :  add A,R7
                        :  mov R7,A
                        :  clr A
                        :  addc A,R6
                        :  mov R6,A
                        :  mov ?inttostr_c,R7
                        :>         iv = iv / 10;
                        :  mov R7,?inttostr_c
                        :  lcall __putc
                        :>     putchar(c[0]);
                        :>     putchar(c[1]);
                        :  mov R7,?inttostr_c+1
                        :  lcall __putc
                        :>     putchar(c[2]);
                        :  mov R7,?inttostr_c+2
                        :  lcall __putc
                        :>     putchar(c[3]);
                        :  mov R7,?inttostr_c+3
                        :  lcall __putc
                        :  ret
                        : ; end of function inttostr
                        : ; used: R01234567 BR01234567 DPTR ACC PSW B locals:4 bytes
                        : 
                        :  .export _print2 ; void print2(int)
                        :  .hide
                        :  .show
                        : 
                        :  .segment __print2
                        : _print2: ; void print2(int)
                        :  ; parameter 'ir' in 'RW67' moved and assigned to local '?print2_ir'
co:0f7c: 8e 27          :  mov ?print2_ir,R6
co:0f7e: 8f 28          :  mov ?print2_ir+1,R7
                        :  ; variable 'i6' allocated as 'auto'
                        :> } 
                        :>
                        :>//Print N voltage and current, values are 14-bit offset binary shifted into two 7-bit characters
                        :>void print2(int ir) {
co:0f80: e4             :  clr A
co:0f81: f5 29          :  mov ?print2_i6,A
co:0f83: f5 2a          :  mov ?print2_i6+1,A
co:0f85: 80 44          :  sjmp ?153
                        : ?150:
                        :>   int i6;
                        :>   for(i6 = 0; i6 < ir; i6++){   //Loop and repeat for ir data points
co:0f87: ae 29          :  mov R6,?print2_i6
co:0f89: af 2a          :  mov R7,?print2_i6+1
co:0f8b: ef             :  mov A,R7
co:0f8c: 2f             :  add A,R7
co:0f8d: fd             :  mov R5,A
co:0f8e: ee             :  mov A,R6
co:0f8f: 33             :  rlc A
co:0f90: fc             :  mov R4,A
co:0f91: 7e 06          :  mov R6,#((_pv)>>8)&255
co:0f93: 7f 00          :  mov R7,#(_pv)&255
co:0f95: ef             :  mov A,R7
co:0f96: 2d             :  add A,R5
co:0f97: ff             :  mov R7,A
co:0f98: ee             :  mov A,R6
co:0f99: 3c             :  addc A,R4
co:0f9a: fe             :  mov R6,A
co:0f9b: 8e 83          :  mov DPH,R6
co:0f9d: 8f 82          :  mov DPL,R7
co:0f9f: 12 00 03       :  lcall __ld_dptr_r67
co:0fa2: 12 0f 2c       :  lcall _inttobytes
                        :>
                        :>   inttobytes(pv[i6]);          //Convert voltage and print in two byte format 
                        :>   inttobytes(pi[i6]);          //Convert current and print in two byte format 
co:0fa5: ae 29          :  mov R6,?print2_i6
co:0fa7: af 2a          :  mov R7,?print2_i6+1
co:0fa9: ef             :  mov A,R7
co:0faa: 2f             :  add A,R7
co:0fab: fd             :  mov R5,A
co:0fac: ee             :  mov A,R6
co:0fad: 33             :  rlc A
co:0fae: fc             :  mov R4,A
co:0faf: 7e 02          :  mov R6,#((_pi)>>8)&255
co:0fb1: 7f 00          :  mov R7,#(_pi)&255
co:0fb3: ef             :  mov A,R7
co:0fb4: 2d             :  add A,R5
co:0fb5: ff             :  mov R7,A
co:0fb6: ee             :  mov A,R6
co:0fb7: 3c             :  addc A,R4
co:0fb8: fe             :  mov R6,A
co:0fb9: 8e 83          :  mov DPH,R6
co:0fbb: 8f 82          :  mov DPL,R7
co:0fbd: 12 00 03       :  lcall __ld_dptr_r67
co:0fc0: 12 0f 2c       :  lcall _inttobytes
                        :>   } 
co:0fc3: 05 2a          :  inc ?print2_i6+1
co:0fc5: e5 2a          :  mov A,?print2_i6+1
co:0fc7: 70 02          :  jnz ?_78
co:0fc9: 05 29          :  inc ?print2_i6
                        : ?_78:
                        : ?153:
                        : 
co:0fcb: ac 27          :  mov R4,?print2_ir
co:0fcd: ad 28          :  mov R5,?print2_ir+1
co:0fcf: ae 29          :  mov R6,?print2_i6
co:0fd1: af 2a          :  mov R7,?print2_i6+1
co:0fd3: c3             :  clr C
co:0fd4: ef             :  mov A,R7
co:0fd5: 9d             :  subb A,R5
co:0fd6: ee             :  mov A,R6
co:0fd7: 64 80          :  xrl A,#128
co:0fd9: 63 04 80       :  xrl AR4,#128
co:0fdc: 9c             :  subb A,R4
co:0fdd: 50 03          :  jnc ?_79
co:0fdf: 02 0f 87       :  ljmp ?150
                        : ?_79:
                        :>   inttobytes(P2 & 0x3F);      //Send swtich position twice
co:0fe2: af a0          :  mov R7,160
co:0fe4: 7e 00          :  mov R6,#0
co:0fe6: 53 07 3f       :  anl AR7,#63
co:0fe9: 7e 00          :  mov R6,#0
co:0feb: 12 0f 2c       :  lcall _inttobytes
                        :>   inttobytes(P2 & 0x3F); 
co:0fee: af a0          :  mov R7,160
co:0ff0: 7e 00          :  mov R6,#0
co:0ff2: 53 07 3f       :  anl AR7,#63
co:0ff5: 7e 00          :  mov R6,#0
co:0ff7: 12 0f 2c       :  lcall _inttobytes
                        :>   putchar(129);               //terminate with char(129)<CR><LF>
co:0ffa: 7f 81          :  mov R7,#129
co:0ffc: 12 02 4f       :  lcall __putc
                        :>   putchar('\n');
co:0fff: 7f 0a          :  mov R7,#10
co:1001: 12 02 4f       :  lcall __putc
co:1004: 22             :  ret
                        : ; end of function print2
                        : ; used: R01234567 BR01234567 DPTR ACC PSW B locals:4 bytes
                        : 
                        :  .export _inttobytes ; void inttobytes(int)
                        :  .hide
                        :  .show
                        : 
                        :  .segment __inttobytes
                        : _inttobytes: ; void inttobytes(int)
                        :  ; parameter 'iv' in 'RW67' assigned to 'RW23'
co:0f2c: aa 06          :  mov R2,AR6
co:0f2e: ab 07          :  mov R3,AR7
                        :  ; variable 'c' allocated as 'auto'
                        :>}
                        :>
                        :>//Takes 14-bit integer value, convertis it to two 7-bit bytes and sends the data to the serial port
                        :>void inttobytes(int iv) {
co:0f30: 7f 07          :  mov R7,#7
co:0f32: ac 02          :  mov R4,AR2
co:0f34: eb             :  mov A,R3
co:0f35: 8f f0          :  mov B,R7
co:0f37: 05 f0          :  inc B
co:0f39: 80 06          :  sjmp ?_80
                        : ?_81:
co:0f3b: cc             :  xch A,R4
co:0f3c: a2 e7          :  mov C,ACC.7
co:0f3e: 13             :  rrc A
co:0f3f: cc             :  xch A,R4
co:0f40: 13             :  rrc A
                        : ?_80:
co:0f41: d5 f0 f7       :  djnz B,?_81
co:0f44: fd             :  mov R5,A
co:0f45: af 05          :  mov R7,AR5
co:0f47: 8f 2c          :  mov ?inttobytes_c+1,R7
                        :>   char c[2];
                        :>     c[1] = (iv >> 7);
                        :>     c[0] = (iv & 0x7F);
co:0f49: eb             :  mov A,R3
co:0f4a: 54 7f          :  anl A,#127
co:0f4c: fd             :  mov R5,A
co:0f4d: 7c 00          :  mov R4,#0
co:0f4f: af 05          :  mov R7,AR5
co:0f51: 8f 2b          :  mov ?inttobytes_c,R7
                        :>     vkputc(c[1]);
co:0f53: af 2c          :  mov R7,?inttobytes_c+1
co:0f55: 12 0f 1c       :  lcall _vkputc
                        :>     vkputc(c[0]);
co:0f58: af 2b          :  mov R7,?inttobytes_c
co:0f5a: 12 0f 1c       :  lcall _vkputc
co:0f5d: 22             :  ret
                        : ; end of function inttobytes
                        : ; used: R01234567 BR01234567 DPTR ACC PSW B locals:2 bytes
                        : 
                        :  .export _vkputc ; void vkputc(char)
                        :  .segment _vkputc_formal_near, size 0, fill, notext, sclass dram
                        :  .segment _vkputc_local_near, size 0, fill, notext, sclass dram
                        :  .sgraph _vkputc_formal_near, _vkputc_local_near, __vkputc
                        : 
                        :  .segment __vkputc
                        : _vkputc: ; (leaf function) void vkputc(char)
                        :  ; parameter 'cb1' in 'R7'
                        :> } 
                        :>
                        :>//Put character routine that does not corrupt binary data by sending extra control characters
                        :>void vkputc(char cb1){
co:0f1c: c2 ac          :  clr 172
                        :>  ES0 = 0;
                        :>  SBUF0 = cb1;
co:0f1e: 8f 99          :  mov 153,R7
                        : ?156:
                        :> //  while (TI0 == 0);
                        :> while ((SCON0 & 2) == 0); 
co:0f20: ad 98          :  mov R5,152
co:0f22: 53 05 02       :  anl AR5,#2
co:0f25: ed             :  mov A,R5
co:0f26: 60 f8          :  jz ?156
                        :> SCON0 &= 0xFD; 
co:0f28: 53 98 fd       :  anl 152,#253
co:0f2b: 22             :  ret
                        : ; end of function vkputc
                        : ; used: R-----5-7 BR-------- ACC
                        : 
                        :  .export _vkgetc ; char vkgetc(void)
                        :  .hide
                        :  .show
                        : 
                        :  .segment __vkgetc
                        : _vkgetc: ; char vkgetc(void)
                        :> //TI0 = 0;
                        :>}
                        :>
                        :>//Get character routine 
                        :>char vkgetc(void){
co:0f5e: c2 ac          :  clr 172
co:0f60: 80 0c          :  sjmp ?161
                        : ?160:
                        :> char c; 
                        :> ES0 = 0;
                        :>  //while (RI0 == 0);
                        :>  while ((SCON0 & 1) == 0) {
co:0f62: e5 cc          :  mov A,204
co:0f64: 60 08          :  jz ?163
                        :>   if (TMR2L != 0) {
co:0f66: e4             :  clr A
co:0f67: f5 cc          :  mov 204,A
                        :>    TMR2L = 0;
                        :>    vkputc(0x88);
co:0f69: 7f 88          :  mov R7,#136
co:0f6b: 12 0f 1c       :  lcall _vkputc
                        :>   }
                        : ?163:
                        :>  }
                        : ?161:
                        : 
co:0f6e: af 98          :  mov R7,152
co:0f70: 53 07 01       :  anl AR7,#1
co:0f73: ef             :  mov A,R7
co:0f74: 60 ec          :  jz ?160
                        :>  c = SBUF0;
co:0f76: af 99          :  mov R7,153
                        :  ; variable 'c' assigned to register 'R7'
                        :> // RI0 = 0;
                        :> SCON0 &= 0xFE;
co:0f78: 53 98 fe       :  anl 152,#254
co:0f7b: 22             :  ret
                        : ; end of function vkgetc
                        : ; used: R01234567 BR01234567 DPTR ACC PSW B
                        : 
                        :  .export _SYSCLK_Init ; void SYSCLK_Init(void)
                        :  .segment _SYSCLK_Init_formal_near, size 0, fill, notext, sclass dram
                        :  .segment _SYSCLK_Init_local_near, size 0, fill, notext, sclass dram
                        :  .sgraph _SYSCLK_Init_formal_near, _SYSCLK_Init_local_near, __SYSCLK_Init
                        : 
                        :  .segment __SYSCLK_Init
                        : _SYSCLK_Init: ; (leaf function) void SYSCLK_Init(void)
                        :> return(c); 
                        :>}
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// Initialization Subroutines
                        :>//-----------------------------------------------------------------------------
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// SYSCLK_Init
                        :>//-----------------------------------------------------------------------------
                        :>//
                        :>// This routine initializes the system clock to use an 22.1184MHz crystal
                        :>// as its clock source.
                        :>//
                        :>void SYSCLK_Init (void)
                        :>{
co:10c1: ad 84          :  mov R5,132
                        :  ; variable 'SFRPAGE_SAVE' assigned to register 'R5'
                        :>     int i;                              // software timer
                        :>
                        :>   char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
                        :>
                        :>
                        :>
                        :>
                        :>//this section for 88Mhz internal clock
                        :>  //  SFRPAGE   = CONFIG_PAGE;
                        :> //   OSCICN    = 0x83;
                        :> //   CCH0CN    &= ~0x20;
                        :> //   SFRPAGE   = LEGACY_PAGE;
                        :> //   FLSCL     = 0xB0;
                        :> //   SFRPAGE   = CONFIG_PAGE;
                        :>//   CCH0CN    |= 0x20;
                        :>//    PLL0CN    |= 0x01;
                        :>//    PLL0DIV   = 0x05;
                        :>//    PLL0FLT   = 0x01;
                        :>//    PLL0MUL   = 0x12;
                        :>//    for (i = 0; i < 256; i++);  // Wait 5us for initialization
                        :>//    PLL0CN    |= 0x02;
                        :>//    while ((PLL0CN & 0x10) == 0);
                        :>//    CLKSEL    = 0x02;
                        :>
                        :>// this selection uses the external crystal with PLL divide by 2 and multiply by 8 for 88.4736MHz
                        :>    SFRPAGE   = CONFIG_PAGE;
co:10c3: 75 84 0f       :  mov 132,#15
                        :>    OSCXCN    = 0x67;
co:10c6: 75 8c 67       :  mov 140,#103
                        :>    for (i = 0; i < 3000; i++);  // Wait 1ms for initialization
co:10c9: 7e 0c          :  mov R6,#(255+3000)>>8
co:10cb: 7f b8          :  mov R7,#184
                        : ?166:
                        : 
co:10cd: df fe          :  djnz R7,?166
co:10cf: de fc          :  djnz R6,?166
                        : ?171:
                        :>    while ((OSCXCN & 0x80) == 0);
co:10d1: af 8c          :  mov R7,140
co:10d3: 53 07 80       :  anl AR7,#128
co:10d6: ef             :  mov A,R7
co:10d7: 60 f8          :  jz ?171
                        :>    OSCICN    = 0x83;
co:10d9: 75 8a 83       :  mov 138,#131
                        :>    PLL0CN    = 0x04;
co:10dc: 75 89 04       :  mov 137,#4
                        :>    CCH0CN    &= ~0x20;
co:10df: 53 a1 df       :  anl 161,#223
                        :>    SFRPAGE   = LEGACY_PAGE;
co:10e2: e4             :  clr A
co:10e3: f5 84          :  mov 132,A
                        :>    FLSCL     = 0xB0;
co:10e5: 75 b7 b0       :  mov 183,#176
                        :>    SFRPAGE   = CONFIG_PAGE;
co:10e8: 75 84 0f       :  mov 132,#15
                        :>    CCH0CN    |= 0x20;
co:10eb: 43 a1 20       :  orl 161,#32
                        :>    PLL0CN    |= 0x01;
co:10ee: 43 89 01       :  orl 137,#1
                        :>    PLL0DIV   = 0x02;
co:10f1: 75 8d 02       :  mov 141,#2
                        :>    PLL0FLT   = 0x07;
co:10f4: 75 8f 07       :  mov 143,#7
                        :>    PLL0MUL   = 0x08;
co:10f7: 75 8e 08       :  mov 142,#8
                        :>    for (i = 0; i < 256; i++);  // Wait 5us for initialization
co:10fa: 7e 01          :  mov R6,#(255+256)>>8
co:10fc: 7f 00          :  mov R7,#0
                        : ?174:
                        : 
co:10fe: df fe          :  djnz R7,?174
co:1100: de fc          :  djnz R6,?174
                        :>    PLL0CN    |= 0x02;
co:1102: 43 89 02       :  orl 137,#2
                        : ?179:
                        :>    while ((PLL0CN & 0x10) == 0);
co:1105: af 89          :  mov R7,137
co:1107: 53 07 10       :  anl AR7,#16
co:110a: ef             :  mov A,R7
co:110b: 60 f8          :  jz ?179
                        :>    CLKSEL    = 0x02;
co:110d: 75 97 02       :  mov 151,#2
                        :>
                        :>
                        :>   SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
co:1110: 8d 84          :  mov 132,R5
co:1112: 22             :  ret
                        : ; end of function SYSCLK_Init
                        : ; used: R-----567 BR-------- ACC
                        : 
                        :  .export _PORT_Init ; void PORT_Init(void)
                        :  .segment _PORT_Init_formal_near, size 0, fill, notext, sclass dram
                        :  .segment _PORT_Init_local_near, size 0, fill, notext, sclass dram
                        :  .sgraph _PORT_Init_formal_near, _PORT_Init_local_near, __PORT_Init
                        : 
                        :  .segment __PORT_Init
                        : _PORT_Init: ; (leaf function) void PORT_Init(void)
                        :>
                        :>
                        :>}
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// PORT_Init
                        :>//-----------------------------------------------------------------------------
                        :>//
                        :>// Configure the Crossbar and GPIO ports
                        :>//
                        :>void PORT_Init (void)
                        :>{
co:10a5: 75 84 0f       :  mov 132,#15
                        :>   SFRPAGE   = CONFIG_PAGE;
                        :>
                        :>   XBR0    = 0x04;                     // Enable UART0
co:10a8: 75 e1 04       :  mov 225,#4
                        :>   XBR1    = 0x20;                     //enable T2 input
co:10ab: 75 e2 20       :  mov 226,#32
                        :>   XBR2    = 0x40;                     // Enable crossbar and weak pull-ups
co:10ae: 75 e3 40       :  mov 227,#64
                        :>   P0MDOUT = 0x01;                     // P0.0 is TX0 push-pull output
co:10b1: 75 a4 01       :  mov 164,#1
                        :>
                        :>   P1MDOUT = 0xFF;                    // P1 push-pull outputs
co:10b4: 75 a5 ff       :  mov 165,#255
                        :>   P2MDOUT = 0x00;                    // P2 open drain output set to high for input 
co:10b7: e4             :  clr A
co:10b8: f5 a6          :  mov 166,A
                        :>   P3MDOUT = 0xFF;                    // P3 push-pull outputs 
co:10ba: 75 a7 ff       :  mov 167,#255
                        :>
                        :>   SFRPAGE = LEGACY_PAGE;
co:10bd: e4             :  clr A
co:10be: f5 84          :  mov 132,A
co:10c0: 22             :  ret
                        : ; end of function PORT_Init
                        : ; used: R-------- BR-------- ACC
                        : 
                        :  .export _UART0_Init ; void UART0_Init(void)
                        :  .segment _UART0_Init_formal_near, size 0, fill, notext, sclass dram
                        :  .segment _UART0_Init_local_near, size 0, fill, notext, sclass dram
                        :  .sgraph _UART0_Init_formal_near, _UART0_Init_local_near, __UART0_Init
                        : 
                        :  .segment __UART0_Init
                        : _UART0_Init: ; (leaf function) void UART0_Init(void)
                        :>}
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// UART0_Init
                        :>//-----------------------------------------------------------------------------
                        :>//
                        :>// Configure the UART0 using Timer1, for 460800 baud and 8-N-1.
                        :>//
                        :>void UART0_Init (void)
                        :>{
co:0d9a: e4             :  clr A
co:0d9b: f5 84          :  mov 132,A
                        :>   SFRPAGE   = UART0_PAGE;
                        :>   SCON0     = 0x50;
co:0d9d: 75 98 50       :  mov 152,#80
co:0da0: 22             :  ret
                        : ; end of function UART0_Init
                        : ; used: R-------- BR-------- ACC
                        : 
                        :  .export _ADC0_Init ; void ADC0_Init(void)
                        :  .segment _ADC0_Init_formal_near, size 0, fill, notext, sclass dram
                        :  .segment _ADC0_Init_local_near, size 0, fill, notext, sclass dram
                        :  .sgraph _ADC0_Init_formal_near, _ADC0_Init_local_near, __ADC0_Init
                        : 
                        :  .segment __ADC0_Init
                        : _ADC0_Init: ; (leaf function) void ADC0_Init(void)
                        :>
                        :>}
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// ADC0_Init
                        :>//-----------------------------------------------------------------------------
                        :>//
                        :>// Configure ADC0 to use Timer3 overflows as conversion source, to
                        :>// generate an interrupt on conversion complete, and to use left-justified
                        :>// output mode.  Enables ADC end of conversion interrupt. Leaves ADC disabled.
                        :>//
                        :>void ADC0_Init (void)
                        :>{
co:0d7e: e4             :  clr A
co:0d7f: f5 84          :  mov 132,A
                        :>   SFRPAGE   = ADC0_PAGE;
                        :>   ADC0CF    = 0x88;
co:0d81: 75 bc 88       :  mov 188,#136
                        :>   ADC0CN = 0xC0;                      // ADC0 enabled with sample/hold on convert command
co:0d84: 75 e8 c0       :  mov 232,#192
                        :>   REF0CN = 0x03;                      // enable on-chip VREF,
co:0d87: 75 d1 03       :  mov 209,#3
                        :>                                       // enable VREF output buffer
                        :>   AMX0SL = 0x00;                      // Select AIN.0 as ADC mux input
co:0d8a: e4             :  clr A
co:0d8b: f5 bb          :  mov 187,A
                        :>   gain0 = 0x88;                       // Gain = 1, SAR clock = 2.4576MHz 
co:0d8d: 90 0a 02       :  mov DPTR,#_gain0
co:0d90: 74 88          :  mov A,#136
co:0d92: f0             :  movx @DPTR,A
                        :>   gain1 = 0x88;
co:0d93: 90 0a 01       :  mov DPTR,#_gain1
co:0d96: 74 88          :  mov A,#136
co:0d98: f0             :  movx @DPTR,A
co:0d99: 22             :  ret
                        : ; end of function ADC0_Init
                        : ; used: R-------- BR-------- DPTR ACC
                        : 
                        :  .export _Timer0_Init ; void Timer0_Init(void)
                        :  .segment _Timer0_Init_formal_near, size 0, fill, notext, sclass dram
                        :  .segment _Timer0_Init_local_near, size 0, fill, notext, sclass dram
                        :  .sgraph _Timer0_Init_formal_near, _Timer0_Init_local_near, __Timer0_Init
                        : 
                        :  .segment __Timer0_Init
                        : _Timer0_Init: ; (leaf function) void Timer0_Init(void)
                        :>}
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// Timer0_Init
                        :>//-----------------------------------------------------------------------------
                        :>//
                        :>// Configure Timer0 to auto-reload at interval specified by <counts> (no 
                        :>// interrupt generated) using SYSCLK as its time base.
                        :>// Configure Timer2 as counter with P0.2 as clock input. Is used for foot switch detection.
                        :>// UART clock is timer1 
                        :>void Timer0_Init (void)
                        :>{
co:0d56: e4             :  clr A
co:0d57: f5 84          :  mov 132,A
                        :>   SFRPAGE   = TIMER01_PAGE;
                        :>    TCON      = 0x50;         //Timer0 prescale system clock by 48
co:0d59: 75 88 50       :  mov 136,#80
                        :>    TMOD      = 0x22;         //Auto reload in 8-bit timer mode
co:0d5c: 75 89 22       :  mov 137,#34
                        :>    CKCON     = 0x12;         //Timer0 will clear interupt upon servicing call
co:0d5f: 75 8e 12       :  mov 142,#18
                        :>    TL0       = 0x88;         //Set Timer0 count to -120 
co:0d62: 75 8a 88       :  mov 138,#136
                        :>    TH0       = 0x88;         //Timer0 frequency is 15360 when divided by 256 this is 60Hz
co:0d65: 75 8c 88       :  mov 140,#136
                        :>    TH1       = 0xFA;          //Timer1 auto reload value generates 460800 baud clock
co:0d68: 75 8d fa       :  mov 141,#250
                        :>//    TH1       = 0xE8;          //Timer1 auto reload value generates 115200 baud clock
                        :>
                        :>    SFRPAGE   = TMR2_PAGE;
co:0d6b: e4             :  clr A
co:0d6c: f5 84          :  mov 132,A
                        :>    TMR2CN    = 0x06;
co:0d6e: 75 c8 06       :  mov 200,#6
                        :>    SFRPAGE   = TMR3_PAGE;
co:0d71: 75 84 01       :  mov 132,#1
                        :>    TMR3CF    = 0x08;          //Timer3 uses system clock 
co:0d74: 75 c9 08       :  mov 201,#8
                        :>    RCAP3L    = 0xF4;          //Reload values set timer to 460800Hz
co:0d77: 75 ca f4       :  mov 202,#244
                        :>    RCAP3H    = 0xFF;          //Timer3 not used for any function
co:0d7a: 75 cb ff       :  mov 203,#255
co:0d7d: 22             :  ret
                        : ; end of function Timer0_Init
                        : ; used: R-------- BR-------- ACC
                        : 
                        : _irq_vector _irq_TIMER0_ISR ,0xB,_TIMER0_ISR;
                        :   .segment _irq_TIMER0_ISR,org 0xB
co:000b: 02 0b 3d       :   ljmp _TIMER0_ISR
                        :   .hide
                        :  .export _TIMER0_ISR ; void TIMER0_ISR(void) interrupt
                        :  .segment _TIMER0_ISR_formal_near, size 0, fill, notext, sclass dram
                        :  .segment _TIMER0_ISR_local_near, size 0, fill, notext, sclass dram
                        :  .sgraph _TIMER0_ISR_formal_near, _TIMER0_ISR_local_near, __TIMER0_ISR
                        : 
                        :  .segment __TIMER0_ISR
                        : _TIMER0_ISR: ; (leaf function) void TIMER0_ISR(void) interrupt
co:0b3d: c0 04          :  push 4
co:0b3f: c0 05          :  push 5
co:0b41: c0 06          :  push 6
co:0b43: c0 07          :  push 7
co:0b45: c0 f0          :  push B
co:0b47: c0 83          :  push DPH
co:0b49: c0 82          :  push DPL
co:0b4b: c0 e0          :  push ACC
co:0b4d: c0 d0          :  push PSW
co:0b4f: 53 d0 e7       :  anl PSW,#231
                        :>
                        :>}
                        :>
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// Interrupt Service Routines
                        :>//-----------------------------------------------------------------------------
                        :>IRQ_VECTOR(TIMER0_ISR, 0xB);
                        :>void TIMER0_ISR (void) interrupt 
                        :>{
co:0b52: e4             :  clr A
co:0b53: f5 84          :  mov 132,A
                        :>      SFRPAGE   = DAC0_PAGE;
                        :>     // DAC0L = 0;                   //used to test loop timing
                        :>     // DAC0H = 0x08;
                        :>      if (stpsav < 512) {           //if stpsav => 512, don't do ADC acquisition
co:0b55: 7c 02          :  mov R4,#2
co:0b57: 7d 00          :  mov R5,#0
co:0b59: 90 0a 15       :  mov DPTR,#_stpsav
co:0b5c: 12 00 03       :  lcall __ld_dptr_r67
co:0b5f: c3             :  clr C
co:0b60: ef             :  mov A,R7
co:0b61: 9d             :  subb A,R5
co:0b62: ee             :  mov A,R6
co:0b63: 64 80          :  xrl A,#128
co:0b65: 63 04 80       :  xrl AR4,#128
co:0b68: 9c             :  subb A,R4
co:0b69: 40 03          :  jc ?_91
co:0b6b: 02 0c b8       :  ljmp ?187
                        : ?_91:
                        : 
co:0b6e: 90 0a 02       :  mov DPTR,#_gain0
co:0b71: e0             :  movx A,@DPTR
co:0b72: f5 bc          :  mov 188,A
                        :>       //Data acquistion samples voltage, current, voltage, current and averages like values
                        :>       //Voltage 0 read       
                        :>       ADC0CF = gain0;               //Select gain
                        :>       AMX0SL = 0x00;                // Select AIN.0 as ADC mux output
co:0b74: e4             :  clr A
co:0b75: f5 bb          :  mov 187,A
                        :>       AD0INT = 0;                   // ADC0 write - b5 clear interupt
co:0b77: c2 ed          :  clr 237
                        :>       AD0BUSY = 1;                  // ADC0 write - b4 to 1 starts convert
co:0b79: d2 ec          :  setb 236
                        : ?189:
                        :>       while (AD0INT == 0);          // ADC0 read - b5 to 1 end of convert
co:0b7b: 30 ed fd       :  jnb 237,?189
                        :>       data0 = (ADC0H << 8) + ADC0L;
co:0b7e: af bf          :  mov R7,191
co:0b80: ad 07          :  mov R5,AR7
co:0b82: 7c 00          :  mov R4,#0
co:0b84: 7f 08          :  mov R7,#8
co:0b86: ed             :  mov A,R5
co:0b87: 8f f0          :  mov B,R7
co:0b89: 05 f0          :  inc B
co:0b8b: 80 05          :  sjmp ?_93
                        : ?_94:
co:0b8d: c3             :  clr C
co:0b8e: 33             :  rlc A
co:0b8f: cc             :  xch A,R4
co:0b90: 33             :  rlc A
co:0b91: cc             :  xch A,R4
                        : ?_93:
co:0b92: d5 f0 f8       :  djnz B,?_94
co:0b95: fd             :  mov R5,A
co:0b96: af be          :  mov R7,190
co:0b98: 7e 00          :  mov R6,#0
co:0b9a: ef             :  mov A,R7
co:0b9b: 2d             :  add A,R5
co:0b9c: ff             :  mov R7,A
co:0b9d: ee             :  mov A,R6
co:0b9e: 3c             :  addc A,R4
co:0b9f: fe             :  mov R6,A
co:0ba0: 90 0a 0d       :  mov DPTR,#_data0
co:0ba3: 12 03 3b       :  lcall __st_dptr_r67
                        :>       //Voltage 1 read 
                        :>       ADC0CF = gain1;               //Select gain
co:0ba6: 90 0a 01       :  mov DPTR,#_gain1
co:0ba9: e0             :  movx A,@DPTR
co:0baa: f5 bc          :  mov 188,A
                        :>       AMX0SL = 0x01;                // Select AIN.1 as ADC mux output
co:0bac: 75 bb 01       :  mov 187,#1
                        :>       AD0INT = 0;                   // ADC0 write - b5 clear interupt
co:0baf: c2 ed          :  clr 237
                        :>       AD0BUSY = 1;                  // ADC0 write - b4 to 1 starts convert
co:0bb1: d2 ec          :  setb 236
                        : ?192:
                        :>       while (AD0INT == 0);          // ADC0 read - b5 to 1 end of convert
co:0bb3: 30 ed fd       :  jnb 237,?192
                        :>       data1 = (ADC0H << 8) + ADC0L;
co:0bb6: af bf          :  mov R7,191
co:0bb8: ad 07          :  mov R5,AR7
co:0bba: 7c 00          :  mov R4,#0
co:0bbc: 7f 08          :  mov R7,#8
co:0bbe: ed             :  mov A,R5
co:0bbf: 8f f0          :  mov B,R7
co:0bc1: 05 f0          :  inc B
co:0bc3: 80 05          :  sjmp ?_96
                        : ?_97:
co:0bc5: c3             :  clr C
co:0bc6: 33             :  rlc A
co:0bc7: cc             :  xch A,R4
co:0bc8: 33             :  rlc A
co:0bc9: cc             :  xch A,R4
                        : ?_96:
co:0bca: d5 f0 f8       :  djnz B,?_97
co:0bcd: fd             :  mov R5,A
co:0bce: af be          :  mov R7,190
co:0bd0: 7e 00          :  mov R6,#0
co:0bd2: ef             :  mov A,R7
co:0bd3: 2d             :  add A,R5
co:0bd4: ff             :  mov R7,A
co:0bd5: ee             :  mov A,R6
co:0bd6: 3c             :  addc A,R4
co:0bd7: fe             :  mov R6,A
co:0bd8: 90 0a 0b       :  mov DPTR,#_data1
co:0bdb: 12 03 3b       :  lcall __st_dptr_r67
                        :>       //Voltage 0 read       
                        :>       ADC0CF = gain0;               //Select gain
co:0bde: 90 0a 02       :  mov DPTR,#_gain0
co:0be1: e0             :  movx A,@DPTR
co:0be2: f5 bc          :  mov 188,A
                        :>       AMX0SL = 0x00;                // Select AIN.0 as ADC mux output
co:0be4: e4             :  clr A
co:0be5: f5 bb          :  mov 187,A
                        :>       AD0INT = 0;                   // ADC0 write - b5 clear interupt
co:0be7: c2 ed          :  clr 237
                        :>       AD0BUSY = 1;                  // ADC0 write - b4 to 1 starts convert
co:0be9: d2 ec          :  setb 236
                        : ?195:
                        :>       while (AD0INT == 0);          // ADC0 read - b5 to 1 end of convert
co:0beb: 30 ed fd       :  jnb 237,?195
                        :>       data0 = data0 + (ADC0H << 8) + ADC0L;
co:0bee: af bf          :  mov R7,191
co:0bf0: ad 07          :  mov R5,AR7
co:0bf2: 7c 00          :  mov R4,#0
co:0bf4: 7f 08          :  mov R7,#8
co:0bf6: ed             :  mov A,R5
co:0bf7: 8f f0          :  mov B,R7
co:0bf9: 05 f0          :  inc B
co:0bfb: 80 05          :  sjmp ?_99
                        : ?_100:
co:0bfd: c3             :  clr C
co:0bfe: 33             :  rlc A
co:0bff: cc             :  xch A,R4
co:0c00: 33             :  rlc A
co:0c01: cc             :  xch A,R4
                        : ?_99:
co:0c02: d5 f0 f8       :  djnz B,?_100
co:0c05: fd             :  mov R5,A
co:0c06: 90 0a 0d       :  mov DPTR,#_data0
co:0c09: 12 00 03       :  lcall __ld_dptr_r67
co:0c0c: ed             :  mov A,R5
co:0c0d: 2f             :  add A,R7
co:0c0e: fd             :  mov R5,A
co:0c0f: ec             :  mov A,R4
co:0c10: 3e             :  addc A,R6
co:0c11: fc             :  mov R4,A
co:0c12: af be          :  mov R7,190
co:0c14: 7e 00          :  mov R6,#0
co:0c16: ef             :  mov A,R7
co:0c17: 2d             :  add A,R5
co:0c18: ff             :  mov R7,A
co:0c19: ee             :  mov A,R6
co:0c1a: 3c             :  addc A,R4
co:0c1b: fe             :  mov R6,A
co:0c1c: 90 0a 0d       :  mov DPTR,#_data0
co:0c1f: 12 03 3b       :  lcall __st_dptr_r67
                        :>       //Voltage 1 read 
                        :>       ADC0CF = gain1;               //Select gain
co:0c22: 90 0a 01       :  mov DPTR,#_gain1
co:0c25: e0             :  movx A,@DPTR
co:0c26: f5 bc          :  mov 188,A
                        :>       AMX0SL = 0x01;                // Select AIN.1 as ADC mux output
co:0c28: 75 bb 01       :  mov 187,#1
                        :>       AD0INT = 0;                   // ADC0 write - b5 clear interupt
co:0c2b: c2 ed          :  clr 237
                        :>       AD0BUSY = 1;                  // ADC0 write - b4 to 1 starts convert
co:0c2d: d2 ec          :  setb 236
                        : ?198:
                        :>       while (AD0INT == 0);          // ADC0 read - b5 to 1 end of convert
co:0c2f: 30 ed fd       :  jnb 237,?198
                        :>       data1 = data1 + (ADC0H << 8) + ADC0L;
co:0c32: af bf          :  mov R7,191
co:0c34: ad 07          :  mov R5,AR7
co:0c36: 7c 00          :  mov R4,#0
co:0c38: 7f 08          :  mov R7,#8
co:0c3a: ed             :  mov A,R5
co:0c3b: 8f f0          :  mov B,R7
co:0c3d: 05 f0          :  inc B
co:0c3f: 80 05          :  sjmp ?_102
                        : ?_103:
co:0c41: c3             :  clr C
co:0c42: 33             :  rlc A
co:0c43: cc             :  xch A,R4
co:0c44: 33             :  rlc A
co:0c45: cc             :  xch A,R4
                        : ?_102:
co:0c46: d5 f0 f8       :  djnz B,?_103
co:0c49: fd             :  mov R5,A
co:0c4a: 90 0a 0b       :  mov DPTR,#_data1
co:0c4d: 12 00 03       :  lcall __ld_dptr_r67
co:0c50: ed             :  mov A,R5
co:0c51: 2f             :  add A,R7
co:0c52: fd             :  mov R5,A
co:0c53: ec             :  mov A,R4
co:0c54: 3e             :  addc A,R6
co:0c55: fc             :  mov R4,A
co:0c56: af be          :  mov R7,190
co:0c58: 7e 00          :  mov R6,#0
co:0c5a: ef             :  mov A,R7
co:0c5b: 2d             :  add A,R5
co:0c5c: ff             :  mov R7,A
co:0c5d: ee             :  mov A,R6
co:0c5e: 3c             :  addc A,R4
co:0c5f: fe             :  mov R6,A
co:0c60: 90 0a 0b       :  mov DPTR,#_data1
co:0c63: 12 03 3b       :  lcall __st_dptr_r67
                        :>       pv[ramp] = data0 << 1;        //save voltage as 14-bit data
co:0c66: 90 0a 17       :  mov DPTR,#_ramp
co:0c69: 12 00 03       :  lcall __ld_dptr_r67
co:0c6c: ef             :  mov A,R7
co:0c6d: 2f             :  add A,R7
co:0c6e: fd             :  mov R5,A
co:0c6f: ee             :  mov A,R6
co:0c70: 33             :  rlc A
co:0c71: fc             :  mov R4,A
co:0c72: 7e 06          :  mov R6,#((_pv)>>8)&255
co:0c74: 7f 00          :  mov R7,#(_pv)&255
co:0c76: ef             :  mov A,R7
co:0c77: 2d             :  add A,R5
co:0c78: fd             :  mov R5,A
co:0c79: ee             :  mov A,R6
co:0c7a: 3c             :  addc A,R4
co:0c7b: fc             :  mov R4,A
co:0c7c: 90 0a 0d       :  mov DPTR,#_data0
co:0c7f: 12 00 03       :  lcall __ld_dptr_r67
co:0c82: ef             :  mov A,R7
co:0c83: 2f             :  add A,R7
co:0c84: ff             :  mov R7,A
co:0c85: ee             :  mov A,R6
co:0c86: 33             :  rlc A
co:0c87: fe             :  mov R6,A
co:0c88: 8c 83          :  mov DPH,R4
co:0c8a: 8d 82          :  mov DPL,R5
co:0c8c: 12 03 3b       :  lcall __st_dptr_r67
                        :>       pi[ramp] = data1 << 1;        //save current as 14-bit data
co:0c8f: 90 0a 17       :  mov DPTR,#_ramp
co:0c92: 12 00 03       :  lcall __ld_dptr_r67
co:0c95: ef             :  mov A,R7
co:0c96: 2f             :  add A,R7
co:0c97: fd             :  mov R5,A
co:0c98: ee             :  mov A,R6
co:0c99: 33             :  rlc A
co:0c9a: fc             :  mov R4,A
co:0c9b: 7e 02          :  mov R6,#((_pi)>>8)&255
co:0c9d: 7f 00          :  mov R7,#(_pi)&255
co:0c9f: ef             :  mov A,R7
co:0ca0: 2d             :  add A,R5
co:0ca1: fd             :  mov R5,A
co:0ca2: ee             :  mov A,R6
co:0ca3: 3c             :  addc A,R4
co:0ca4: fc             :  mov R4,A
co:0ca5: 90 0a 0b       :  mov DPTR,#_data1
co:0ca8: 12 00 03       :  lcall __ld_dptr_r67
co:0cab: ef             :  mov A,R7
co:0cac: 2f             :  add A,R7
co:0cad: ff             :  mov R7,A
co:0cae: ee             :  mov A,R6
co:0caf: 33             :  rlc A
co:0cb0: fe             :  mov R6,A
co:0cb1: 8c 83          :  mov DPH,R4
co:0cb3: 8d 82          :  mov DPL,R5
co:0cb5: 12 03 3b       :  lcall __st_dptr_r67
                        :>     }
                        : ?187:
                        :>      //Waveform generation
                        :>      //Update Collector DAC0 to look up table value. If running !=0, then set it to dacset fixed valu
                        :>      if ( running == 0) updwn = wav[ramp]; else updwn = dacset;
co:0cb8: 90 0a 00       :  mov DPTR,#_running
co:0cbb: e0             :  movx A,@DPTR
co:0cbc: ff             :  mov R7,A
co:0cbd: 70 25          :  jnz ?201
                        : 
co:0cbf: 90 0a 17       :  mov DPTR,#_ramp
co:0cc2: 12 00 03       :  lcall __ld_dptr_r67
co:0cc5: ef             :  mov A,R7
co:0cc6: 2f             :  add A,R7
co:0cc7: fd             :  mov R5,A
co:0cc8: ee             :  mov A,R6
co:0cc9: 33             :  rlc A
co:0cca: fc             :  mov R4,A
co:0ccb: 7e 00          :  mov R6,#((_wav)>>8)&255
co:0ccd: 7f 00          :  mov R7,#(_wav)&255
co:0ccf: ef             :  mov A,R7
co:0cd0: 2d             :  add A,R5
co:0cd1: ff             :  mov R7,A
co:0cd2: ee             :  mov A,R6
co:0cd3: 3c             :  addc A,R4
co:0cd4: fe             :  mov R6,A
co:0cd5: 8e 83          :  mov DPH,R6
co:0cd7: 8f 82          :  mov DPL,R7
co:0cd9: 12 00 03       :  lcall __ld_dptr_r67
co:0cdc: 90 0a 19       :  mov DPTR,#_updwn
co:0cdf: 12 03 3b       :  lcall __st_dptr_r67
co:0ce2: 80 0c          :  sjmp ?202
                        : ?201:
                        : 
co:0ce4: 90 0a 13       :  mov DPTR,#_dacset
co:0ce7: 12 00 03       :  lcall __ld_dptr_r67
co:0cea: 90 0a 19       :  mov DPTR,#_updwn
co:0ced: 12 03 3b       :  lcall __st_dptr_r67
                        : ?202:
                        :>      DAC0L = updwn & 0xFF;
co:0cf0: 90 0a 19       :  mov DPTR,#_updwn
co:0cf3: 12 00 03       :  lcall __ld_dptr_r67
co:0cf6: 7e 00          :  mov R6,#0
co:0cf8: 8f d2          :  mov 210,R7
                        :>      DAC0H = updwn >> 8;
co:0cfa: 7d 08          :  mov R5,#8
co:0cfc: 90 0a 19       :  mov DPTR,#_updwn
co:0cff: 12 00 03       :  lcall __ld_dptr_r67
co:0d02: ef             :  mov A,R7
co:0d03: 8d f0          :  mov B,R5
co:0d05: 05 f0          :  inc B
co:0d07: 80 06          :  sjmp ?_105
                        : ?_106:
co:0d09: ce             :  xch A,R6
co:0d0a: a2 e7          :  mov C,ACC.7
co:0d0c: 13             :  rrc A
co:0d0d: ce             :  xch A,R6
co:0d0e: 13             :  rrc A
                        : ?_105:
co:0d0f: d5 f0 f7       :  djnz B,?_106
co:0d12: ff             :  mov R7,A
co:0d13: 8f d3          :  mov 211,R7
                        :>      ramp++;                      //point to next waveform value
co:0d15: 90 0a 17       :  mov DPTR,#_ramp
co:0d18: 12 00 03       :  lcall __ld_dptr_r67
co:0d1b: 0f             :  inc R7
co:0d1c: ef             :  mov A,R7
co:0d1d: 70 01          :  jnz ?__1
co:0d1f: 0e             :  inc R6
                        : ?__1:
co:0d20: 90 0a 17       :  mov DPTR,#_ramp
co:0d23: 12 03 3b       :  lcall __st_dptr_r67
                        :>      if (ramp >= 256) ramp = 0;   //waveform is 256 data point loop
co:0d26: 7c 01          :  mov R4,#1
co:0d28: 7d 00          :  mov R5,#0
co:0d2a: 90 0a 17       :  mov DPTR,#_ramp
co:0d2d: 12 00 03       :  lcall __ld_dptr_r67
co:0d30: c3             :  clr C
co:0d31: ef             :  mov A,R7
co:0d32: 9d             :  subb A,R5
co:0d33: ee             :  mov A,R6
co:0d34: 64 80          :  xrl A,#128
co:0d36: 63 04 80       :  xrl AR4,#128
co:0d39: 9c             :  subb A,R4
co:0d3a: 40 07          :  jc ?203
                        : 
co:0d3c: 90 0a 17       :  mov DPTR,#_ramp
co:0d3f: e4             :  clr A
co:0d40: f0             :  movx @DPTR,A
co:0d41: a3             :  inc DPTR
co:0d42: f0             :  movx @DPTR,A
                        : ?203:
co:0d43: d0 d0          :  pop PSW
co:0d45: d0 e0          :  pop ACC
co:0d47: d0 82          :  pop DPL
co:0d49: d0 83          :  pop DPH
co:0d4b: d0 f0          :  pop B
co:0d4d: d0 07          :  pop 7
co:0d4f: d0 06          :  pop 6
co:0d51: d0 05          :  pop 5
co:0d53: d0 04          :  pop 4
co:0d55: 32             :  reti
                        : ; end of function TIMER0_ISR
                        : ; used: R----4567 BR-------- DPTR ACC PSW B
                        : 
                        :  .export _Sine_256 ; void Sine_256(void)
                        :  .segment _Sine_256_formal_near, size 0, fill, notext, sclass dram
                        :  .segment _Sine_256_local_near, size 0, fill, notext, sclass dram
                        :  .sgraph _Sine_256_formal_near, _Sine_256_local_near, __Sine_256
                        : 
                        :  .segment __Sine_256
                        : _Sine_256: ; (leaf function) void Sine_256(void)
                        :>}
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// Sine_256  Generates Sine Wave Look Up Table Using 2-integrator oscillator
                        :>//-----------------------------------------------------------------------------
                        :>void Sine_256 (void)
                        :>{
co:0da1: 90 0a 07       :  mov DPTR,#_jcnt
co:0da4: 74 07          :  mov A,#7
co:0da6: f0             :  movx @DPTR,A
co:0da7: a3             :  inc DPTR
co:0da8: 74 fc          :  mov A,#252
co:0daa: f0             :  movx @DPTR,A
                        :> jcnt = 2044;
                        :> kcnt = 0;
co:0dab: 90 0a 05       :  mov DPTR,#_kcnt
co:0dae: e4             :  clr A
co:0daf: f0             :  movx @DPTR,A
co:0db0: a3             :  inc DPTR
co:0db1: f0             :  movx @DPTR,A
                        :> for (icnt = 0; icnt < 256 ; icnt++) {
co:0db2: 90 0a 09       :  mov DPTR,#_icnt
co:0db5: e4             :  clr A
co:0db6: f0             :  movx @DPTR,A
co:0db7: a3             :  inc DPTR
co:0db8: f0             :  movx @DPTR,A
                        : ?206:
                        : 
co:0db9: 90 0a 09       :  mov DPTR,#_icnt
co:0dbc: 12 00 03       :  lcall __ld_dptr_r67
co:0dbf: ef             :  mov A,R7
co:0dc0: 2f             :  add A,R7
co:0dc1: fd             :  mov R5,A
co:0dc2: ee             :  mov A,R6
co:0dc3: 33             :  rlc A
co:0dc4: fc             :  mov R4,A
co:0dc5: 7e 00          :  mov R6,#((_wav)>>8)&255
co:0dc7: 7f 00          :  mov R7,#(_wav)&255
co:0dc9: ef             :  mov A,R7
co:0dca: 2d             :  add A,R5
co:0dcb: fd             :  mov R5,A
co:0dcc: ee             :  mov A,R6
co:0dcd: 3c             :  addc A,R4
co:0dce: fc             :  mov R4,A
co:0dcf: 90 0a 05       :  mov DPTR,#_kcnt
co:0dd2: 12 00 03       :  lcall __ld_dptr_r67
co:0dd5: e4             :  clr A
co:0dd6: 2f             :  add A,R7
co:0dd7: ff             :  mov R7,A
co:0dd8: 74 08          :  mov A,#8
co:0dda: 3e             :  addc A,R6
co:0ddb: fe             :  mov R6,A
co:0ddc: 8c 83          :  mov DPH,R4
co:0dde: 8d 82          :  mov DPL,R5
co:0de0: 12 03 3b       :  lcall __st_dptr_r67
                        :>  wav[icnt] = kcnt + 2048;
                        :>  jcnt = jcnt + ((kcnt*5)/201);
co:0de3: 7e 00          :  mov R6,#0
co:0de5: 7f 05          :  mov R7,#5
co:0de7: 90 0a 05       :  mov DPTR,#_kcnt
co:0dea: 12 00 12       :  lcall __ld_dptr_r45
co:0ded: 12 02 8e       :  lcall __mul_i2
co:0df0: 7c 00          :  mov R4,#0
co:0df2: 7d c9          :  mov R5,#201
co:0df4: 12 02 64       :  lcall __div_i2
co:0df7: 90 0a 07       :  mov DPTR,#_jcnt
co:0dfa: 12 00 12       :  lcall __ld_dptr_r45
co:0dfd: ef             :  mov A,R7
co:0dfe: 2d             :  add A,R5
co:0dff: ff             :  mov R7,A
co:0e00: ee             :  mov A,R6
co:0e01: 3c             :  addc A,R4
co:0e02: fe             :  mov R6,A
co:0e03: 90 0a 07       :  mov DPTR,#_jcnt
co:0e06: 12 03 3b       :  lcall __st_dptr_r67
                        :>  kcnt = kcnt - ((jcnt*5)/201);
co:0e09: 7e 00          :  mov R6,#0
co:0e0b: 7f 05          :  mov R7,#5
co:0e0d: 90 0a 07       :  mov DPTR,#_jcnt
co:0e10: 12 00 12       :  lcall __ld_dptr_r45
co:0e13: 12 02 8e       :  lcall __mul_i2
co:0e16: 7c 00          :  mov R4,#0
co:0e18: 7d c9          :  mov R5,#201
co:0e1a: 12 02 64       :  lcall __div_i2
co:0e1d: 90 0a 05       :  mov DPTR,#_kcnt
co:0e20: 12 00 12       :  lcall __ld_dptr_r45
co:0e23: c3             :  clr C
co:0e24: ed             :  mov A,R5
co:0e25: 9f             :  subb A,R7
co:0e26: ff             :  mov R7,A
co:0e27: ec             :  mov A,R4
co:0e28: 9e             :  subb A,R6
co:0e29: fe             :  mov R6,A
co:0e2a: 90 0a 05       :  mov DPTR,#_kcnt
co:0e2d: 12 03 3b       :  lcall __st_dptr_r67
                        :>}
co:0e30: 90 0a 09       :  mov DPTR,#_icnt
co:0e33: 12 00 03       :  lcall __ld_dptr_r67
co:0e36: 0f             :  inc R7
co:0e37: ef             :  mov A,R7
co:0e38: 70 01          :  jnz ?__2
co:0e3a: 0e             :  inc R6
                        : ?__2:
co:0e3b: 90 0a 09       :  mov DPTR,#_icnt
co:0e3e: 12 03 3b       :  lcall __st_dptr_r67
                        : 
co:0e41: 7c 01          :  mov R4,#1
co:0e43: 7d 00          :  mov R5,#0
co:0e45: 90 0a 09       :  mov DPTR,#_icnt
co:0e48: 12 00 03       :  lcall __ld_dptr_r67
co:0e4b: c3             :  clr C
co:0e4c: ef             :  mov A,R7
co:0e4d: 9d             :  subb A,R5
co:0e4e: ee             :  mov A,R6
co:0e4f: 64 80          :  xrl A,#128
co:0e51: 63 04 80       :  xrl AR4,#128
co:0e54: 9c             :  subb A,R4
co:0e55: 50 03          :  jnc ?_108
co:0e57: 02 0d b9       :  ljmp ?206
                        : ?_108:
co:0e5a: 22             :  ret
                        : ; end of function Sine_256
                        : ; used: R----4567 BR-------- DPTR ACC PSW B
                        : 
                        :  .export _Triag_256 ; void Triag_256(void)
                        :  .segment _Triag_256_formal_near, size 0, fill, notext, sclass dram
                        :  .segment _Triag_256_local_near, size 0, fill, notext, sclass dram
                        :  .sgraph _Triag_256_formal_near, _Triag_256_local_near, __Triag_256
                        : 
                        :  .segment __Triag_256
                        : _Triag_256: ; (leaf function) void Triag_256(void)
                        :>}
                        :>
                        :>
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// Triag_256 Generates Triangle Wave Look Up Table using linear step values
                        :>//-----------------------------------------------------------------------------
                        :>void Triag_256 (void)
                        :>{
co:0e5b: 90 0a 07       :  mov DPTR,#_jcnt
co:0e5e: 74 08          :  mov A,#8
co:0e60: f0             :  movx @DPTR,A
co:0e61: a3             :  inc DPTR
co:0e62: e4             :  clr A
co:0e63: f0             :  movx @DPTR,A
                        :> jcnt = 2048;
                        :> kcnt = -32;
co:0e64: 90 0a 05       :  mov DPTR,#_kcnt
co:0e67: 74 ff          :  mov A,#255
co:0e69: f0             :  movx @DPTR,A
co:0e6a: a3             :  inc DPTR
co:0e6b: 74 e0          :  mov A,#224
co:0e6d: f0             :  movx @DPTR,A
                        :> for (icnt = 0; icnt < 256 ; icnt++) {
co:0e6e: 90 0a 09       :  mov DPTR,#_icnt
co:0e71: e4             :  clr A
co:0e72: f0             :  movx @DPTR,A
co:0e73: a3             :  inc DPTR
co:0e74: f0             :  movx @DPTR,A
                        : ?211:
                        : 
co:0e75: 90 0a 09       :  mov DPTR,#_icnt
co:0e78: 12 00 03       :  lcall __ld_dptr_r67
co:0e7b: ef             :  mov A,R7
co:0e7c: 2f             :  add A,R7
co:0e7d: fd             :  mov R5,A
co:0e7e: ee             :  mov A,R6
co:0e7f: 33             :  rlc A
co:0e80: fc             :  mov R4,A
co:0e81: 7e 00          :  mov R6,#((_wav)>>8)&255
co:0e83: 7f 00          :  mov R7,#(_wav)&255
co:0e85: ef             :  mov A,R7
co:0e86: 2d             :  add A,R5
co:0e87: fd             :  mov R5,A
co:0e88: ee             :  mov A,R6
co:0e89: 3c             :  addc A,R4
co:0e8a: fc             :  mov R4,A
co:0e8b: 90 0a 07       :  mov DPTR,#_jcnt
co:0e8e: 12 00 03       :  lcall __ld_dptr_r67
co:0e91: 8c 83          :  mov DPH,R4
co:0e93: 8d 82          :  mov DPL,R5
co:0e95: 12 03 3b       :  lcall __st_dptr_r67
                        :>  wav[icnt] = jcnt;
                        :>  jcnt = jcnt + kcnt;
co:0e98: 90 0a 05       :  mov DPTR,#_kcnt
co:0e9b: 12 00 12       :  lcall __ld_dptr_r45
co:0e9e: 90 0a 07       :  mov DPTR,#_jcnt
co:0ea1: 12 00 03       :  lcall __ld_dptr_r67
co:0ea4: ed             :  mov A,R5
co:0ea5: 2f             :  add A,R7
co:0ea6: ff             :  mov R7,A
co:0ea7: ec             :  mov A,R4
co:0ea8: 3e             :  addc A,R6
co:0ea9: fe             :  mov R6,A
co:0eaa: 90 0a 07       :  mov DPTR,#_jcnt
co:0ead: 12 03 3b       :  lcall __st_dptr_r67
                        :>  if (jcnt < 0) { jcnt = 32; kcnt = 32;}
co:0eb0: 90 0a 07       :  mov DPTR,#_jcnt
co:0eb3: 12 00 03       :  lcall __ld_dptr_r67
co:0eb6: ee             :  mov A,R6
co:0eb7: 30 e7 12       :  jnb ACC.7,?215
                        : 
co:0eba: 90 0a 07       :  mov DPTR,#_jcnt
co:0ebd: e4             :  clr A
co:0ebe: f0             :  movx @DPTR,A
co:0ebf: a3             :  inc DPTR
co:0ec0: 74 20          :  mov A,#32
co:0ec2: f0             :  movx @DPTR,A
                        : 
co:0ec3: 90 0a 05       :  mov DPTR,#_kcnt
co:0ec6: e4             :  clr A
co:0ec7: f0             :  movx @DPTR,A
co:0ec8: a3             :  inc DPTR
co:0ec9: 74 20          :  mov A,#32
co:0ecb: f0             :  movx @DPTR,A
                        : 
                        : ?215:
                        :>  if (jcnt > 4064) { jcnt = 4095; kcnt = -32;}
co:0ecc: 90 0a 07       :  mov DPTR,#_jcnt
co:0ecf: 12 00 03       :  lcall __ld_dptr_r67
co:0ed2: d3             :  setb C
co:0ed3: ef             :  mov A,R7
co:0ed4: 94 e0          :  subb A,#224
co:0ed6: ee             :  mov A,R6
co:0ed7: 64 80          :  xrl A,#128
co:0ed9: 94 8f          :  subb A,#15 ^ 128
co:0edb: 40 14          :  jc ?217
                        : 
co:0edd: 90 0a 07       :  mov DPTR,#_jcnt
co:0ee0: 74 0f          :  mov A,#15
co:0ee2: f0             :  movx @DPTR,A
co:0ee3: a3             :  inc DPTR
co:0ee4: 74 ff          :  mov A,#255
co:0ee6: f0             :  movx @DPTR,A
                        : 
co:0ee7: 90 0a 05       :  mov DPTR,#_kcnt
co:0eea: 74 ff          :  mov A,#255
co:0eec: f0             :  movx @DPTR,A
co:0eed: a3             :  inc DPTR
co:0eee: 74 e0          :  mov A,#224
co:0ef0: f0             :  movx @DPTR,A
                        : 
                        : ?217:
                        :> }
co:0ef1: 90 0a 09       :  mov DPTR,#_icnt
co:0ef4: 12 00 03       :  lcall __ld_dptr_r67
co:0ef7: 0f             :  inc R7
co:0ef8: ef             :  mov A,R7
co:0ef9: 70 01          :  jnz ?__3
co:0efb: 0e             :  inc R6
                        : ?__3:
co:0efc: 90 0a 09       :  mov DPTR,#_icnt
co:0eff: 12 03 3b       :  lcall __st_dptr_r67
                        : 
co:0f02: 7c 01          :  mov R4,#1
co:0f04: 7d 00          :  mov R5,#0
co:0f06: 90 0a 09       :  mov DPTR,#_icnt
co:0f09: 12 00 03       :  lcall __ld_dptr_r67
co:0f0c: c3             :  clr C
co:0f0d: ef             :  mov A,R7
co:0f0e: 9d             :  subb A,R5
co:0f0f: ee             :  mov A,R6
co:0f10: 64 80          :  xrl A,#128
co:0f12: 63 04 80       :  xrl AR4,#128
co:0f15: 9c             :  subb A,R4
co:0f16: 50 03          :  jnc ?_111
co:0f18: 02 0e 75       :  ljmp ?211
                        : ?_111:
co:0f1b: 22             :  ret
                        : ; end of function Triag_256
                        : ; used: R----4567 BR-------- DPTR ACC PSW
                        : 
                        :  .export _Square_256 ; void Square_256(void)
                        :  .segment _Square_256_formal_near, size 0, fill, notext, sclass dram
                        :  .segment _Square_256_local_near, size 0, fill, notext, sclass dram
                        :  .sgraph _Square_256_formal_near, _Square_256_local_near, __Square_256
                        : 
                        :  .segment __Square_256
                        : _Square_256: ; (leaf function) void Square_256(void)
                        :>}
                        :>
                        :>
                        :>//---------------------------------------------------------------------------------
                        :>// Square_256 Generates Square Wave Look Up Table using mid value transistion point 
                        :>//---------------------------------------------------------------------------------
                        :>void Square_256 (void)
                        :>{
co:1005: 90 0a 09       :  mov DPTR,#_icnt
co:1008: e4             :  clr A
co:1009: f0             :  movx @DPTR,A
co:100a: a3             :  inc DPTR
co:100b: f0             :  movx @DPTR,A
                        : ?220:
                        :> for (icnt = 0; icnt < 128 ; icnt++) {
co:100c: 90 0a 09       :  mov DPTR,#_icnt
co:100f: 12 00 03       :  lcall __ld_dptr_r67
co:1012: ef             :  mov A,R7
co:1013: 2f             :  add A,R7
co:1014: fd             :  mov R5,A
co:1015: ee             :  mov A,R6
co:1016: 33             :  rlc A
co:1017: fc             :  mov R4,A
co:1018: 7e 00          :  mov R6,#((_wav)>>8)&255
co:101a: 7f 00          :  mov R7,#(_wav)&255
co:101c: ef             :  mov A,R7
co:101d: 2d             :  add A,R5
co:101e: fd             :  mov R5,A
co:101f: ee             :  mov A,R6
co:1020: 3c             :  addc A,R4
co:1021: fc             :  mov R4,A
co:1022: e4             :  clr A
co:1023: fe             :  mov R6,A
co:1024: ff             :  mov R7,A
co:1025: 8c 83          :  mov DPH,R4
co:1027: 8d 82          :  mov DPL,R5
co:1029: 12 03 3b       :  lcall __st_dptr_r67
                        :>  wav[icnt] = 0;
                        :> }
co:102c: 90 0a 09       :  mov DPTR,#_icnt
co:102f: 12 00 03       :  lcall __ld_dptr_r67
co:1032: 0f             :  inc R7
co:1033: ef             :  mov A,R7
co:1034: 70 01          :  jnz ?__4
co:1036: 0e             :  inc R6
                        : ?__4:
co:1037: 90 0a 09       :  mov DPTR,#_icnt
co:103a: 12 03 3b       :  lcall __st_dptr_r67
                        : 
co:103d: 7c 00          :  mov R4,#0
co:103f: 7d 80          :  mov R5,#128
co:1041: 90 0a 09       :  mov DPTR,#_icnt
co:1044: 12 00 03       :  lcall __ld_dptr_r67
co:1047: c3             :  clr C
co:1048: ef             :  mov A,R7
co:1049: 9d             :  subb A,R5
co:104a: ee             :  mov A,R6
co:104b: 64 80          :  xrl A,#128
co:104d: 63 04 80       :  xrl AR4,#128
co:1050: 9c             :  subb A,R4
co:1051: 40 b9          :  jc ?220
                        :> for (icnt = 128; icnt < 256 ; icnt++) {
co:1053: 90 0a 09       :  mov DPTR,#_icnt
co:1056: e4             :  clr A
co:1057: f0             :  movx @DPTR,A
co:1058: a3             :  inc DPTR
co:1059: 74 80          :  mov A,#128
co:105b: f0             :  movx @DPTR,A
                        : ?224:
                        : 
co:105c: 90 0a 09       :  mov DPTR,#_icnt
co:105f: 12 00 03       :  lcall __ld_dptr_r67
co:1062: ef             :  mov A,R7
co:1063: 2f             :  add A,R7
co:1064: fd             :  mov R5,A
co:1065: ee             :  mov A,R6
co:1066: 33             :  rlc A
co:1067: fc             :  mov R4,A
co:1068: 7e 00          :  mov R6,#((_wav)>>8)&255
co:106a: 7f 00          :  mov R7,#(_wav)&255
co:106c: ef             :  mov A,R7
co:106d: 2d             :  add A,R5
co:106e: fd             :  mov R5,A
co:106f: ee             :  mov A,R6
co:1070: 3c             :  addc A,R4
co:1071: fc             :  mov R4,A
co:1072: 7e 0f          :  mov R6,#15
co:1074: 7f ff          :  mov R7,#255
co:1076: 8c 83          :  mov DPH,R4
co:1078: 8d 82          :  mov DPL,R5
co:107a: 12 03 3b       :  lcall __st_dptr_r67
                        :>  wav[icnt] = 4095;
                        :> }
co:107d: 90 0a 09       :  mov DPTR,#_icnt
co:1080: 12 00 03       :  lcall __ld_dptr_r67
co:1083: 0f             :  inc R7
co:1084: ef             :  mov A,R7
co:1085: 70 01          :  jnz ?__5
co:1087: 0e             :  inc R6
                        : ?__5:
co:1088: 90 0a 09       :  mov DPTR,#_icnt
co:108b: 12 03 3b       :  lcall __st_dptr_r67
                        : 
co:108e: 7c 01          :  mov R4,#1
co:1090: 7d 00          :  mov R5,#0
co:1092: 90 0a 09       :  mov DPTR,#_icnt
co:1095: 12 00 03       :  lcall __ld_dptr_r67
co:1098: c3             :  clr C
co:1099: ef             :  mov A,R7
co:109a: 9d             :  subb A,R5
co:109b: ee             :  mov A,R6
co:109c: 64 80          :  xrl A,#128
co:109e: 63 04 80       :  xrl AR4,#128
co:10a1: 9c             :  subb A,R4
co:10a2: 40 b8          :  jc ?224
co:10a4: 22             :  ret
                        : ; end of function Square_256
                        : ; used: R----4567 BR-------- DPTR ACC PSW
                        : 
                        :  .export _PSine_256 ; void PSine_256(void)
                        :  .hide
                        :  .show
                        : 
                        :  .segment __PSine_256
                        : _PSine_256: ; void PSine_256(void)
                        :>}
                        :>
                        :>//-----------------------------------------------------------------------------
                        :>// PSine_256  Generates rectified Sine Wave Look Up Table from Sine Wave
                        :>//-----------------------------------------------------------------------------
                        :>//
                        :>void PSine_256 (void)
                        :>{
co:11f1: 12 0d a1       :  lcall _Sine_256
                        :> Sine_256();
                        :> for (icnt = 0; icnt < 128 ; icnt++) {
co:11f4: 90 0a 09       :  mov DPTR,#_icnt
co:11f7: e4             :  clr A
co:11f8: f0             :  movx @DPTR,A
co:11f9: a3             :  inc DPTR
co:11fa: f0             :  movx @DPTR,A
                        : ?229:
                        : 
co:11fb: 90 0a 09       :  mov DPTR,#_icnt
co:11fe: 12 00 03       :  lcall __ld_dptr_r67
co:1201: ef             :  mov A,R7
co:1202: 2f             :  add A,R7
co:1203: fd             :  mov R5,A
co:1204: ee             :  mov A,R6
co:1205: 33             :  rlc A
co:1206: fc             :  mov R4,A
co:1207: 7e 00          :  mov R6,#((_wav)>>8)&255
co:1209: 7f 00          :  mov R7,#(_wav)&255
co:120b: ef             :  mov A,R7
co:120c: 2d             :  add A,R5
co:120d: ff             :  mov R7,A
co:120e: ee             :  mov A,R6
co:120f: 3c             :  addc A,R4
co:1210: fe             :  mov R6,A
co:1211: 8e 83          :  mov DPH,R6
co:1213: 8f 82          :  mov DPL,R7
co:1215: 12 00 18       :  lcall __ld_dptr_r23
co:1218: 90 0a 09       :  mov DPTR,#_icnt
co:121b: 12 00 03       :  lcall __ld_dptr_r67
co:121e: ef             :  mov A,R7
co:121f: 2f             :  add A,R7
co:1220: fd             :  mov R5,A
co:1221: ee             :  mov A,R6
co:1222: 33             :  rlc A
co:1223: fc             :  mov R4,A
co:1224: 7e 01          :  mov R6,#((_wav+256)>>8)&255
co:1226: 7f 00          :  mov R7,#(_wav+256)&255
co:1228: ef             :  mov A,R7
co:1229: 2d             :  add A,R5
co:122a: ff             :  mov R7,A
co:122b: ee             :  mov A,R6
co:122c: 3c             :  addc A,R4
co:122d: fe             :  mov R6,A
co:122e: 8e 83          :  mov DPH,R6
co:1230: 8f 82          :  mov DPL,R7
co:1232: 12 01 15       :  lcall __st_dptr_r23
                        :>  wav[icnt+128] = wav[icnt];
                        :>}
co:1235: 90 0a 09       :  mov DPTR,#_icnt
co:1238: 12 00 03       :  lcall __ld_dptr_r67
co:123b: 0f             :  inc R7
co:123c: ef             :  mov A,R7
co:123d: 70 01          :  jnz ?__6
co:123f: 0e             :  inc R6
                        : ?__6:
co:1240: 90 0a 09       :  mov DPTR,#_icnt
co:1243: 12 03 3b       :  lcall __st_dptr_r67
                        : 
co:1246: 7c 00          :  mov R4,#0
co:1248: 7d 80          :  mov R5,#128
co:124a: 90 0a 09       :  mov DPTR,#_icnt
co:124d: 12 00 03       :  lcall __ld_dptr_r67
co:1250: c3             :  clr C
co:1251: ef             :  mov A,R7
co:1252: 9d             :  subb A,R5
co:1253: ee             :  mov A,R6
co:1254: 64 80          :  xrl A,#128
co:1256: 63 04 80       :  xrl AR4,#128
co:1259: 9c             :  subb A,R4
co:125a: 50 03          :  jnc ?_114
co:125c: 02 11 fb       :  ljmp ?229
                        : ?_114:
co:125f: 22             :  ret
                        : ; end of function PSine_256
                        : ; used: R01234567 BR01234567 DPTR ACC PSW B
                        : 
                        :  .export _NSine_256 ; void NSine_256(void)
                        :  .hide
                        :  .show
                        : 
                        :  .segment __NSine_256
                        : _NSine_256: ; void NSine_256(void)
                        :>}
                        :>
                        :>//------------------------------------------------------------------------------
                        :>// NSine_256 Generates negative rectified Sine Wave Look Up Table from Sine Wave
                        :>//------------------------------------------------------------------------------
                        :>//
                        :>void NSine_256 (void)
                        :>{
co:1182: 12 0d a1       :  lcall _Sine_256
                        :> Sine_256();
                        :> for (icnt = 0; icnt < 128 ; icnt++) {
co:1185: 90 0a 09       :  mov DPTR,#_icnt
co:1188: e4             :  clr A
co:1189: f0             :  movx @DPTR,A
co:118a: a3             :  inc DPTR
co:118b: f0             :  movx @DPTR,A
                        : ?234:
                        : 
co:118c: 90 0a 09       :  mov DPTR,#_icnt
co:118f: 12 00 03       :  lcall __ld_dptr_r67
co:1192: ef             :  mov A,R7
co:1193: 2f             :  add A,R7
co:1194: fd             :  mov R5,A
co:1195: ee             :  mov A,R6
co:1196: 33             :  rlc A
co:1197: fc             :  mov R4,A
co:1198: 7e 01          :  mov R6,#((_wav+256)>>8)&255
co:119a: 7f 00          :  mov R7,#(_wav+256)&255
co:119c: ef             :  mov A,R7
co:119d: 2d             :  add A,R5
co:119e: ff             :  mov R7,A
co:119f: ee             :  mov A,R6
co:11a0: 3c             :  addc A,R4
co:11a1: fe             :  mov R6,A
co:11a2: 8e 83          :  mov DPH,R6
co:11a4: 8f 82          :  mov DPL,R7
co:11a6: 12 00 18       :  lcall __ld_dptr_r23
co:11a9: 90 0a 09       :  mov DPTR,#_icnt
co:11ac: 12 00 03       :  lcall __ld_dptr_r67
co:11af: ef             :  mov A,R7
co:11b0: 2f             :  add A,R7
co:11b1: fd             :  mov R5,A
co:11b2: ee             :  mov A,R6
co:11b3: 33             :  rlc A
co:11b4: fc             :  mov R4,A
co:11b5: 7e 00          :  mov R6,#((_wav)>>8)&255
co:11b7: 7f 00          :  mov R7,#(_wav)&255
co:11b9: ef             :  mov A,R7
co:11ba: 2d             :  add A,R5
co:11bb: ff             :  mov R7,A
co:11bc: ee             :  mov A,R6
co:11bd: 3c             :  addc A,R4
co:11be: fe             :  mov R6,A
co:11bf: 8e 83          :  mov DPH,R6
co:11c1: 8f 82          :  mov DPL,R7
co:11c3: 12 01 15       :  lcall __st_dptr_r23
                        :>  wav[icnt] = wav[icnt+128];
                        :>}
co:11c6: 90 0a 09       :  mov DPTR,#_icnt
co:11c9: 12 00 03       :  lcall __ld_dptr_r67
co:11cc: 0f             :  inc R7
co:11cd: ef             :  mov A,R7
co:11ce: 70 01          :  jnz ?__7
co:11d0: 0e             :  inc R6
                        : ?__7:
co:11d1: 90 0a 09       :  mov DPTR,#_icnt
co:11d4: 12 03 3b       :  lcall __st_dptr_r67
                        : 
co:11d7: 7c 00          :  mov R4,#0
co:11d9: 7d 80          :  mov R5,#128
co:11db: 90 0a 09       :  mov DPTR,#_icnt
co:11de: 12 00 03       :  lcall __ld_dptr_r67
co:11e1: c3             :  clr C
co:11e2: ef             :  mov A,R7
co:11e3: 9d             :  subb A,R5
co:11e4: ee             :  mov A,R6
co:11e5: 64 80          :  xrl A,#128
co:11e7: 63 04 80       :  xrl AR4,#128
co:11ea: 9c             :  subb A,R4
co:11eb: 50 03          :  jnc ?_115
co:11ed: 02 11 8c       :  ljmp ?234
                        : ?_115:
co:11f0: 22             :  ret
                        : ; end of function NSine_256
                        : ; used: R01234567 BR01234567 DPTR ACC PSW B
                        : 
                        :  .export _PTriag_256 ; void PTriag_256(void)
                        :  .hide
                        :  .show
                        : 
                        :  .segment __PTriag_256
                        : _PTriag_256: ; void PTriag_256(void)
                        :>}
                        :>
                        :>//------------------------------------------------------------------------------------
                        :>// PSine_Init  Generates Positive Triangle Wave Look Up Table using linear step values
                        :>//------------------------------------------------------------------------------------
                        :>//
                        :>void PTriag_256 (void)
                        :>{
co:1113: 12 0e 5b       :  lcall _Triag_256
                        :> Triag_256();
                        :> for (icnt = 0; icnt < 128 ; icnt++) {
co:1116: 90 0a 09       :  mov DPTR,#_icnt
co:1119: e4             :  clr A
co:111a: f0             :  movx @DPTR,A
co:111b: a3             :  inc DPTR
co:111c: f0             :  movx @DPTR,A
                        : ?239:
                        : 
co:111d: 90 0a 09       :  mov DPTR,#_icnt
co:1120: 12 00 03       :  lcall __ld_dptr_r67
co:1123: ef             :  mov A,R7
co:1124: 2f             :  add A,R7
co:1125: fd             :  mov R5,A
co:1126: ee             :  mov A,R6
co:1127: 33             :  rlc A
co:1128: fc             :  mov R4,A
co:1129: 7e 00          :  mov R6,#((_wav)>>8)&255
co:112b: 7f 00          :  mov R7,#(_wav)&255
co:112d: ef             :  mov A,R7
co:112e: 2d             :  add A,R5
co:112f: ff             :  mov R7,A
co:1130: ee             :  mov A,R6
co:1131: 3c             :  addc A,R4
co:1132: fe             :  mov R6,A
co:1133: 8e 83          :  mov DPH,R6
co:1135: 8f 82          :  mov DPL,R7
co:1137: 12 00 18       :  lcall __ld_dptr_r23
co:113a: 90 0a 09       :  mov DPTR,#_icnt
co:113d: 12 00 03       :  lcall __ld_dptr_r67
co:1140: ef             :  mov A,R7
co:1141: 2f             :  add A,R7
co:1142: fd             :  mov R5,A
co:1143: ee             :  mov A,R6
co:1144: 33             :  rlc A
co:1145: fc             :  mov R4,A
co:1146: 7e 01          :  mov R6,#((_wav+256)>>8)&255
co:1148: 7f 00          :  mov R7,#(_wav+256)&255
co:114a: ef             :  mov A,R7
co:114b: 2d             :  add A,R5
co:114c: ff             :  mov R7,A
co:114d: ee             :  mov A,R6
co:114e: 3c             :  addc A,R4
co:114f: fe             :  mov R6,A
co:1150: 8e 83          :  mov DPH,R6
co:1152: 8f 82          :  mov DPL,R7
co:1154: 12 01 15       :  lcall __st_dptr_r23
                        :>  wav[icnt+128] = wav[icnt];
                        :>}
co:1157: 90 0a 09       :  mov DPTR,#_icnt
co:115a: 12 00 03       :  lcall __ld_dptr_r67
co:115d: 0f             :  inc R7
co:115e: ef             :  mov A,R7
co:115f: 70 01          :  jnz ?__8
co:1161: 0e             :  inc R6
                        : ?__8:
co:1162: 90 0a 09       :  mov DPTR,#_icnt
co:1165: 12 03 3b       :  lcall __st_dptr_r67
                        : 
co:1168: 7c 00          :  mov R4,#0
co:116a: 7d 80          :  mov R5,#128
co:116c: 90 0a 09       :  mov DPTR,#_icnt
co:116f: 12 00 03       :  lcall __ld_dptr_r67
co:1172: c3             :  clr C
co:1173: ef             :  mov A,R7
co:1174: 9d             :  subb A,R5
co:1175: ee             :  mov A,R6
co:1176: 64 80          :  xrl A,#128
co:1178: 63 04 80       :  xrl AR4,#128
co:117b: 9c             :  subb A,R4
co:117c: 50 03          :  jnc ?_116
co:117e: 02 11 1d       :  ljmp ?239
                        : ?_116:
co:1181: 22             :  ret
                        : ; end of function PTriag_256
                        : ; used: R01234567 BR01234567 DPTR ACC PSW B
                        : 
                        :  .export _NTriag_256 ; void NTriag_256(void)
                        :  .hide
                        :  .show
                        : 
                        :  .segment __NTriag_256
                        : _NTriag_256: ; void NTriag_256(void)
                        :>}
                        :>
                        :>//-----------------------------------------------------------------------------------
                        :>// NSine_256  Generates Negative Triangle Wave Look Up Table using linear step values
                        :>//-----------------------------------------------------------------------------------
                        :>//
                        :>void NTriag_256 (void)
                        :>{
co:034a: 12 0e 5b       :  lcall _Triag_256
                        :> Triag_256();
                        :> for (icnt = 0; icnt < 128 ; icnt++) {
co:034d: 90 0a 09       :  mov DPTR,#_icnt
co:0350: e4             :  clr A
co:0351: f0             :  movx @DPTR,A
co:0352: a3             :  inc DPTR
co:0353: f0             :  movx @DPTR,A
                        : ?244:
                        : 
co:0354: 90 0a 09       :  mov DPTR,#_icnt
co:0357: 12 00 03       :  lcall __ld_dptr_r67
co:035a: ef             :  mov A,R7
co:035b: 2f             :  add A,R7
co:035c: fd             :  mov R5,A
co:035d: ee             :  mov A,R6
co:035e: 33             :  rlc A
co:035f: fc             :  mov R4,A
co:0360: 7e 01          :  mov R6,#((_wav+256)>>8)&255
co:0362: 7f 00          :  mov R7,#(_wav+256)&255
co:0364: ef             :  mov A,R7
co:0365: 2d             :  add A,R5
co:0366: ff             :  mov R7,A
co:0367: ee             :  mov A,R6
co:0368: 3c             :  addc A,R4
co:0369: fe             :  mov R6,A
co:036a: 8e 83          :  mov DPH,R6
co:036c: 8f 82          :  mov DPL,R7
co:036e: 12 00 18       :  lcall __ld_dptr_r23
co:0371: 90 0a 09       :  mov DPTR,#_icnt
co:0374: 12 00 03       :  lcall __ld_dptr_r67
co:0377: ef             :  mov A,R7
co:0378: 2f             :  add A,R7
co:0379: fd             :  mov R5,A
co:037a: ee             :  mov A,R6
co:037b: 33             :  rlc A
co:037c: fc             :  mov R4,A
co:037d: 7e 00          :  mov R6,#((_wav)>>8)&255
co:037f: 7f 00          :  mov R7,#(_wav)&255
co:0381: ef             :  mov A,R7
co:0382: 2d             :  add A,R5
co:0383: ff             :  mov R7,A
co:0384: ee             :  mov A,R6
co:0385: 3c             :  addc A,R4
co:0386: fe             :  mov R6,A
co:0387: 8e 83          :  mov DPH,R6
co:0389: 8f 82          :  mov DPL,R7
co:038b: 12 01 15       :  lcall __st_dptr_r23
                        :>  wav[icnt] = wav[icnt+128];
                        :>}
co:038e: 90 0a 09       :  mov DPTR,#_icnt
co:0391: 12 00 03       :  lcall __ld_dptr_r67
co:0394: 0f             :  inc R7
co:0395: ef             :  mov A,R7
co:0396: 70 01          :  jnz ?__9
co:0398: 0e             :  inc R6
                        : ?__9:
co:0399: 90 0a 09       :  mov DPTR,#_icnt
co:039c: 12 03 3b       :  lcall __st_dptr_r67
                        : 
co:039f: 7c 00          :  mov R4,#0
co:03a1: 7d 80          :  mov R5,#128
co:03a3: 90 0a 09       :  mov DPTR,#_icnt
co:03a6: 12 00 03       :  lcall __ld_dptr_r67
co:03a9: c3             :  clr C
co:03aa: ef             :  mov A,R7
co:03ab: 9d             :  subb A,R5
co:03ac: ee             :  mov A,R6
co:03ad: 64 80          :  xrl A,#128
co:03af: 63 04 80       :  xrl AR4,#128
co:03b2: 9c             :  subb A,R4
co:03b3: 50 03          :  jnc ?_117
co:03b5: 02 03 54       :  ljmp ?244
                        : ?_117:
co:03b8: 22             :  ret
                        : ; end of function NTriag_256
                        : ; used: R01234567 BR01234567 DPTR ACC PSW B
                        : 
                        :  .export _PSquare_256 ; void PSquare_256(void)
                        :  .segment _PSquare_256_formal_near, size 0, fill, notext, sclass dram
                        :  .segment _PSquare_256_local_near, size 0, fill, notext, sclass dram
                        :  .sgraph _PSquare_256_formal_near, _PSquare_256_local_near, __PSquare_256
                        : 
                        :  .segment __PSquare_256
                        : _PSquare_256: ; (leaf function) void PSquare_256(void)
                        :>}
                        :>
                        :>//-------------------------------------------------------------------------------------------
                        :>// PSquare_256 Generates Positive Square Wave Look Up Table using mid value transistion point 
                        :>//-------------------------------------------------------------------------------------------
                        :>void PSquare_256 (void)
                        :>{
co:0136: 90 0a 09       :  mov DPTR,#_icnt
co:0139: e4             :  clr A
co:013a: f0             :  movx @DPTR,A
co:013b: a3             :  inc DPTR
co:013c: f0             :  movx @DPTR,A
                        : ?249:
                        :> for (icnt = 0; icnt < 128 ; icnt++) {
co:013d: 90 0a 09       :  mov DPTR,#_icnt
co:0140: 12 00 03       :  lcall __ld_dptr_r67
co:0143: ef             :  mov A,R7
co:0144: 2f             :  add A,R7
co:0145: fd             :  mov R5,A
co:0146: ee             :  mov A,R6
co:0147: 33             :  rlc A
co:0148: fc             :  mov R4,A
co:0149: 7e 00          :  mov R6,#((_wav)>>8)&255
co:014b: 7f 00          :  mov R7,#(_wav)&255
co:014d: ef             :  mov A,R7
co:014e: 2d             :  add A,R5
co:014f: fd             :  mov R5,A
co:0150: ee             :  mov A,R6
co:0151: 3c             :  addc A,R4
co:0152: fc             :  mov R4,A
co:0153: e4             :  clr A
co:0154: fe             :  mov R6,A
co:0155: ff             :  mov R7,A
co:0156: 8c 83          :  mov DPH,R4
co:0158: 8d 82          :  mov DPL,R5
co:015a: 12 03 3b       :  lcall __st_dptr_r67
                        :>  wav[icnt] = 0;
                        :> }
co:015d: 90 0a 09       :  mov DPTR,#_icnt
co:0160: 12 00 03       :  lcall __ld_dptr_r67
co:0163: 0f             :  inc R7
co:0164: ef             :  mov A,R7
co:0165: 70 01          :  jnz ?__10
co:0167: 0e             :  inc R6
                        : ?__10:
co:0168: 90 0a 09       :  mov DPTR,#_icnt
co:016b: 12 03 3b       :  lcall __st_dptr_r67
                        : 
co:016e: 7c 00          :  mov R4,#0
co:0170: 7d 80          :  mov R5,#128
co:0172: 90 0a 09       :  mov DPTR,#_icnt
co:0175: 12 00 03       :  lcall __ld_dptr_r67
co:0178: c3             :  clr C
co:0179: ef             :  mov A,R7
co:017a: 9d             :  subb A,R5
co:017b: ee             :  mov A,R6
co:017c: 64 80          :  xrl A,#128
co:017e: 63 04 80       :  xrl AR4,#128
co:0181: 9c             :  subb A,R4
co:0182: 40 b9          :  jc ?249
                        :> for (icnt = 128; icnt < 256 ; icnt++) {
co:0184: 90 0a 09       :  mov DPTR,#_icnt
co:0187: e4             :  clr A
co:0188: f0             :  movx @DPTR,A
co:0189: a3             :  inc DPTR
co:018a: 74 80          :  mov A,#128
co:018c: f0             :  movx @DPTR,A
                        : ?253:
                        : 
co:018d: 90 0a 09       :  mov DPTR,#_icnt
co:0190: 12 00 03       :  lcall __ld_dptr_r67
co:0193: ef             :  mov A,R7
co:0194: 2f             :  add A,R7
co:0195: fd             :  mov R5,A
co:0196: ee             :  mov A,R6
co:0197: 33             :  rlc A
co:0198: fc             :  mov R4,A
co:0199: 7e 00          :  mov R6,#((_wav)>>8)&255
co:019b: 7f 00          :  mov R7,#(_wav)&255
co:019d: ef             :  mov A,R7
co:019e: 2d             :  add A,R5
co:019f: fd             :  mov R5,A
co:01a0: ee             :  mov A,R6
co:01a1: 3c             :  addc A,R4
co:01a2: fc             :  mov R4,A
co:01a3: 7e 08          :  mov R6,#8
co:01a5: 7f 00          :  mov R7,#0
co:01a7: 8c 83          :  mov DPH,R4
co:01a9: 8d 82          :  mov DPL,R5
co:01ab: 12 03 3b       :  lcall __st_dptr_r67
                        :>  wav[icnt] = 2048;
                        :> }
co:01ae: 90 0a 09       :  mov DPTR,#_icnt
co:01b1: 12 00 03       :  lcall __ld_dptr_r67
co:01b4: 0f             :  inc R7
co:01b5: ef             :  mov A,R7
co:01b6: 70 01          :  jnz ?__11
co:01b8: 0e             :  inc R6
                        : ?__11:
co:01b9: 90 0a 09       :  mov DPTR,#_icnt
co:01bc: 12 03 3b       :  lcall __st_dptr_r67
                        : 
co:01bf: 7c 01          :  mov R4,#1
co:01c1: 7d 00          :  mov R5,#0
co:01c3: 90 0a 09       :  mov DPTR,#_icnt
co:01c6: 12 00 03       :  lcall __ld_dptr_r67
co:01c9: c3             :  clr C
co:01ca: ef             :  mov A,R7
co:01cb: 9d             :  subb A,R5
co:01cc: ee             :  mov A,R6
co:01cd: 64 80          :  xrl A,#128
co:01cf: 63 04 80       :  xrl AR4,#128
co:01d2: 9c             :  subb A,R4
co:01d3: 40 b8          :  jc ?253
co:01d5: 22             :  ret
                        : ; end of function PSquare_256
                        : ; used: R----4567 BR-------- DPTR ACC PSW
                        : 
                        :  .export _NSquare_256 ; void NSquare_256(void)
                        :  .segment _NSquare_256_formal_near, size 0, fill, notext, sclass dram
                        :  .segment _NSquare_256_local_near, size 0, fill, notext, sclass dram
                        :  .sgraph _NSquare_256_formal_near, _NSquare_256_local_near, __NSquare_256
                        : 
                        :  .segment __NSquare_256
                        : _NSquare_256: ; (leaf function) void NSquare_256(void)
                        :>}
                        :>
                        :>//-------------------------------------------------------------------------------------------
                        :>// NSquare_256 Generates Negative Square Wave Look Up Table using mid value transistion point 
                        :>//-------------------------------------------------------------------------------------------
                        :>void NSquare_256 (void)
                        :>{
co:0074: 90 0a 09       :  mov DPTR,#_icnt
co:0077: e4             :  clr A
co:0078: f0             :  movx @DPTR,A
co:0079: a3             :  inc DPTR
co:007a: f0             :  movx @DPTR,A
                        : ?258:
                        :> for (icnt = 0; icnt < 128 ; icnt++) {
co:007b: 90 0a 09       :  mov DPTR,#_icnt
co:007e: 12 00 03       :  lcall __ld_dptr_r67
co:0081: ef             :  mov A,R7
co:0082: 2f             :  add A,R7
co:0083: fd             :  mov R5,A
co:0084: ee             :  mov A,R6
co:0085: 33             :  rlc A
co:0086: fc             :  mov R4,A
co:0087: 7e 00          :  mov R6,#((_wav)>>8)&255
co:0089: 7f 00          :  mov R7,#(_wav)&255
co:008b: ef             :  mov A,R7
co:008c: 2d             :  add A,R5
co:008d: fd             :  mov R5,A
co:008e: ee             :  mov A,R6
co:008f: 3c             :  addc A,R4
co:0090: fc             :  mov R4,A
co:0091: 7e 0f          :  mov R6,#15
co:0093: 7f ff          :  mov R7,#255
co:0095: 8c 83          :  mov DPH,R4
co:0097: 8d 82          :  mov DPL,R5
co:0099: 12 03 3b       :  lcall __st_dptr_r67
                        :>  wav[icnt] = 4095;
                        :> }
co:009c: 90 0a 09       :  mov DPTR,#_icnt
co:009f: 12 00 03       :  lcall __ld_dptr_r67
co:00a2: 0f             :  inc R7
co:00a3: ef             :  mov A,R7
co:00a4: 70 01          :  jnz ?__12
co:00a6: 0e             :  inc R6
                        : ?__12:
co:00a7: 90 0a 09       :  mov DPTR,#_icnt
co:00aa: 12 03 3b       :  lcall __st_dptr_r67
                        : 
co:00ad: 7c 00          :  mov R4,#0
co:00af: 7d 80          :  mov R5,#128
co:00b1: 90 0a 09       :  mov DPTR,#_icnt
co:00b4: 12 00 03       :  lcall __ld_dptr_r67
co:00b7: c3             :  clr C
co:00b8: ef             :  mov A,R7
co:00b9: 9d             :  subb A,R5
co:00ba: ee             :  mov A,R6
co:00bb: 64 80          :  xrl A,#128
co:00bd: 63 04 80       :  xrl AR4,#128
co:00c0: 9c             :  subb A,R4
co:00c1: 40 b8          :  jc ?258
                        :> for (icnt = 128; icnt < 256 ; icnt++) {
co:00c3: 90 0a 09       :  mov DPTR,#_icnt
co:00c6: e4             :  clr A
co:00c7: f0             :  movx @DPTR,A
co:00c8: a3             :  inc DPTR
co:00c9: 74 80          :  mov A,#128
co:00cb: f0             :  movx @DPTR,A
                        : ?262:
                        : 
co:00cc: 90 0a 09       :  mov DPTR,#_icnt
co:00cf: 12 00 03       :  lcall __ld_dptr_r67
co:00d2: ef             :  mov A,R7
co:00d3: 2f             :  add A,R7
co:00d4: fd             :  mov R5,A
co:00d5: ee             :  mov A,R6
co:00d6: 33             :  rlc A
co:00d7: fc             :  mov R4,A
co:00d8: 7e 00          :  mov R6,#((_wav)>>8)&255
co:00da: 7f 00          :  mov R7,#(_wav)&255
co:00dc: ef             :  mov A,R7
co:00dd: 2d             :  add A,R5
co:00de: fd             :  mov R5,A
co:00df: ee             :  mov A,R6
co:00e0: 3c             :  addc A,R4
co:00e1: fc             :  mov R4,A
co:00e2: 7e 08          :  mov R6,#8
co:00e4: 7f 00          :  mov R7,#0
co:00e6: 8c 83          :  mov DPH,R4
co:00e8: 8d 82          :  mov DPL,R5
co:00ea: 12 03 3b       :  lcall __st_dptr_r67
                        :>  wav[icnt] = 2048;
                        :> }
co:00ed: 90 0a 09       :  mov DPTR,#_icnt
co:00f0: 12 00 03       :  lcall __ld_dptr_r67
co:00f3: 0f             :  inc R7
co:00f4: ef             :  mov A,R7
co:00f5: 70 01          :  jnz ?__13
co:00f7: 0e             :  inc R6
                        : ?__13:
co:00f8: 90 0a 09       :  mov DPTR,#_icnt
co:00fb: 12 03 3b       :  lcall __st_dptr_r67
                        : 
co:00fe: 7c 01          :  mov R4,#1
co:0100: 7d 00          :  mov R5,#0
co:0102: 90 0a 09       :  mov DPTR,#_icnt
co:0105: 12 00 03       :  lcall __ld_dptr_r67
co:0108: c3             :  clr C
co:0109: ef             :  mov A,R7
co:010a: 9d             :  subb A,R5
co:010b: ee             :  mov A,R6
co:010c: 64 80          :  xrl A,#128
co:010e: 63 04 80       :  xrl AR4,#128
co:0111: 9c             :  subb A,R4
co:0112: 40 b8          :  jc ?262
co:0114: 22             :  ret
                        : ; end of function NSquare_256
                        : ; used: R----4567 BR-------- DPTR ACC PSW
                        : 
                        :  .segment bss, sclass xram, notext
                        :  .export _wav ; xdata volatile int wav[256]
                        : _wav: ; xdata volatile int wav[256]
xr:0000: xx xx xx xx xx :  .ds.b 512
xr:0005: xx xx xx xx xx :
xr:000a: xx xx xx xx xx :
xr:000f: xx xx xx xx xx :
xr:0014: xx xx xx xx xx :
xr:0019: xx xx xx xx xx :
xr:001e: xx xx xx xx xx :
xr:0023: xx xx xx xx xx :
xr:0028: xx xx xx xx xx :
xr:002d: xx xx xx xx xx :
xr:0032: xx xx xx xx xx :
xr:0037: xx xx xx xx xx :
xr:003c: xx xx xx xx xx :
xr:0041: xx xx xx xx xx :
xr:0046: xx xx xx xx xx :
xr:004b: xx xx xx xx xx :
xr:0050: xx xx xx xx xx :
xr:0055: xx xx xx xx xx :
xr:005a: xx xx xx xx xx :
xr:005f: xx xx xx xx xx :
xr:0064: xx xx xx xx xx :
xr:0069: xx xx xx xx xx :
xr:006e: xx xx xx xx xx :
xr:0073: xx xx xx xx xx :
xr:0078: xx xx xx xx xx :
xr:007d: xx xx xx xx xx :
xr:0082: xx xx xx xx xx :
xr:0087: xx xx xx xx xx :
xr:008c: xx xx xx xx xx :
xr:0091: xx xx xx xx xx :
xr:0096: xx xx xx xx xx :
xr:009b: xx xx xx xx xx :
xr:00a0: xx xx xx xx xx :
xr:00a5: xx xx xx xx xx :
xr:00aa: xx xx xx xx xx :
xr:00af: xx xx xx xx xx :
xr:00b4: xx xx xx xx xx :
xr:00b9: xx xx xx xx xx :
xr:00be: xx xx xx xx xx :
xr:00c3: xx xx xx xx xx :
xr:00c8: xx xx xx xx xx :
xr:00cd: xx xx xx xx xx :
xr:00d2: xx xx xx xx xx :
xr:00d7: xx xx xx xx xx :
xr:00dc: xx xx xx xx xx :
xr:00e1: xx xx xx xx xx :
xr:00e6: xx xx xx xx xx :
xr:00eb: xx xx xx xx xx :
xr:00f0: xx xx xx xx xx :
xr:00f5: xx xx xx xx xx :
xr:00fa: xx xx xx xx xx :
xr:00ff: xx xx xx xx xx :
xr:0104: xx xx xx xx xx :
xr:0109: xx xx xx xx xx :
xr:010e: xx xx xx xx xx :
xr:0113: xx xx xx xx xx :
xr:0118: xx xx xx xx xx :
xr:011d: xx xx xx xx xx :
xr:0122: xx xx xx xx xx :
xr:0127: xx xx xx xx xx :
xr:012c: xx xx xx xx xx :
xr:0131: xx xx xx xx xx :
xr:0136: xx xx xx xx xx :
xr:013b: xx xx xx xx xx :
xr:0140: xx xx xx xx xx :
xr:0145: xx xx xx xx xx :
xr:014a: xx xx xx xx xx :
xr:014f: xx xx xx xx xx :
xr:0154: xx xx xx xx xx :
xr:0159: xx xx xx xx xx :
xr:015e: xx xx xx xx xx :
xr:0163: xx xx xx xx xx :
xr:0168: xx xx xx xx xx :
xr:016d: xx xx xx xx xx :
xr:0172: xx xx xx xx xx :
xr:0177: xx xx xx xx xx :
xr:017c: xx xx xx xx xx :
xr:0181: xx xx xx xx xx :
xr:0186: xx xx xx xx xx :
xr:018b: xx xx xx xx xx :
xr:0190: xx xx xx xx xx :
xr:0195: xx xx xx xx xx :
xr:019a: xx xx xx xx xx :
xr:019f: xx xx xx xx xx :
xr:01a4: xx xx xx xx xx :
xr:01a9: xx xx xx xx xx :
xr:01ae: xx xx xx xx xx :
xr:01b3: xx xx xx xx xx :
xr:01b8: xx xx xx xx xx :
xr:01bd: xx xx xx xx xx :
xr:01c2: xx xx xx xx xx :
xr:01c7: xx xx xx xx xx :
xr:01cc: xx xx xx xx xx :
xr:01d1: xx xx xx xx xx :
xr:01d6: xx xx xx xx xx :
xr:01db: xx xx xx xx xx :
xr:01e0: xx xx xx xx xx :
xr:01e5: xx xx xx xx xx :
xr:01ea: xx xx xx xx xx :
xr:01ef: xx xx xx xx xx :
xr:01f4: xx xx xx xx xx :
xr:01f9: xx xx xx xx xx :
xr:01fe: xx xx          :
                        :  .export _pi ; xdata volatile int pi[512]
                        : _pi: ; xdata volatile int pi[512]
xr:0200: xx xx xx xx xx :  .ds.b 1024
xr:0205: xx xx xx xx xx :
xr:020a: xx xx xx xx xx :
xr:020f: xx xx xx xx xx :
xr:0214: xx xx xx xx xx :
xr:0219: xx xx xx xx xx :
xr:021e: xx xx xx xx xx :
xr:0223: xx xx xx xx xx :
xr:0228: xx xx xx xx xx :
xr:022d: xx xx xx xx xx :
xr:0232: xx xx xx xx xx :
xr:0237: xx xx xx xx xx :
xr:023c: xx xx xx xx xx :
xr:0241: xx xx xx xx xx :
xr:0246: xx xx xx xx xx :
xr:024b: xx xx xx xx xx :
xr:0250: xx xx xx xx xx :
xr:0255: xx xx xx xx xx :
xr:025a: xx xx xx xx xx :
xr:025f: xx xx xx xx xx :
xr:0264: xx xx xx xx xx :
xr:0269: xx xx xx xx xx :
xr:026e: xx xx xx xx xx :
xr:0273: xx xx xx xx xx :
xr:0278: xx xx xx xx xx :
xr:027d: xx xx xx xx xx :
xr:0282: xx xx xx xx xx :
xr:0287: xx xx xx xx xx :
xr:028c: xx xx xx xx xx :
xr:0291: xx xx xx xx xx :
xr:0296: xx xx xx xx xx :
xr:029b: xx xx xx xx xx :
xr:02a0: xx xx xx xx xx :
xr:02a5: xx xx xx xx xx :
xr:02aa: xx xx xx xx xx :
xr:02af: xx xx xx xx xx :
xr:02b4: xx xx xx xx xx :
xr:02b9: xx xx xx xx xx :
xr:02be: xx xx xx xx xx :
xr:02c3: xx xx xx xx xx :
xr:02c8: xx xx xx xx xx :
xr:02cd: xx xx xx xx xx :
xr:02d2: xx xx xx xx xx :
xr:02d7: xx xx xx xx xx :
xr:02dc: xx xx xx xx xx :
xr:02e1: xx xx xx xx xx :
xr:02e6: xx xx xx xx xx :
xr:02eb: xx xx xx xx xx :
xr:02f0: xx xx xx xx xx :
xr:02f5: xx xx xx xx xx :
xr:02fa: xx xx xx xx xx :
xr:02ff: xx xx xx xx xx :
xr:0304: xx xx xx xx xx :
xr:0309: xx xx xx xx xx :
xr:030e: xx xx xx xx xx :
xr:0313: xx xx xx xx xx :
xr:0318: xx xx xx xx xx :
xr:031d: xx xx xx xx xx :
xr:0322: xx xx xx xx xx :
xr:0327: xx xx xx xx xx :
xr:032c: xx xx xx xx xx :
xr:0331: xx xx xx xx xx :
xr:0336: xx xx xx xx xx :
xr:033b: xx xx xx xx xx :
xr:0340: xx xx xx xx xx :
xr:0345: xx xx xx xx xx :
xr:034a: xx xx xx xx xx :
xr:034f: xx xx xx xx xx :
xr:0354: xx xx xx xx xx :
xr:0359: xx xx xx xx xx :
xr:035e: xx xx xx xx xx :
xr:0363: xx xx xx xx xx :
xr:0368: xx xx xx xx xx :
xr:036d: xx xx xx xx xx :
xr:0372: xx xx xx xx xx :
xr:0377: xx xx xx xx xx :
xr:037c: xx xx xx xx xx :
xr:0381: xx xx xx xx xx :
xr:0386: xx xx xx xx xx :
xr:038b: xx xx xx xx xx :
xr:0390: xx xx xx xx xx :
xr:0395: xx xx xx xx xx :
xr:039a: xx xx xx xx xx :
xr:039f: xx xx xx xx xx :
xr:03a4: xx xx xx xx xx :
xr:03a9: xx xx xx xx xx :
xr:03ae: xx xx xx xx xx :
xr:03b3: xx xx xx xx xx :
xr:03b8: xx xx xx xx xx :
xr:03bd: xx xx xx xx xx :
xr:03c2: xx xx xx xx xx :
xr:03c7: xx xx xx xx xx :
xr:03cc: xx xx xx xx xx :
xr:03d1: xx xx xx xx xx :
xr:03d6: xx xx xx xx xx :
xr:03db: xx xx xx xx xx :
xr:03e0: xx xx xx xx xx :
xr:03e5: xx xx xx xx xx :
xr:03ea: xx xx xx xx xx :
xr:03ef: xx xx xx xx xx :
xr:03f4: xx xx xx xx xx :
xr:03f9: xx xx xx xx xx :
xr:03fe: xx xx xx xx xx :
xr:0403: xx xx xx xx xx :
xr:0408: xx xx xx xx xx :
xr:040d: xx xx xx xx xx :
xr:0412: xx xx xx xx xx :
xr:0417: xx xx xx xx xx :
xr:041c: xx xx xx xx xx :
xr:0421: xx xx xx xx xx :
xr:0426: xx xx xx xx xx :
xr:042b: xx xx xx xx xx :
xr:0430: xx xx xx xx xx :
xr:0435: xx xx xx xx xx :
xr:043a: xx xx xx xx xx :
xr:043f: xx xx xx xx xx :
xr:0444: xx xx xx xx xx :
xr:0449: xx xx xx xx xx :
xr:044e: xx xx xx xx xx :
xr:0453: xx xx xx xx xx :
xr:0458: xx xx xx xx xx :
xr:045d: xx xx xx xx xx :
xr:0462: xx xx xx xx xx :
xr:0467: xx xx xx xx xx :
xr:046c: xx xx xx xx xx :
xr:0471: xx xx xx xx xx :
xr:0476: xx xx xx xx xx :
xr:047b: xx xx xx xx xx :
xr:0480: xx xx xx xx xx :
xr:0485: xx xx xx xx xx :
xr:048a: xx xx xx xx xx :
xr:048f: xx xx xx xx xx :
xr:0494: xx xx xx xx xx :
xr:0499: xx xx xx xx xx :
xr:049e: xx xx xx xx xx :
xr:04a3: xx xx xx xx xx :
xr:04a8: xx xx xx xx xx :
xr:04ad: xx xx xx xx xx :
xr:04b2: xx xx xx xx xx :
xr:04b7: xx xx xx xx xx :
xr:04bc: xx xx xx xx xx :
xr:04c1: xx xx xx xx xx :
xr:04c6: xx xx xx xx xx :
xr:04cb: xx xx xx xx xx :
xr:04d0: xx xx xx xx xx :
xr:04d5: xx xx xx xx xx :
xr:04da: xx xx xx xx xx :
xr:04df: xx xx xx xx xx :
xr:04e4: xx xx xx xx xx :
xr:04e9: xx xx xx xx xx :
xr:04ee: xx xx xx xx xx :
xr:04f3: xx xx xx xx xx :
xr:04f8: xx xx xx xx xx :
xr:04fd: xx xx xx xx xx :
xr:0502: xx xx xx xx xx :
xr:0507: xx xx xx xx xx :
xr:050c: xx xx xx xx xx :
xr:0511: xx xx xx xx xx :
xr:0516: xx xx xx xx xx :
xr:051b: xx xx xx xx xx :
xr:0520: xx xx xx xx xx :
xr:0525: xx xx xx xx xx :
xr:052a: xx xx xx xx xx :
xr:052f: xx xx xx xx xx :
xr:0534: xx xx xx xx xx :
xr:0539: xx xx xx xx xx :
xr:053e: xx xx xx xx xx :
xr:0543: xx xx xx xx xx :
xr:0548: xx xx xx xx xx :
xr:054d: xx xx xx xx xx :
xr:0552: xx xx xx xx xx :
xr:0557: xx xx xx xx xx :
xr:055c: xx xx xx xx xx :
xr:0561: xx xx xx xx xx :
xr:0566: xx xx xx xx xx :
xr:056b: xx xx xx xx xx :
xr:0570: xx xx xx xx xx :
xr:0575: xx xx xx xx xx :
xr:057a: xx xx xx xx xx :
xr:057f: xx xx xx xx xx :
xr:0584: xx xx xx xx xx :
xr:0589: xx xx xx xx xx :
xr:058e: xx xx xx xx xx :
xr:0593: xx xx xx xx xx :
xr:0598: xx xx xx xx xx :
xr:059d: xx xx xx xx xx :
xr:05a2: xx xx xx xx xx :
xr:05a7: xx xx xx xx xx :
xr:05ac: xx xx xx xx xx :
xr:05b1: xx xx xx xx xx :
xr:05b6: xx xx xx xx xx :
xr:05bb: xx xx xx xx xx :
xr:05c0: xx xx xx xx xx :
xr:05c5: xx xx xx xx xx :
xr:05ca: xx xx xx xx xx :
xr:05cf: xx xx xx xx xx :
xr:05d4: xx xx xx xx xx :
xr:05d9: xx xx xx xx xx :
xr:05de: xx xx xx xx xx :
xr:05e3: xx xx xx xx xx :
xr:05e8: xx xx xx xx xx :
xr:05ed: xx xx xx xx xx :
xr:05f2: xx xx xx xx xx :
xr:05f7: xx xx xx xx xx :
xr:05fc: xx xx xx xx    :
                        :  .export _pv ; xdata volatile int pv[512]
                        : _pv: ; xdata volatile int pv[512]
xr:0600: xx xx xx xx xx :  .ds.b 1024
xr:0605: xx xx xx xx xx :
xr:060a: xx xx xx xx xx :
xr:060f: xx xx xx xx xx :
xr:0614: xx xx xx xx xx :
xr:0619: xx xx xx xx xx :
xr:061e: xx xx xx xx xx :
xr:0623: xx xx xx xx xx :
xr:0628: xx xx xx xx xx :
xr:062d: xx xx xx xx xx :
xr:0632: xx xx xx xx xx :
xr:0637: xx xx xx xx xx :
xr:063c: xx xx xx xx xx :
xr:0641: xx xx xx xx xx :
xr:0646: xx xx xx xx xx :
xr:064b: xx xx xx xx xx :
xr:0650: xx xx xx xx xx :
xr:0655: xx xx xx xx xx :
xr:065a: xx xx xx xx xx :
xr:065f: xx xx xx xx xx :
xr:0664: xx xx xx xx xx :
xr:0669: xx xx xx xx xx :
xr:066e: xx xx xx xx xx :
xr:0673: xx xx xx xx xx :
xr:0678: xx xx xx xx xx :
xr:067d: xx xx xx xx xx :
xr:0682: xx xx xx xx xx :
xr:0687: xx xx xx xx xx :
xr:068c: xx xx xx xx xx :
xr:0691: xx xx xx xx xx :
xr:0696: xx xx xx xx xx :
xr:069b: xx xx xx xx xx :
xr:06a0: xx xx xx xx xx :
xr:06a5: xx xx xx xx xx :
xr:06aa: xx xx xx xx xx :
xr:06af: xx xx xx xx xx :
xr:06b4: xx xx xx xx xx :
xr:06b9: xx xx xx xx xx :
xr:06be: xx xx xx xx xx :
xr:06c3: xx xx xx xx xx :
xr:06c8: xx xx xx xx xx :
xr:06cd: xx xx xx xx xx :
xr:06d2: xx xx xx xx xx :
xr:06d7: xx xx xx xx xx :
xr:06dc: xx xx xx xx xx :
xr:06e1: xx xx xx xx xx :
xr:06e6: xx xx xx xx xx :
xr:06eb: xx xx xx xx xx :
xr:06f0: xx xx xx xx xx :
xr:06f5: xx xx xx xx xx :
xr:06fa: xx xx xx xx xx :
xr:06ff: xx xx xx xx xx :
xr:0704: xx xx xx xx xx :
xr:0709: xx xx xx xx xx :
xr:070e: xx xx xx xx xx :
xr:0713: xx xx xx xx xx :
xr:0718: xx xx xx xx xx :
xr:071d: xx xx xx xx xx :
xr:0722: xx xx xx xx xx :
xr:0727: xx xx xx xx xx :
xr:072c: xx xx xx xx xx :
xr:0731: xx xx xx xx xx :
xr:0736: xx xx xx xx xx :
xr:073b: xx xx xx xx xx :
xr:0740: xx xx xx xx xx :
xr:0745: xx xx xx xx xx :
xr:074a: xx xx xx xx xx :
xr:074f: xx xx xx xx xx :
xr:0754: xx xx xx xx xx :
xr:0759: xx xx xx xx xx :
xr:075e: xx xx xx xx xx :
xr:0763: xx xx xx xx xx :
xr:0768: xx xx xx xx xx :
xr:076d: xx xx xx xx xx :
xr:0772: xx xx xx xx xx :
xr:0777: xx xx xx xx xx :
xr:077c: xx xx xx xx xx :
xr:0781: xx xx xx xx xx :
xr:0786: xx xx xx xx xx :
xr:078b: xx xx xx xx xx :
xr:0790: xx xx xx xx xx :
xr:0795: xx xx xx xx xx :
xr:079a: xx xx xx xx xx :
xr:079f: xx xx xx xx xx :
xr:07a4: xx xx xx xx xx :
xr:07a9: xx xx xx xx xx :
xr:07ae: xx xx xx xx xx :
xr:07b3: xx xx xx xx xx :
xr:07b8: xx xx xx xx xx :
xr:07bd: xx xx xx xx xx :
xr:07c2: xx xx xx xx xx :
xr:07c7: xx xx xx xx xx :
xr:07cc: xx xx xx xx xx :
xr:07d1: xx xx xx xx xx :
xr:07d6: xx xx xx xx xx :
xr:07db: xx xx xx xx xx :
xr:07e0: xx xx xx xx xx :
xr:07e5: xx xx xx xx xx :
xr:07ea: xx xx xx xx xx :
xr:07ef: xx xx xx xx xx :
xr:07f4: xx xx xx xx xx :
xr:07f9: xx xx xx xx xx :
xr:07fe: xx xx xx xx xx :
xr:0803: xx xx xx xx xx :
xr:0808: xx xx xx xx xx :
xr:080d: xx xx xx xx xx :
xr:0812: xx xx xx xx xx :
xr:0817: xx xx xx xx xx :
xr:081c: xx xx xx xx xx :
xr:0821: xx xx xx xx xx :
xr:0826: xx xx xx xx xx :
xr:082b: xx xx xx xx xx :
xr:0830: xx xx xx xx xx :
xr:0835: xx xx xx xx xx :
xr:083a: xx xx xx xx xx :
xr:083f: xx xx xx xx xx :
xr:0844: xx xx xx xx xx :
xr:0849: xx xx xx xx xx :
xr:084e: xx xx xx xx xx :
xr:0853: xx xx xx xx xx :
xr:0858: xx xx xx xx xx :
xr:085d: xx xx xx xx xx :
xr:0862: xx xx xx xx xx :
xr:0867: xx xx xx xx xx :
xr:086c: xx xx xx xx xx :
xr:0871: xx xx xx xx xx :
xr:0876: xx xx xx xx xx :
xr:087b: xx xx xx xx xx :
xr:0880: xx xx xx xx xx :
xr:0885: xx xx xx xx xx :
xr:088a: xx xx xx xx xx :
xr:088f: xx xx xx xx xx :
xr:0894: xx xx xx xx xx :
xr:0899: xx xx xx xx xx :
xr:089e: xx xx xx xx xx :
xr:08a3: xx xx xx xx xx :
xr:08a8: xx xx xx xx xx :
xr:08ad: xx xx xx xx xx :
xr:08b2: xx xx xx xx xx :
xr:08b7: xx xx xx xx xx :
xr:08bc: xx xx xx xx xx :
xr:08c1: xx xx xx xx xx :
xr:08c6: xx xx xx xx xx :
xr:08cb: xx xx xx xx xx :
xr:08d0: xx xx xx xx xx :
xr:08d5: xx xx xx xx xx :
xr:08da: xx xx xx xx xx :
xr:08df: xx xx xx xx xx :
xr:08e4: xx xx xx xx xx :
xr:08e9: xx xx xx xx xx :
xr:08ee: xx xx xx xx xx :
xr:08f3: xx xx xx xx xx :
xr:08f8: xx xx xx xx xx :
xr:08fd: xx xx xx xx xx :
xr:0902: xx xx xx xx xx :
xr:0907: xx xx xx xx xx :
xr:090c: xx xx xx xx xx :
xr:0911: xx xx xx xx xx :
xr:0916: xx xx xx xx xx :
xr:091b: xx xx xx xx xx :
xr:0920: xx xx xx xx xx :
xr:0925: xx xx xx xx xx :
xr:092a: xx xx xx xx xx :
xr:092f: xx xx xx xx xx :
xr:0934: xx xx xx xx xx :
xr:0939: xx xx xx xx xx :
xr:093e: xx xx xx xx xx :
xr:0943: xx xx xx xx xx :
xr:0948: xx xx xx xx xx :
xr:094d: xx xx xx xx xx :
xr:0952: xx xx xx xx xx :
xr:0957: xx xx xx xx xx :
xr:095c: xx xx xx xx xx :
xr:0961: xx xx xx xx xx :
xr:0966: xx xx xx xx xx :
xr:096b: xx xx xx xx xx :
xr:0970: xx xx xx xx xx :
xr:0975: xx xx xx xx xx :
xr:097a: xx xx xx xx xx :
xr:097f: xx xx xx xx xx :
xr:0984: xx xx xx xx xx :
xr:0989: xx xx xx xx xx :
xr:098e: xx xx xx xx xx :
xr:0993: xx xx xx xx xx :
xr:0998: xx xx xx xx xx :
xr:099d: xx xx xx xx xx :
xr:09a2: xx xx xx xx xx :
xr:09a7: xx xx xx xx xx :
xr:09ac: xx xx xx xx xx :
xr:09b1: xx xx xx xx xx :
xr:09b6: xx xx xx xx xx :
xr:09bb: xx xx xx xx xx :
xr:09c0: xx xx xx xx xx :
xr:09c5: xx xx xx xx xx :
xr:09ca: xx xx xx xx xx :
xr:09cf: xx xx xx xx xx :
xr:09d4: xx xx xx xx xx :
xr:09d9: xx xx xx xx xx :
xr:09de: xx xx xx xx xx :
xr:09e3: xx xx xx xx xx :
xr:09e8: xx xx xx xx xx :
xr:09ed: xx xx xx xx xx :
xr:09f2: xx xx xx xx xx :
xr:09f7: xx xx xx xx xx :
xr:09fc: xx xx xx xx    :
                        :  .export _running ; xdata volatile unsigned char running
                        : _running: ; xdata volatile unsigned char running
xr:0a00: xx             :  .ds.b 1
                        :  .export _gain1 ; xdata volatile unsigned char gain1
                        : _gain1: ; xdata volatile unsigned char gain1
xr:0a01: xx             :  .ds.b 1
                        :  .export _gain0 ; xdata volatile unsigned char gain0
                        : _gain0: ; xdata volatile unsigned char gain0
xr:0a02: xx             :  .ds.b 1
                        :  .export _wcnt ; xdata volatile int wcnt
                        : _wcnt: ; xdata volatile int wcnt
xr:0a03: xx xx          :  .ds.b 2
                        :  .export _kcnt ; xdata volatile int kcnt
                        : _kcnt: ; xdata volatile int kcnt
xr:0a05: xx xx          :  .ds.b 2
                        :  .export _jcnt ; xdata volatile int jcnt
                        : _jcnt: ; xdata volatile int jcnt
xr:0a07: xx xx          :  .ds.b 2
                        :  .export _icnt ; xdata volatile int icnt
                        : _icnt: ; xdata volatile int icnt
xr:0a09: xx xx          :  .ds.b 2
                        :  .export _data1 ; xdata volatile unsigned int data1
                        : _data1: ; xdata volatile unsigned int data1
xr:0a0b: xx xx          :  .ds.b 2
                        :  .export _data0 ; xdata volatile unsigned int data0
                        : _data0: ; xdata volatile unsigned int data0
xr:0a0d: xx xx          :  .ds.b 2
                        :  .export _swpstep ; xdata volatile int swpstep
                        : _swpstep: ; xdata volatile int swpstep
xr:0a0f: xx xx          :  .ds.b 2
                        :  .export _swpstart ; xdata volatile int swpstart
                        : _swpstart: ; xdata volatile int swpstart
xr:0a11: xx xx          :  .ds.b 2
                        :  .export _dacset ; xdata volatile int dacset
                        : _dacset: ; xdata volatile int dacset
xr:0a13: xx xx          :  .ds.b 2
                        :  .export _stpsav ; xdata volatile int stpsav
                        : _stpsav: ; xdata volatile int stpsav
xr:0a15: xx xx          :  .ds.b 2
                        :  .export _ramp ; xdata volatile int ramp
                        : _ramp: ; xdata volatile int ramp
xr:0a17: xx xx          :  .ds.b 2
                        :  .export _updwn ; xdata volatile int updwn
                        : _updwn: ; xdata volatile int updwn
xr:0a19: xx xx          :  .ds.b 2
                        :  .import _strcmp ; int strcmp(far char *, far char *)
                        :  .import __putc ; void _putc(unsigned char) reentrant
                        :  .export _SPIEN ; bit unsigned char SPIEN
                        : _SPIEN=$f8
                        :  .export _TXBMT ; bit unsigned char TXBMT
                        : _TXBMT=$f9
                        :  .export _NSSMD0 ; bit unsigned char NSSMD0
                        : _NSSMD0=$fa
                        :  .export _NSSMD1 ; bit unsigned char NSSMD1
                        : _NSSMD1=$fb
                        :  .export _RXOVRN ; bit unsigned char RXOVRN
                        : _RXOVRN=$fc
                        :  .export _MODF ; bit unsigned char MODF
                        : _MODF=$fd
                        :  .export _WCOL ; bit unsigned char WCOL
                        : _WCOL=$fe
                        :  .export _SPIF ; bit unsigned char SPIF
                        : _SPIF=$ff
                        :  .export _AD2WINT ; bit unsigned char AD2WINT
                        : _AD2WINT=$e8
                        :  .export _AD2CM0 ; bit unsigned char AD2CM0
                        : _AD2CM0=$e9
                        :  .export _AD2CM1 ; bit unsigned char AD2CM1
                        : _AD2CM1=$ea
                        :  .export _AD2CM2 ; bit unsigned char AD2CM2
                        : _AD2CM2=$eb
                        :  .export _AD2BUSY ; bit unsigned char AD2BUSY
                        : _AD2BUSY=$ec
                        :  .export _AD2INT ; bit unsigned char AD2INT
                        : _AD2INT=$ed
                        :  .export _AD2TM ; bit unsigned char AD2TM
                        : _AD2TM=$ee
                        :  .export _AD2EN ; bit unsigned char AD2EN
                        : _AD2EN=$ef
                        :  .export _AD0LJST ; bit unsigned char AD0LJST
                        : _AD0LJST=$e8
                        :  .export _AD0WINT ; bit unsigned char AD0WINT
                        : _AD0WINT=$e9
                        :  .export _AD0CM0 ; bit unsigned char AD0CM0
                        : _AD0CM0=$ea
                        :  .export _AD0CM1 ; bit unsigned char AD0CM1
                        : _AD0CM1=$eb
                        :  .export _AD0BUSY ; bit unsigned char AD0BUSY
                        : _AD0BUSY=$ec
                        :  .export _AD0INT ; bit unsigned char AD0INT
                        : _AD0INT=$ed
                        :  .export _AD0TM ; bit unsigned char AD0TM
                        : _AD0TM=$ee
                        :  .export _AD0EN ; bit unsigned char AD0EN
                        : _AD0EN=$ef
                        :  .export _CCF0 ; bit unsigned char CCF0
                        : _CCF0=$d8
                        :  .export _CCF1 ; bit unsigned char CCF1
                        : _CCF1=$d9
                        :  .export _CCF2 ; bit unsigned char CCF2
                        : _CCF2=$da
                        :  .export _CCF3 ; bit unsigned char CCF3
                        : _CCF3=$db
                        :  .export _CCF4 ; bit unsigned char CCF4
                        : _CCF4=$dc
                        :  .export _CCF5 ; bit unsigned char CCF5
                        : _CCF5=$dd
                        :  .export _CR ; bit unsigned char CR
                        : _CR=$de
                        :  .export _CF ; bit unsigned char CF
                        : _CF=$df
                        :  .export _P ; bit unsigned char P
                        : _P=$d0
                        :  .export _F1 ; bit unsigned char F1
                        : _F1=$d1
                        :  .export _OV ; bit unsigned char OV
                        : _OV=$d2
                        :  .export _RS0 ; bit unsigned char RS0
                        : _RS0=$d3
                        :  .export _RS1 ; bit unsigned char RS1
                        : _RS1=$d4
                        :  .export _F0 ; bit unsigned char F0
                        : _F0=$d5
                        :  .export _AC ; bit unsigned char AC
                        : _AC=$d6
                        :  .export _CY ; bit unsigned char CY
                        : _CY=$d7
                        :  .export _CPRL4 ; bit unsigned char CPRL4
                        : _CPRL4=$c8
                        :  .export _CT4 ; bit unsigned char CT4
                        : _CT4=$c9
                        :  .export _TR4 ; bit unsigned char TR4
                        : _TR4=$ca
                        :  .export _EXEN4 ; bit unsigned char EXEN4
                        : _EXEN4=$cb
                        :  .export _EXF4 ; bit unsigned char EXF4
                        : _EXF4=$ce
                        :  .export _TF4 ; bit unsigned char TF4
                        : _TF4=$cf
                        :  .export _CPRL3 ; bit unsigned char CPRL3
                        : _CPRL3=$c8
                        :  .export _CT3 ; bit unsigned char CT3
                        : _CT3=$c9
                        :  .export _TR3 ; bit unsigned char TR3
                        : _TR3=$ca
                        :  .export _EXEN3 ; bit unsigned char EXEN3
                        : _EXEN3=$cb
                        :  .export _EXF3 ; bit unsigned char EXF3
                        : _EXF3=$ce
                        :  .export _TF3 ; bit unsigned char TF3
                        : _TF3=$cf
                        :  .export _CPRL2 ; bit unsigned char CPRL2
                        : _CPRL2=$c8
                        :  .export _CT2 ; bit unsigned char CT2
                        : _CT2=$c9
                        :  .export _TR2 ; bit unsigned char TR2
                        : _TR2=$ca
                        :  .export _EXEN2 ; bit unsigned char EXEN2
                        : _EXEN2=$cb
                        :  .export _EXF2 ; bit unsigned char EXF2
                        : _EXF2=$ce
                        :  .export _TF2 ; bit unsigned char TF2
                        : _TF2=$cf
                        :  .export _MAC0N ; bit unsigned char MAC0N
                        : _MAC0N=$c0
                        :  .export _MAC0SO ; bit unsigned char MAC0SO
                        : _MAC0SO=$c1
                        :  .export _MAC0Z ; bit unsigned char MAC0Z
                        : _MAC0Z=$c2
                        :  .export _MAC0HO ; bit unsigned char MAC0HO
                        : _MAC0HO=$c3
                        :  .export _SMBTOE ; bit unsigned char SMBTOE
                        : _SMBTOE=$c0
                        :  .export _SMBFTE ; bit unsigned char SMBFTE
                        : _SMBFTE=$c1
                        :  .export _AA ; bit unsigned char AA
                        : _AA=$c2
                        :  .export _SI ; bit unsigned char SI
                        : _SI=$c3
                        :  .export _STO ; bit unsigned char STO
                        : _STO=$c4
                        :  .export _STA ; bit unsigned char STA
                        : _STA=$c5
                        :  .export _ENSMB ; bit unsigned char ENSMB
                        : _ENSMB=$c6
                        :  .export _BUSY ; bit unsigned char BUSY
                        : _BUSY=$c7
                        :  .export _PX0 ; bit unsigned char PX0
                        : _PX0=$b8
                        :  .export _PT0 ; bit unsigned char PT0
                        : _PT0=$b9
                        :  .export _PX1 ; bit unsigned char PX1
                        : _PX1=$ba
                        :  .export _PT1 ; bit unsigned char PT1
                        : _PT1=$bb
                        :  .export _PS ; bit unsigned char PS
                        : _PS=$bc
                        :  .export _PT2 ; bit unsigned char PT2
                        : _PT2=$bd
                        :  .export _EX0 ; bit unsigned char EX0
                        : _EX0=$a8
                        :  .export _ET0 ; bit unsigned char ET0
                        : _ET0=$a9
                        :  .export _EX1 ; bit unsigned char EX1
                        : _EX1=$aa
                        :  .export _ET1 ; bit unsigned char ET1
                        : _ET1=$ab
                        :  .export _ES0 ; bit unsigned char ES0
                        : _ES0=$ac
                        :  .export _ET2 ; bit unsigned char ET2
                        : _ET2=$ad
                        :  .export _EA ; bit unsigned char EA
                        : _EA=$af
                        :  .export _RI1 ; bit unsigned char RI1
                        : _RI1=$98
                        :  .export _TI1 ; bit unsigned char TI1
                        : _TI1=$99
                        :  .export _RB81 ; bit unsigned char RB81
                        : _RB81=$9a
                        :  .export _TB81 ; bit unsigned char TB81
                        : _TB81=$9b
                        :  .export _REN1 ; bit unsigned char REN1
                        : _REN1=$9c
                        :  .export _MCE1 ; bit unsigned char MCE1
                        : _MCE1=$9d
                        :  .export _S1MODE ; bit unsigned char S1MODE
                        : _S1MODE=$9f
                        :  .export _RI0 ; bit unsigned char RI0
                        : _RI0=$98
                        :  .export _TI0 ; bit unsigned char TI0
                        : _TI0=$99
                        :  .export _RB80 ; bit unsigned char RB80
                        : _RB80=$9a
                        :  .export _TB80 ; bit unsigned char TB80
                        : _TB80=$9b
                        :  .export _REN0 ; bit unsigned char REN0
                        : _REN0=$9c
                        :  .export _SM20 ; bit unsigned char SM20
                        : _SM20=$9d
                        :  .export _SM10 ; bit unsigned char SM10
                        : _SM10=$9e
                        :  .export _SM00 ; bit unsigned char SM00
                        : _SM00=$9f
                        :  .export _FLHBUSY ; bit unsigned char FLHBUSY
                        : _FLHBUSY=$88
                        :  .export _CP1HYN0 ; bit unsigned char CP1HYN0
                        : _CP1HYN0=$88
                        :  .export _CP1HYN1 ; bit unsigned char CP1HYN1
                        : _CP1HYN1=$89
                        :  .export _CP1HYP0 ; bit unsigned char CP1HYP0
                        : _CP1HYP0=$8a
                        :  .export _CP1HYP1 ; bit unsigned char CP1HYP1
                        : _CP1HYP1=$8b
                        :  .export _CP1FIF ; bit unsigned char CP1FIF
                        : _CP1FIF=$8c
                        :  .export _CP1RIF ; bit unsigned char CP1RIF
                        : _CP1RIF=$8d
                        :  .export _CP1OUT ; bit unsigned char CP1OUT
                        : _CP1OUT=$8e
                        :  .export _CP1EN ; bit unsigned char CP1EN
                        : _CP1EN=$8f
                        :  .export _CP0HYN0 ; bit unsigned char CP0HYN0
                        : _CP0HYN0=$88
                        :  .export _CP0HYN1 ; bit unsigned char CP0HYN1
                        : _CP0HYN1=$89
                        :  .export _CP0HYP0 ; bit unsigned char CP0HYP0
                        : _CP0HYP0=$8a
                        :  .export _CP0HYP1 ; bit unsigned char CP0HYP1
                        : _CP0HYP1=$8b
                        :  .export _CP0FIF ; bit unsigned char CP0FIF
                        : _CP0FIF=$8c
                        :  .export _CP0RIF ; bit unsigned char CP0RIF
                        : _CP0RIF=$8d
                        :  .export _CP0OUT ; bit unsigned char CP0OUT
                        : _CP0OUT=$8e
                        :  .export _CP0EN ; bit unsigned char CP0EN
                        : _CP0EN=$8f
                        :  .export _IT0 ; bit unsigned char IT0
                        : _IT0=$88
                        :  .export _IE0 ; bit unsigned char IE0
                        : _IE0=$89
                        :  .export _IT1 ; bit unsigned char IT1
                        : _IT1=$8a
                        :  .export _IE1 ; bit unsigned char IE1
                        : _IE1=$8b
                        :  .export _TR0 ; bit unsigned char TR0
                        : _TR0=$8c
                        :  .export _TF0 ; bit unsigned char TF0
                        : _TF0=$8d
                        :  .export _TR1 ; bit unsigned char TR1
                        : _TR1=$8e
                        :  .export _TF1 ; bit unsigned char TF1
                        : _TF1=$8f
                        :  .export _WDTCN ; near unsigned char WDTCN
                        : _WDTCN=$ff
                        :  .export _PCA0CPH1 ; near unsigned char PCA0CPH1
                        : _PCA0CPH1=$fe
                        :  .export _PCA0CPL1 ; near unsigned char PCA0CPL1
                        : _PCA0CPL1=$fd
                        :  .export _PCA0CPH0 ; near unsigned char PCA0CPH0
                        : _PCA0CPH0=$fc
                        :  .export _PCA0CPL0 ; near unsigned char PCA0CPL0
                        : _PCA0CPL0=$fb
                        :  .export _PCA0H ; near unsigned char PCA0H
                        : _PCA0H=$fa
                        :  .export _PCA0L ; near unsigned char PCA0L
                        : _PCA0L=$f9
                        :  .export _SPI0CN ; near unsigned char SPI0CN
                        : _SPI0CN=$f8
                        :  .export _P7 ; near unsigned char P7
                        : _P7=$f8
                        :  .export _EIP2 ; near unsigned char EIP2
                        : _EIP2=$f7
                        :  .export _EIP1 ; near unsigned char EIP1
                        : _EIP1=$f6
                        :  .export _B ; near unsigned char B
                        : _B=$f0
                        :  .export _RSTSRC ; near unsigned char RSTSRC
                        : _RSTSRC=$ef
                        :  .export _PCA0CPH4 ; near unsigned char PCA0CPH4
                        : _PCA0CPH4=$ee
                        :  .export _PCA0CPL4 ; near unsigned char PCA0CPL4
                        : _PCA0CPL4=$ed
                        :  .export _PCA0CPH3 ; near unsigned char PCA0CPH3
                        : _PCA0CPH3=$ec
                        :  .export _PCA0CPL3 ; near unsigned char PCA0CPL3
                        : _PCA0CPL3=$eb
                        :  .export _PCA0CPH2 ; near unsigned char PCA0CPH2
                        : _PCA0CPH2=$ea
                        :  .export _PCA0CPL2 ; near unsigned char PCA0CPL2
                        : _PCA0CPL2=$e9
                        :  .export _P6 ; near unsigned char P6
                        : _P6=$e8
                        :  .export _ADC2CN ; near unsigned char ADC2CN
                        : _ADC2CN=$e8
                        :  .export _ADC0CN ; near unsigned char ADC0CN
                        : _ADC0CN=$e8
                        :  .export _EIE2 ; near unsigned char EIE2
                        : _EIE2=$e7
                        :  .export _EIE1 ; near unsigned char EIE1
                        : _EIE1=$e6
                        :  .export _XBR2 ; near unsigned char XBR2
                        : _XBR2=$e3
                        :  .export _XBR1 ; near unsigned char XBR1
                        : _XBR1=$e2
                        :  .export _PCA0CPH5 ; near unsigned char PCA0CPH5
                        : _PCA0CPH5=$e2
                        :  .export _PCA0CPL5 ; near unsigned char PCA0CPL5
                        : _PCA0CPL5=$e1
                        :  .export _XBR0 ; near unsigned char XBR0
                        : _XBR0=$e1
                        :  .export _ACC ; near unsigned char ACC
                        : _ACC=$e0
                        :  .export _PCA0CPM5 ; near unsigned char PCA0CPM5
                        : _PCA0CPM5=$df
                        :  .export _PCA0CPM4 ; near unsigned char PCA0CPM4
                        : _PCA0CPM4=$de
                        :  .export _PCA0CPM3 ; near unsigned char PCA0CPM3
                        : _PCA0CPM3=$dd
                        :  .export _PCA0CPM2 ; near unsigned char PCA0CPM2
                        : _PCA0CPM2=$dc
                        :  .export _PCA0CPM1 ; near unsigned char PCA0CPM1
                        : _PCA0CPM1=$db
                        :  .export _PCA0CPM0 ; near unsigned char PCA0CPM0
                        : _PCA0CPM0=$da
                        :  .export _PCA0MD ; near unsigned char PCA0MD
                        : _PCA0MD=$d9
                        :  .export _PCA0CN ; near unsigned char PCA0CN
                        : _PCA0CN=$d8
                        :  .export _P5 ; near unsigned char P5
                        : _P5=$d8
                        :  .export _DAC1CN ; near unsigned char DAC1CN
                        : _DAC1CN=$d4
                        :  .export _DAC0CN ; near unsigned char DAC0CN
                        : _DAC0CN=$d4
                        :  .export _DAC1H ; near unsigned char DAC1H
                        : _DAC1H=$d3
                        :  .export _DAC0H ; near unsigned char DAC0H
                        : _DAC0H=$d3
                        :  .export _DAC1L ; near unsigned char DAC1L
                        : _DAC1L=$d2
                        :  .export _DAC0L ; near unsigned char DAC0L
                        : _DAC0L=$d2
                        :  .export _REF0CN ; near unsigned char REF0CN
                        : _REF0CN=$d1
                        :  .export _PSW ; near unsigned char PSW
                        : _PSW=$d0
                        :  .export _SMB0CR ; near unsigned char SMB0CR
                        : _SMB0CR=$cf
                        :  .export _MAC0RNDH ; near unsigned char MAC0RNDH
                        : _MAC0RNDH=$cf
                        :  .export _MAC0RNDL ; near unsigned char MAC0RNDL
                        : _MAC0RNDL=$ce
                        :  .export _TMR4H ; near unsigned char TMR4H
                        : _TMR4H=$cd
                        :  .export _TMR3H ; near unsigned char TMR3H
                        : _TMR3H=$cd
                        :  .export _TMR2H ; near unsigned char TMR2H
                        : _TMR2H=$cd
                        :  .export _TMR4L ; near unsigned char TMR4L
                        : _TMR4L=$cc
                        :  .export _TMR3L ; near unsigned char TMR3L
                        : _TMR3L=$cc
                        :  .export _TMR2L ; near unsigned char TMR2L
                        : _TMR2L=$cc
                        :  .export _RCAP4H ; near unsigned char RCAP4H
                        : _RCAP4H=$cb
                        :  .export _RCAP3H ; near unsigned char RCAP3H
                        : _RCAP3H=$cb
                        :  .export _RCAP2H ; near unsigned char RCAP2H
                        : _RCAP2H=$cb
                        :  .export _RCAP4L ; near unsigned char RCAP4L
                        : _RCAP4L=$ca
                        :  .export _RCAP3L ; near unsigned char RCAP3L
                        : _RCAP3L=$ca
                        :  .export _RCAP2L ; near unsigned char RCAP2L
                        : _RCAP2L=$ca
                        :  .export _TMR4CF ; near unsigned char TMR4CF
                        : _TMR4CF=$c9
                        :  .export _TMR3CF ; near unsigned char TMR3CF
                        : _TMR3CF=$c9
                        :  .export _TMR2CF ; near unsigned char TMR2CF
                        : _TMR2CF=$c9
                        :  .export _TMR4CN ; near unsigned char TMR4CN
                        : _TMR4CN=$c8
                        :  .export _TMR3CN ; near unsigned char TMR3CN
                        : _TMR3CN=$c8
                        :  .export _TMR2CN ; near unsigned char TMR2CN
                        : _TMR2CN=$c8
                        :  .export _P4 ; near unsigned char P4
                        : _P4=$c8
                        :  .export _ADC0LTH ; near unsigned char ADC0LTH
                        : _ADC0LTH=$c7
                        :  .export _ADC2LT ; near unsigned char ADC2LT
                        : _ADC2LT=$c6
                        :  .export _ADC0LTL ; near unsigned char ADC0LTL
                        : _ADC0LTL=$c6
                        :  .export _ADC0GTH ; near unsigned char ADC0GTH
                        : _ADC0GTH=$c5
                        :  .export _ADC2GT ; near unsigned char ADC2GT
                        : _ADC2GT=$c4
                        :  .export _ADC0GTL ; near unsigned char ADC0GTL
                        : _ADC0GTL=$c4
                        :  .export _SMB0ADR ; near unsigned char SMB0ADR
                        : _SMB0ADR=$c3
                        :  .export _MAC0CF ; near unsigned char MAC0CF
                        : _MAC0CF=$c3
                        :  .export _SMB0DAT ; near unsigned char SMB0DAT
                        : _SMB0DAT=$c2
                        :  .export _MAC0AH ; near unsigned char MAC0AH
                        : _MAC0AH=$c2
                        :  .export _SMB0STA ; near unsigned char SMB0STA
                        : _SMB0STA=$c1
                        :  .export _MAC0AL ; near unsigned char MAC0AL
                        : _MAC0AL=$c1
                        :  .export _SMB0CN ; near unsigned char SMB0CN
                        : _SMB0CN=$c0
                        :  .export _MAC0STA ; near unsigned char MAC0STA
                        : _MAC0STA=$c0
                        :  .export _ADC0H ; near unsigned char ADC0H
                        : _ADC0H=$bf
                        :  .export _ADC2 ; near unsigned char ADC2
                        : _ADC2=$be
                        :  .export _ADC0L ; near unsigned char ADC0L
                        : _ADC0L=$be
                        :  .export _ADC2CF ; near unsigned char ADC2CF
                        : _ADC2CF=$bc
                        :  .export _ADC0CF ; near unsigned char ADC0CF
                        : _ADC0CF=$bc
                        :  .export _AMX2SL ; near unsigned char AMX2SL
                        : _AMX2SL=$bb
                        :  .export _AMX0SL ; near unsigned char AMX0SL
                        : _AMX0SL=$bb
                        :  .export _AMX2CF ; near unsigned char AMX2CF
                        : _AMX2CF=$ba
                        :  .export _AMX0CF ; near unsigned char AMX0CF
                        : _AMX0CF=$ba
                        :  .export _SADEN0 ; near unsigned char SADEN0
                        : _SADEN0=$b9
                        :  .export _IP ; near unsigned char IP
                        : _IP=$b8
                        :  .export _FLSCL ; near unsigned char FLSCL
                        : _FLSCL=$b7
                        :  .export _FLACL ; near unsigned char FLACL
                        : _FLACL=$b7
                        :  .export _PSBANK ; near unsigned char PSBANK
                        : _PSBANK=$b1
                        :  .export _P3 ; near unsigned char P3
                        : _P3=$b0
                        :  .export _P1MDIN ; near unsigned char P1MDIN
                        : _P1MDIN=$ad
                        :  .export _SADDR0 ; near unsigned char SADDR0
                        : _SADDR0=$a9
                        :  .export _IE ; near unsigned char IE
                        : _IE=$a8
                        :  .export _P3MDOUT ; near unsigned char P3MDOUT
                        : _P3MDOUT=$a7
                        :  .export _P2MDOUT ; near unsigned char P2MDOUT
                        : _P2MDOUT=$a6
                        :  .export _P1MDOUT ; near unsigned char P1MDOUT
                        : _P1MDOUT=$a5
                        :  .export _P0MDOUT ; near unsigned char P0MDOUT
                        : _P0MDOUT=$a4
                        :  .export _CCH0LC ; near unsigned char CCH0LC
                        : _CCH0LC=$a3
                        :  .export _EMI0CF ; near unsigned char EMI0CF
                        : _EMI0CF=$a3
                        :  .export _CCH0TN ; near unsigned char CCH0TN
                        : _CCH0TN=$a2
                        :  .export _EMI0CN ; near unsigned char EMI0CN
                        : _EMI0CN=$a2
                        :  .export _CCH0CN ; near unsigned char CCH0CN
                        : _CCH0CN=$a1
                        :  .export _EMI0TC ; near unsigned char EMI0TC
                        : _EMI0TC=$a1
                        :  .export _P2 ; near unsigned char P2
                        : _P2=$a0
                        :  .export _P7MDOUT ; near unsigned char P7MDOUT
                        : _P7MDOUT=$9f
                        :  .export _P6MDOUT ; near unsigned char P6MDOUT
                        : _P6MDOUT=$9e
                        :  .export _SPI0CKR ; near unsigned char SPI0CKR
                        : _SPI0CKR=$9d
                        :  .export _P5MDOUT ; near unsigned char P5MDOUT
                        : _P5MDOUT=$9d
                        :  .export _P4MDOUT ; near unsigned char P4MDOUT
                        : _P4MDOUT=$9c
                        :  .export _SPI0DAT ; near unsigned char SPI0DAT
                        : _SPI0DAT=$9b
                        :  .export _CCH0MA ; near unsigned char CCH0MA
                        : _CCH0MA=$9a
                        :  .export _SPI0CFG ; near unsigned char SPI0CFG
                        : _SPI0CFG=$9a
                        :  .export _SBUF1 ; near unsigned char SBUF1
                        : _SBUF1=$99
                        :  .export _SBUF0 ; near unsigned char SBUF0
                        : _SBUF0=$99
                        :  .export _SCON1 ; near unsigned char SCON1
                        : _SCON1=$98
                        :  .export _SCON0 ; near unsigned char SCON0
                        : _SCON0=$98
                        :  .export _CLKSEL ; near unsigned char CLKSEL
                        : _CLKSEL=$97
                        :  .export _MAC0OVR ; near unsigned char MAC0OVR
                        : _MAC0OVR=$97
                        :  .export _MAC0ACC3 ; near unsigned char MAC0ACC3
                        : _MAC0ACC3=$96
                        :  .export _SFRPGCN ; near unsigned char SFRPGCN
                        : _SFRPGCN=$96
                        :  .export _MAC0ACC2 ; near unsigned char MAC0ACC2
                        : _MAC0ACC2=$95
                        :  .export _MAC0ACC1 ; near unsigned char MAC0ACC1
                        : _MAC0ACC1=$94
                        :  .export _MAC0ACC0 ; near unsigned char MAC0ACC0
                        : _MAC0ACC0=$93
                        :  .export _MAC0BH ; near unsigned char MAC0BH
                        : _MAC0BH=$92
                        :  .export _MAC0BL ; near unsigned char MAC0BL
                        : _MAC0BL=$91
                        :  .export _SSTA0 ; near unsigned char SSTA0
                        : _SSTA0=$91
                        :  .export _P1 ; near unsigned char P1
                        : _P1=$90
                        :  .export _PLL0FLT ; near unsigned char PLL0FLT
                        : _PLL0FLT=$8f
                        :  .export _PSCTL ; near unsigned char PSCTL
                        : _PSCTL=$8f
                        :  .export _PLL0MUL ; near unsigned char PLL0MUL
                        : _PLL0MUL=$8e
                        :  .export _CKCON ; near unsigned char CKCON
                        : _CKCON=$8e
                        :  .export _PLL0DIV ; near unsigned char PLL0DIV
                        : _PLL0DIV=$8d
                        :  .export _TH1 ; near unsigned char TH1
                        : _TH1=$8d
                        :  .export _TH0 ; near unsigned char TH0
                        : _TH0=$8c
                        :  .export _OSCXCN ; near unsigned char OSCXCN
                        : _OSCXCN=$8c
                        :  .export _TL1 ; near unsigned char TL1
                        : _TL1=$8b
                        :  .export _OSCICL ; near unsigned char OSCICL
                        : _OSCICL=$8b
                        :  .export _TL0 ; near unsigned char TL0
                        : _TL0=$8a
                        :  .export _OSCICN ; near unsigned char OSCICN
                        : _OSCICN=$8a
                        :  .export _PLL0CN ; near unsigned char PLL0CN
                        : _PLL0CN=$89
                        :  .export _CPT1MD ; near unsigned char CPT1MD
                        : _CPT1MD=$89
                        :  .export _CPT0MD ; near unsigned char CPT0MD
                        : _CPT0MD=$89
                        :  .export _TMOD ; near unsigned char TMOD
                        : _TMOD=$89
                        :  .export _TCON ; near unsigned char TCON
                        : _TCON=$88
                        :  .export _CPT1CN ; near unsigned char CPT1CN
                        : _CPT1CN=$88
                        :  .export _CPT0CN ; near unsigned char CPT0CN
                        : _CPT0CN=$88
                        :  .export _FLSTAT ; near unsigned char FLSTAT
                        : _FLSTAT=$88
                        :  .export _PCON ; near unsigned char PCON
                        : _PCON=$87
                        :  .export _SFRLAST ; near unsigned char SFRLAST
                        : _SFRLAST=$86
                        :  .export _SFRNEXT ; near unsigned char SFRNEXT
                        : _SFRNEXT=$85
                        :  .export _SFRPAGE ; near unsigned char SFRPAGE
                        : _SFRPAGE=$84
                        :  .export _DPH ; near unsigned char DPH
                        : _DPH=$83
                        :  .export _DPL ; near unsigned char DPL
                        : _DPL=$82
                        :  .export _SP ; near unsigned char SP
                        : _SP=$81
                        :  .export _P0 ; near unsigned char P0
                        : _P0=$80
                        :  .export _P3_B7 ; bit unsigned char P3_B7
                        : _P3_B7=$b7
                        :  .export _P3_B6 ; bit unsigned char P3_B6
                        : _P3_B6=$b6
                        :  .export _P3_B5 ; bit unsigned char P3_B5
                        : _P3_B5=$b5
                        :  .export _P3_B4 ; bit unsigned char P3_B4
                        : _P3_B4=$b4
                        :  .export _P3_B3 ; bit unsigned char P3_B3
                        : _P3_B3=$b3
                        :  .export _P3_B2 ; bit unsigned char P3_B2
                        : _P3_B2=$b2
                        :  .export _P3_B1 ; bit unsigned char P3_B1
                        : _P3_B1=$b1
                        :  .export _P3_B0 ; bit unsigned char P3_B0
                        : _P3_B0=$b0
                        :  .export _P2_B7 ; bit unsigned char P2_B7
                        : _P2_B7=$a7
                        :  .export _P2_B6 ; bit unsigned char P2_B6
                        : _P2_B6=$a6
                        :  .export _P2_B5 ; bit unsigned char P2_B5
                        : _P2_B5=$a5
                        :  .export _P2_B4 ; bit unsigned char P2_B4
                        : _P2_B4=$a4
                        :  .export _P2_B3 ; bit unsigned char P2_B3
                        : _P2_B3=$a3
                        :  .export _P2_B2 ; bit unsigned char P2_B2
                        : _P2_B2=$a2
                        :  .export _P2_B1 ; bit unsigned char P2_B1
                        : _P2_B1=$a1
                        :  .export _P2_B0 ; bit unsigned char P2_B0
                        : _P2_B0=$a0
                        :  .export _P1_B7 ; bit unsigned char P1_B7
                        : _P1_B7=$97
                        :  .export _P1_B6 ; bit unsigned char P1_B6
                        : _P1_B6=$96
                        :  .export _P1_B5 ; bit unsigned char P1_B5
                        : _P1_B5=$95
                        :  .export _P1_B4 ; bit unsigned char P1_B4
                        : _P1_B4=$94
                        :  .export _P1_B3 ; bit unsigned char P1_B3
                        : _P1_B3=$93
                        :  .export _P1_B2 ; bit unsigned char P1_B2
                        : _P1_B2=$92
                        :  .export _P1_B1 ; bit unsigned char P1_B1
                        : _P1_B1=$91
                        :  .export _P1_B0 ; bit unsigned char P1_B0
                        : _P1_B0=$90
                        :  .export _P0_B7 ; bit unsigned char P0_B7
                        : _P0_B7=$87
                        :  .export _P0_B6 ; bit unsigned char P0_B6
                        : _P0_B6=$86
                        :  .export _P0_B5 ; bit unsigned char P0_B5
                        : _P0_B5=$85
                        :  .export _P0_B4 ; bit unsigned char P0_B4
                        : _P0_B4=$84
                        :  .export _P0_B3 ; bit unsigned char P0_B3
                        : _P0_B3=$83
                        :  .export _P0_B2 ; bit unsigned char P0_B2
                        : _P0_B2=$82
                        :  .export _P0_B1 ; bit unsigned char P0_B1
                        : _P0_B1=$81
                        :  .export _P0_B0 ; bit unsigned char P0_B0
                        : _P0_B0=$80
                        :  .segment lit
                        : ?i132: ; code char [4]
co:001e: 53 43 57 00    :  .dc.b "SCW",0
                        : ?i129: ; code char [4]
co:0022: 53 57 53 00    :  .dc.b "SWS",0
                        : ?i126: ; code char [4]
co:0026: 53 45 52 00    :  .dc.b "SER",0
                        : ?i123: ; code char [4]
co:002a: 52 53 54 00    :  .dc.b "RST",0
                        : ?i118: ; code char [4]
co:002e: 49 4e 54 00    :  .dc.b "INT",0
                        : ?i115: ; code char [4]
co:0032: 44 49 53 00    :  .dc.b "DIS",0
                        : ?i104: ; code char [4]
co:0036: 53 57 50 00    :  .dc.b "SWP",0
                        : ?i89: ; code char [4]
co:003a: 44 43 4d 00    :  .dc.b "DCM",0
                        : ?i62: ; code char [4]
co:003e: 4d 45 41 00    :  .dc.b "MEA",0
                        : ?i59: ; code char [4]
co:0042: 53 54 50 00    :  .dc.b "STP",0
                        : ?i56: ; code char [4]
co:0046: 53 54 41 00    :  .dc.b "STA",0
                        : ?i53: ; code char [4]
co:004a: 44 41 31 00    :  .dc.b "DA1",0
                        : ?i50: ; code char [4]
co:004e: 44 41 30 00    :  .dc.b "DA0",0
                        : ?i47: ; code char [4]
co:0052: 53 50 33 00    :  .dc.b "SP3",0
                        : ?i44: ; code char [4]
co:0056: 53 50 31 00    :  .dc.b "SP1",0
                        : ?i23: ; code char [4]
co:005a: 57 41 56 00    :  .dc.b "WAV",0
                        :  .end
                        :>}
=             _PCA0CPM1 =    db (hex),    219 (dez)
=             _PCA0CPL3 =    eb (hex),    235 (dez)
=              _P1MDOUT =    a5 (hex),    165 (dez)
=             _PCA0CPL4 =    ed (hex),    237 (dez)
=             _PCA0CPL5 =    e1 (hex),    225 (dez)
=             _PCA0CPM4 =    de (hex),    222 (dez)
=             _PCA0CPM5 =    df (hex),    223 (dez)
=             _PCA0CPH0 =    fc (hex),    252 (dez)
=               _MAC0SO =    c1 (hex),    193 (dez)
=             _PCA0CPH1 =    fe (hex),    254 (dez)
=             _PCA0CPH2 =    ea (hex),    234 (dez)
=             _PCA0CPH3 =    ec (hex),    236 (dez)
=             _PCA0CPH4 =    ee (hex),    238 (dez)
=                 _TB80 =    9b (hex),    155 (dez)
=             _PCA0CPH5 =    e2 (hex),    226 (dez)
=                 _TB81 =    9b (hex),    155 (dez)
=              _PLL0MUL =    8e (hex),    142 (dez)
=              _PLL0DIV =    8d (hex),    141 (dez)
=              _PLL0FLT =    8f (hex),    143 (dez)
=                _FLACL =    b7 (hex),    183 (dez)
=              _SMB0ADR =    c3 (hex),    195 (dez)
=                 _RB80 =    9a (hex),    154 (dez)
=              _MAC0OVR =    97 (hex),    151 (dez)
=                 _RB81 =    9a (hex),    154 (dez)
=             _MAC0ACC2 =    95 (hex),    149 (dez)
=                 _MCE1 =    9d (hex),    157 (dez)
=             _MAC0ACC3 =    96 (hex),    150 (dez)
=              _P0MDOUT =    a4 (hex),    164 (dez)
=             _MAC0ACC0 =    93 (hex),    147 (dez)
=             _MAC0ACC1 =    94 (hex),    148 (dez)
=               _MAC0BL =    91 (hex),    145 (dez)
=               _MAC0AH =    c2 (hex),    194 (dez)
=               _MAC0BH =    92 (hex),    146 (dez)
=               _MAC0AL =    c1 (hex),    193 (dez)
=               _MAC0CF =    c3 (hex),    195 (dez)
=            _PSine_256 =  11f1 (hex),   4593 (dez), text
=                 _EIE2 =    e7 (hex),    231 (dez)
=                _CKCON =    8e (hex),    142 (dez)
=                _ENSMB =    c6 (hex),    198 (dez)
=                 _EIE1 =    e6 (hex),    230 (dez)
=               _MAC0HO =    c3 (hex),    195 (dez)
=                 _BUSY =    c7 (hex),    199 (dez)
=              _P3MDOUT =    a7 (hex),    167 (dez)
=             _Sine_256 =   da1 (hex),   3489 (dez), text
=              _FLHBUSY =    88 (hex),    136 (dez)
=                _FLSCL =    b7 (hex),    183 (dez)
=            _NSine_256 =  1182 (hex),   4482 (dez), text
=                 _CCF0 =    d8 (hex),    216 (dez)
=                 _CCF1 =    d9 (hex),    217 (dez)
=                 _CCF2 =    da (hex),    218 (dez)
=                 _CCF3 =    db (hex),    219 (dez)
=                 _ADC2 =    be (hex),    190 (dez)
=                 _CCF4 =    dc (hex),    220 (dez)
=                 _CCF5 =    dd (hex),    221 (dez)
=               _SMBFTE =    c1 (hex),    193 (dez)
=                 _MODF =    fd (hex),    253 (dez)
=              _SMB0STA =    c1 (hex),    193 (dez)
=                 _EIP1 =    f6 (hex),    246 (dez)
=                 _EIP2 =    f7 (hex),    247 (dez)
=              _P2MDOUT =    a6 (hex),    166 (dez)
=               _OSCXCN =    8c (hex),    140 (dez)
=                _DAC0L =    d2 (hex),    210 (dez)
=                _DAC1L =    d2 (hex),    210 (dez)
=                _DAC0H =    d3 (hex),    211 (dez)
=                _DAC1H =    d3 (hex),    211 (dez)
=               _CP1RIF =    8d (hex),    141 (dez)
=               _CLKSEL =    97 (hex),    151 (dez)
=               _CP0RIF =    8d (hex),    141 (dez)
=                _P1_B0 =    90 (hex),    144 (dez)
=                 _TCON =    88 (hex),    136 (dez)
=              _MAC0STA =    c0 (hex),    192 (dez)
=                _P1_B1 =    91 (hex),    145 (dez)
=                _P1_B2 =    92 (hex),    146 (dez)
=                _P1_B3 =    93 (hex),    147 (dez)
=                _P1_B4 =    94 (hex),    148 (dez)
=                _P1_B5 =    95 (hex),    149 (dez)
=                _P1_B6 =    96 (hex),    150 (dez)
=                _P1_B7 =    97 (hex),    151 (dez)
=               _print2 =   f7c (hex),   3964 (dez), text
=                _P0_B0 =    80 (hex),    128 (dez)
=                _P0_B1 =    81 (hex),    129 (dez)
=                _P0_B2 =    82 (hex),    130 (dez)
=                 _WCOL =    fe (hex),    254 (dez)
=                _P0_B3 =    83 (hex),    131 (dez)
=                _P0_B4 =    84 (hex),    132 (dez)
=                _P0_B5 =    85 (hex),    133 (dez)
=                _P0_B6 =    86 (hex),    134 (dez)
=              _ADC0GTL =    c4 (hex),    196 (dez)
=                _P0_B7 =    87 (hex),    135 (dez)
=                _P3_B0 =    b0 (hex),    176 (dez)
=              _AD0WINT =    e9 (hex),    233 (dez)
=                _P3_B1 =    b1 (hex),    177 (dez)
=                _P3_B2 =    b2 (hex),    178 (dez)
=              _ADC0GTH =    c5 (hex),    197 (dez)
=               _RCAP2L =    ca (hex),    202 (dez)
=                _P3_B3 =    b3 (hex),    179 (dez)
=                _P3_B4 =    b4 (hex),    180 (dez)
=               _RCAP3L =    ca (hex),    202 (dez)
=                _P3_B5 =    b5 (hex),    181 (dez)
=                _P3_B6 =    b6 (hex),    182 (dez)
=               _RCAP2H =    cb (hex),    203 (dez)
=                _P3_B7 =    b7 (hex),    183 (dez)
=                _CPRL2 =    c8 (hex),    200 (dez)
=                _P2_B0 =    a0 (hex),    160 (dez)
=               _RCAP3H =    cb (hex),    203 (dez)
=                _CPRL3 =    c8 (hex),    200 (dez)
=                _P2_B1 =    a1 (hex),    161 (dez)
=                _CPRL4 =    c8 (hex),    200 (dez)
=                _P2_B2 =    a2 (hex),    162 (dez)
=               _RCAP4H =    cb (hex),    203 (dez)
=                _P2_B3 =    a3 (hex),    163 (dez)
=                _P2_B4 =    a4 (hex),    164 (dez)
=                _P2_B5 =    a5 (hex),    165 (dez)
=                _P2_B6 =    a6 (hex),    166 (dez)
=               _RCAP4L =    ca (hex),    202 (dez)
=                _P2_B7 =    a7 (hex),    167 (dez)
=                 _PCON =    87 (hex),    135 (dez)
=                 _XBR0 =    e1 (hex),    225 (dez)
=              _SFRNEXT =    85 (hex),    133 (dez)
=                 _XBR1 =    e2 (hex),    226 (dez)
=                 _XBR2 =    e3 (hex),    227 (dez)
=               _SPI0CN =    f8 (hex),    248 (dez)
=               _CP0OUT =    8e (hex),    142 (dez)
=               _FLSTAT =    88 (hex),    136 (dez)
=           _TIMER0_ISR =   b3d (hex),   2877 (dez), text
=              _ADC0LTH =    c7 (hex),    199 (dez)
=               _CP1FIF =    8c (hex),    140 (dez)
=              _running =   a00 (hex),   2560 (dez), xram
=              _ADC0LTL =    c6 (hex),    198 (dez)
=               _OSCICN =    8a (hex),    138 (dez)
=               _CP1OUT =    8e (hex),    142 (dez)
=               _OSCICL =    8b (hex),    139 (dez)
=               _SMBTOE =    c0 (hex),    192 (dez)
=               _CP0FIF =    8c (hex),    140 (dez)
=                _EXEN2 =    cb (hex),    203 (dez)
=                _EXEN3 =    cb (hex),    203 (dez)
=              _AD2WINT =    e8 (hex),    232 (dez)
=                _EXEN4 =    cb (hex),    203 (dez)
=                 _TMOD =    89 (hex),    137 (dez)
=              _SFRLAST =    86 (hex),    134 (dez)
=               _TMR2CN =    c8 (hex),    200 (dez)
=               _TMR3CN =    c8 (hex),    200 (dez)
=               _TMR2CF =    c9 (hex),    201 (dez)
=                 _REN0 =    9c (hex),    156 (dez)
=                 _REN1 =    9c (hex),    156 (dez)
=               _TMR3CF =    c9 (hex),    201 (dez)
=               _TMR4CF =    c9 (hex),    201 (dez)
=                _ADC0L =    be (hex),    190 (dez)
=                _ADC0H =    bf (hex),    191 (dez)
=               _TMR4CN =    c8 (hex),    200 (dez)
=             _MAC0RNDH =    cf (hex),    207 (dez)
=             _MAC0RNDL =    ce (hex),    206 (dez)
=               _S1MODE =    9f (hex),    159 (dez)
=                 _SPIF =    ff (hex),    255 (dez)
=                    _P =    d0 (hex),    208 (dez)
=               _dacset =   a13 (hex),   2579 (dez), xram
=               _PSBANK =    b1 (hex),    177 (dez)
=                  _DPH =    83 (hex),    131 (dez)
=                  _TL0 =    8a (hex),    138 (dez)
=                  _TL1 =    8b (hex),    139 (dez)
=                    _B =    f0 (hex),    240 (dez)
=                  _DPL =    82 (hex),    130 (dez)
=                  _TH0 =    8c (hex),    140 (dez)
=                  _TH1 =    8d (hex),    141 (dez)
=               _DAC0CN =    d4 (hex),    212 (dez)
=                  _TI0 =    99 (hex),    153 (dez)
=                  _TI1 =    99 (hex),    153 (dez)
=               _DAC1CN =    d4 (hex),    212 (dez)
=                _SBUF0 =    99 (hex),    153 (dez)
=                _WDTCN =    ff (hex),    255 (dez)
=                _SBUF1 =    99 (hex),    153 (dez)
=                  _TF4 =    cf (hex),    207 (dez)
=                  _RI0 =    98 (hex),    152 (dez)
=                  _RI1 =    98 (hex),    152 (dez)
=                  _TF0 =    8d (hex),    141 (dez)
=                  _TF1 =    8f (hex),    143 (dez)
=                  _TF2 =    cf (hex),    207 (dez)
=                  _TF3 =    cf (hex),    207 (dez)
=              _SPI0DAT =    9b (hex),    155 (dez)
=              _SPI0CFG =    9a (hex),    154 (dez)
=              _SPI0CKR =    9d (hex),    157 (dez)
=                  _PT0 =    b9 (hex),    185 (dez)
=                  _PT1 =    bb (hex),    187 (dez)
=                  _PT2 =    bd (hex),    189 (dez)
=               __reset =     0 (hex),      0 (dez), text
=                  _RS0 =    d3 (hex),    211 (dez)
=                  _RS1 =    d4 (hex),    212 (dez)
=            _PORT_Init =  10a5 (hex),   4261 (dez), text
=               _PLL0CN =    89 (hex),    137 (dez)
=               _SMB0CN =    c0 (hex),    192 (dez)
=               _vkputc =   f1c (hex),   3868 (dez), text
=               _P1MDIN =    ad (hex),    173 (dez)
=                _CP1EN =    8f (hex),    143 (dez)
=               _SMB0CR =    cf (hex),    207 (dez)
=                  _PX0 =    b8 (hex),    184 (dez)
=                  _TR4 =    ca (hex),    202 (dez)
=                  _ACC =    e0 (hex),    224 (dez)
=                  _PX1 =    ba (hex),    186 (dez)
=                _CP0EN =    8f (hex),    143 (dez)
=                  _TR0 =    8c (hex),    140 (dez)
=                  _TR1 =    8e (hex),    142 (dez)
=                  _TR2 =    ca (hex),    202 (dez)
=                _SCON0 =    98 (hex),    152 (dez)
=                  _TR3 =    ca (hex),    202 (dez)
=                _SCON1 =    98 (hex),    152 (dez)
=                  _IT0 =    88 (hex),    136 (dez)
=                 _ramp =   a17 (hex),   2583 (dez), xram
=                  _IT1 =    8a (hex),    138 (dez)
=                  _PSW =    d0 (hex),    208 (dez)
=               _AD0CM0 =    ea (hex),    234 (dez)
=              _CP0HYN0 =    88 (hex),    136 (dez)
=               _AD0CM1 =    eb (hex),    235 (dez)
=              _CP0HYN1 =    89 (hex),    137 (dez)
=                  _STO =    c4 (hex),    196 (dez)
=               _vkgetc =   f5e (hex),   3934 (dez), text
=               _AD2CM2 =    eb (hex),    235 (dez)
=              _AD2BUSY =    ec (hex),    236 (dez)
=               _AD2CM0 =    e9 (hex),    233 (dez)
=              _CP1HYN0 =    88 (hex),    136 (dez)
=               _AD2CM1 =    ea (hex),    234 (dez)
=              _CP1HYN1 =    89 (hex),    137 (dez)
=                  _STA =    c5 (hex),    197 (dez)
=                 _wcnt =   a03 (hex),   2563 (dez), xram
=                  _IE0 =    89 (hex),    137 (dez)
=                  _IE1 =    8b (hex),    139 (dez)
=              _CP1HYP0 =    8a (hex),    138 (dez)
=              _CP1HYP1 =    8b (hex),    139 (dez)
=                  _CT4 =    c9 (hex),    201 (dez)
=                  _EX0 =    a8 (hex),    168 (dez)
=                _data0 =   a0d (hex),   2573 (dez), xram
=                  _EX1 =    aa (hex),    170 (dez)
=                _data1 =   a0b (hex),   2571 (dez), xram
=                  _CT2 =    c9 (hex),    201 (dez)
=                  _CT3 =    c9 (hex),    201 (dez)
=              _SFRPAGE =    84 (hex),    132 (dez)
=            _ADC0_Init =   d7e (hex),   3454 (dez), text
=               _ADC2GT =    c4 (hex),    196 (dez)
=                  _ET0 =    a9 (hex),    169 (dez)
=                  _ET1 =    ab (hex),    171 (dez)
=                  _ET2 =    ad (hex),    173 (dez)
=           _PTriag_256 =  1113 (hex),   4371 (dez), text
=                _PSCTL =    8f (hex),    143 (dez)
=              _SFRPGCN =    96 (hex),    150 (dez)
=              _CP0HYP0 =    8a (hex),    138 (dez)
=              _CP0HYP1 =    8b (hex),    139 (dez)
=              _AD0LJST =    e8 (hex),    232 (dez)
=               _ADC2CF =    bc (hex),    188 (dez)
=               _ADC0CN =    e8 (hex),    232 (dez)
=              _AD0BUSY =    ec (hex),    236 (dez)
=                  _ES0 =    ac (hex),    172 (dez)
=                 _jcnt =   a07 (hex),   2567 (dez), xram
=               _RSTSRC =    ef (hex),    239 (dez)
=           _NTriag_256 =   34a (hex),    842 (dez), text
=               _ADC0CF =    bc (hex),    188 (dez)
=               _ADC2CN =    e8 (hex),    232 (dez)
=                 _kcnt =   a05 (hex),   2565 (dez), xram
=               _ADC2LT =    c6 (hex),    198 (dez)
=                _TMR4H =    cd (hex),    205 (dez)
=              _P5MDOUT =    9d (hex),    157 (dez)
=                _TMR4L =    cc (hex),    204 (dez)
=           _UART0_Init =   d9a (hex),   3482 (dez), text
=                _TXBMT =    f9 (hex),    249 (dez)
=               _RXOVRN =    fc (hex),    252 (dez)
=                   _SP =    81 (hex),    129 (dez)
=                _TMR2L =    cc (hex),    204 (dez)
=               _AD0INT =    ed (hex),    237 (dez)
=                  _wav =     0 (hex),      0 (dez), xram
=                _SSTA0 =    91 (hex),    145 (dez)
=                _TMR3L =    cc (hex),    204 (dez)
=                 _icnt =   a09 (hex),   2569 (dez), xram
=                _TMR2H =    cd (hex),    205 (dez)
=               _CCH0MA =    9a (hex),    154 (dez)
=               _CCH0LC =    a3 (hex),    163 (dez)
=                   _PS =    bc (hex),    188 (dez)
=                _TMR3H =    cd (hex),    205 (dez)
=                 _main =   3c2 (hex),    962 (dez), text
=                _SPIEN =    f8 (hex),    248 (dez)
=                   _SI =    c3 (hex),    195 (dez)
=               _AMX2SL =    bb (hex),    187 (dez)
=               _EMI0TC =    a1 (hex),    161 (dez)
=               _AD2INT =    ed (hex),    237 (dez)
=               _CCH0CN =    a1 (hex),    161 (dez)
=           _inttobytes =   f2c (hex),   3884 (dez), text
=               _AMX0SL =    bb (hex),    187 (dez)
=          _PSquare_256 =   136 (hex),    310 (dez), text
=            _Triag_256 =   e5b (hex),   3675 (dez), text
=                   _CY =    d7 (hex),    215 (dez)
=               _PCA0MD =    d9 (hex),    217 (dez)
=              _P4MDOUT =    9c (hex),    156 (dez)
=               _REF0CN =    d1 (hex),    209 (dez)
=                   _CR =    de (hex),    222 (dez)
=                   _IE =    a8 (hex),    168 (dez)
=                _gain0 =   a02 (hex),   2562 (dez), xram
=                _gain1 =   a01 (hex),   2561 (dez), xram
=          _Timer0_Init =   d56 (hex),   3414 (dez), text
=               _PCA0CN =    d8 (hex),    216 (dez)
=             _swpstart =   a11 (hex),   2577 (dez), xram
=                _PCA0L =    f9 (hex),    249 (dez)
=               _EMI0CN =    a2 (hex),    162 (dez)
=               _AMX0CF =    ba (hex),    186 (dez)
=                   _OV =    d2 (hex),    210 (dez)
=          _NSquare_256 =    74 (hex),    116 (dez), text
=                _PCA0H =    fa (hex),    250 (dez)
=                _AD0EN =    ef (hex),    239 (dez)
=                   _EA =    af (hex),    175 (dez)
=               _CCH0TN =    a2 (hex),    162 (dez)
=               _EMI0CF =    a3 (hex),    163 (dez)
=               _AMX2CF =    ba (hex),    186 (dez)
=                   _CF =    df (hex),    223 (dez)
=                   _AC =    d6 (hex),    214 (dez)
=                   _IP =    b8 (hex),    184 (dez)
=                _AD2EN =    ef (hex),    239 (dez)
=                   _AA =    c2 (hex),    194 (dez)
=                   _F0 =    d5 (hex),    213 (dez)
=                   _F1 =    d1 (hex),    209 (dez)
=              _P7MDOUT =    9f (hex),    159 (dez)
=              _swpstep =   a0f (hex),   2575 (dez), xram
=               _CPT0CN =    88 (hex),    136 (dez)
=               _CPT1CN =    88 (hex),    136 (dez)
=                _AD0TM =    ee (hex),    238 (dez)
=               _stpsav =   a15 (hex),   2581 (dez), xram
=               _SADDR0 =    a9 (hex),    169 (dez)
=          _SYSCLK_Init =  10c1 (hex),   4289 (dez), text
=                _AD2TM =    ee (hex),    238 (dez)
=               _CPT1MD =    89 (hex),    137 (dez)
=              _P6MDOUT =    9e (hex),    158 (dez)
=               _CPT0MD =    89 (hex),    137 (dez)
=                   _P4 =    c8 (hex),    200 (dez)
=                   _P5 =    d8 (hex),    216 (dez)
=                   _P6 =    e8 (hex),    232 (dez)
=                   _pv =   600 (hex),   1536 (dez), xram
=                   _P7 =    f8 (hex),    248 (dez)
=                   _P0 =    80 (hex),    128 (dez)
=               _SADEN0 =    b9 (hex),    185 (dez)
=                   _P1 =    90 (hex),    144 (dez)
=               _NSSMD0 =    fa (hex),    250 (dez)
=                   _P2 =    a0 (hex),    160 (dez)
=               _NSSMD1 =    fb (hex),    251 (dez)
=                   _P3 =    b0 (hex),    176 (dez)
=                _MAC0Z =    c2 (hex),    194 (dez)
=                   _pi =   200 (hex),    512 (dez), xram
=                 _EXF4 =    ce (hex),    206 (dez)
=                 _EXF2 =    ce (hex),    206 (dez)
=                 _EXF3 =    ce (hex),    206 (dez)
=                 _SM20 =    9d (hex),    157 (dez)
=                _MAC0N =    c0 (hex),    192 (dez)
=           _Square_256 =  1005 (hex),   4101 (dez), text
=             _PCA0CPM2 =    dc (hex),    220 (dez)
=             _PCA0CPL0 =    fb (hex),    251 (dez)
=                 _SM00 =    9f (hex),    159 (dez)
=                _updwn =   a19 (hex),   2585 (dez), xram
=             _PCA0CPM3 =    dd (hex),    221 (dez)
=             _PCA0CPL1 =    fd (hex),    253 (dez)
=              _SMB0DAT =    c2 (hex),    194 (dez)
=             _PCA0CPM0 =    da (hex),    218 (dez)
=             _PCA0CPL2 =    e9 (hex),    233 (dez)
=                 _SM10 =    9e (hex),    158 (dez)

objectfile:_doprnt.obj:

objectfile:_startup.obj:

objectfile:peep.obj: (in C:\uC51\lib\small\stdlib.lib):

objectfile:ind_call.obj: (in C:\uC51\lib\small\stdlib.lib):

objectfile:copy_l.obj: (in C:\uC51\lib\small\stdlib.lib):

objectfile:strcmp.obj: (in C:\uC51\lib\small\stdlib.lib):

objectfile:mem32.obj: (in C:\uC51\lib\small\stdlib.lib):

objectfile:mul_i2.obj: (in C:\uC51\lib\small\stdlib.lib):

objectfile:dimo_2.obj: (in C:\uC51\lib\small\stdlib.lib):

objectfile:ser_iop.obj: (in C:\uC51\lib\small\ser_ioP.lib):

